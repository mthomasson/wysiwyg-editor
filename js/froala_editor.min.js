/**
 * @license
 froala_editor v2.8.1 (https://www.froala.com/wysiwyg-editor)
 License https://froala.com/wysiwyg-editor/terms/
 Copyright 2014-2018 Froala Labs
 */
'use strict';
!function(factory) {
    if ("function" == typeof define && define.amd) {
        define(["jquery"], factory);
    } else {
        if ("object" == typeof module && module.exports) {
            /**
             * @param {?} win
             * @param {string} handler
             * @return {?}
             */
            module.exports = function(win, handler) {
                return handler === undefined && (handler = "undefined" != typeof window ? require("jquery") : require("jquery")(win)), factory(handler);
            };
        } else {
            factory(window.jQuery);
        }
    }
}(function($) {
    /**
     * @param {!Element} context
     * @param {!Function} options
     * @return {undefined}
     */
    var init = function(context, options) {
        /** @type {number} */
        this.id = ++$.FE.ID;
        this.opts = $.extend(true, {}, $.extend({}, init.DEFAULTS, "object" == typeof options && options));
        /** @type {string} */
        var md = JSON.stringify(this.opts);
        $.FE.OPTS_MAPPING[md] = $.FE.OPTS_MAPPING[md] || this.id;
        this.sid = $.FE.OPTS_MAPPING[md];
        $.FE.SHARED[this.sid] = $.FE.SHARED[this.sid] || {};
        this.shared = $.FE.SHARED[this.sid];
        this.shared.count = (this.shared.count || 0) + 1;
        this.$oel = $(context);
        this.$oel.data("froala.editor", this);
        this.o_doc = context.ownerDocument;
        this.o_win = "defaultView" in this.o_doc ? this.o_doc.defaultView : this.o_doc.parentWindow;
        var roundedTop = $(this.o_win).scrollTop();
        this.$oel.on("froala.doInit", $.proxy(function() {
            this.$oel.off("froala.doInit");
            this.doc = this.$el.get(0).ownerDocument;
            this.win = "defaultView" in this.doc ? this.doc.defaultView : this.doc.parentWindow;
            this.$doc = $(this.doc);
            this.$win = $(this.win);
            if (!this.opts.pluginsEnabled) {
                /** @type {!Array<string>} */
                this.opts.pluginsEnabled = Object.keys($.FE.PLUGINS);
            }
            if (this.opts.initOnClick) {
                this.load($.FE.MODULES);
                this.$el.on("touchstart.init", function() {
                    $(this).data("touched", true);
                });
                this.$el.on("touchmove.init", function() {
                    $(this).removeData("touched");
                });
                this.$el.on("mousedown.init touchend.init dragenter.init focus.init", $.proxy(function(event) {
                    if ("touchend" == event.type && !this.$el.data("touched")) {
                        return true;
                    }
                    if (1 === event.which || !event.which) {
                        this.$el.off("mousedown.init touchstart.init touchmove.init touchend.init dragenter.init focus.init");
                        this.load($.FE.MODULES);
                        this.load($.FE.PLUGINS);
                        var el = event.originalEvent && event.originalEvent.originalTarget;
                        if (el && "IMG" == el.tagName) {
                            $(el).trigger("mousedown");
                        }
                        if ("undefined" == typeof this.ul) {
                            this.destroy();
                        }
                        if ("touchend" == event.type && this.image && event.originalEvent && event.originalEvent.target && $(event.originalEvent.target).is("img")) {
                            setTimeout($.proxy(function() {
                                this.image.edit($(event.originalEvent.target));
                            }, this), 100);
                        }
                        /** @type {boolean} */
                        this.ready = true;
                        this.events.trigger("initialized");
                    }
                }, this));
                this.events.trigger("initializationDelayed");
            } else {
                this.load($.FE.MODULES);
                this.load($.FE.PLUGINS);
                $(this.o_win).scrollTop(roundedTop);
                if ("undefined" == typeof this.ul) {
                    this.destroy();
                }
                /** @type {boolean} */
                this.ready = true;
                this.events.trigger("initialized");
            }
        }, this));
        this._init();
    };
    init.DEFAULTS = {
        initOnClick : false,
        pluginsEnabled : null
    };
    init.MODULES = {};
    init.PLUGINS = {};
    /** @type {string} */
    init.VERSION = "2.8.1";
    /** @type {!Array} */
    init.INSTANCES = [];
    init.OPTS_MAPPING = {};
    init.SHARED = {};
    /** @type {number} */
    init.ID = 0;
    /**
     * @return {undefined}
     */
    init.prototype._init = function() {
        var nodeName = this.$oel.prop("tagName");
        this.$oel.closest("label").length;
        var _showNavsIfNeeded = $.proxy(function() {
            if ("TEXTAREA" != nodeName) {
                this._original_html = this._original_html || this.$oel.html();
            }
            this.$box = this.$box || this.$oel;
            if (this.opts.fullPage) {
                /** @type {boolean} */
                this.opts.iframe = true;
            }
            if (this.opts.iframe) {
                this.$iframe = $('<iframe src="about:blank" frameBorder="0">');
                this.$wp = $("<div></div>");
                this.$box.html(this.$wp);
                this.$wp.append(this.$iframe);
                this.$iframe.get(0).contentWindow.document.open();
                this.$iframe.get(0).contentWindow.document.write("<!DOCTYPE html>");
                this.$iframe.get(0).contentWindow.document.write("<html><head></head><body></body></html>");
                this.$iframe.get(0).contentWindow.document.close();
                this.$el = this.$iframe.contents().find("body");
                this.el = this.$el.get(0);
                this.$head = this.$iframe.contents().find("head");
                this.$html = this.$iframe.contents().find("html");
                this.iframe_document = this.$iframe.get(0).contentWindow.document;
            } else {
                this.$el = $("<div></div>");
                this.el = this.$el.get(0);
                this.$wp = $("<div></div>").append(this.$el);
                this.$box.html(this.$wp);
            }
            this.$oel.trigger("froala.doInit");
        }, this);
        var _searchCards = $.proxy(function() {
            this.$box = $("<div>");
            this.$oel.before(this.$box).hide();
            this._original_html = this.$oel.val();
            this.$oel.parents("form").on("submit." + this.id, $.proxy(function() {
                this.events.trigger("form.submit");
            }, this));
            this.$oel.parents("form").on("reset." + this.id, $.proxy(function() {
                this.events.trigger("form.reset");
            }, this));
            _showNavsIfNeeded();
        }, this);
        var _setupPlayAria = $.proxy(function() {
            this.$el = this.$oel;
            this.el = this.$el.get(0);
            this.$el.attr("contenteditable", true).css("outline", "none").css("display", "inline-block");
            /** @type {boolean} */
            this.opts.multiLine = false;
            /** @type {boolean} */
            this.opts.toolbarInline = false;
            this.$oel.trigger("froala.doInit");
        }, this);
        var _getPageSource = $.proxy(function() {
            this.$el = this.$oel;
            this.el = this.$el.get(0);
            /** @type {boolean} */
            this.opts.toolbarInline = false;
            this.$oel.trigger("froala.doInit");
        }, this);
        var _listenForLogMessages = $.proxy(function() {
            this.$el = this.$oel;
            this.el = this.$el.get(0);
            /** @type {boolean} */
            this.opts.toolbarInline = false;
            this.$oel.on("click.popup", function(event) {
                event.preventDefault();
            });
            this.$oel.trigger("froala.doInit");
        }, this);
        if (this.opts.editInPopup) {
            _listenForLogMessages();
        } else {
            if ("TEXTAREA" == nodeName) {
                _searchCards();
            } else {
                if ("A" == nodeName) {
                    _setupPlayAria();
                } else {
                    if ("IMG" == nodeName) {
                        _getPageSource();
                    } else {
                        if ("BUTTON" == nodeName || "INPUT" == nodeName) {
                            /** @type {boolean} */
                            this.opts.editInPopup = true;
                            /** @type {boolean} */
                            this.opts.toolbarInline = false;
                            _listenForLogMessages();
                        } else {
                            _showNavsIfNeeded();
                        }
                    }
                }
            }
        }
    };
    /**
     * @param {!Object} e
     * @return {?}
     */
    init.prototype.load = function(e) {
        var name;
        for (name in e) {
            if (e.hasOwnProperty(name)) {
                if (this[name]) {
                    continue;
                }
                if ($.FE.PLUGINS[name] && this.opts.pluginsEnabled.indexOf(name) < 0) {
                    continue;
                }
                if (this[name] = new e[name](this), this[name]._init && (this[name]._init(), this.opts.initOnClick && "core" == name)) {
                    return false;
                }
            }
        }
    };
    /**
     * @return {undefined}
     */
    init.prototype.destroy = function() {
        this.shared.count--;
        this.events.$off();
        var item = this.html.get();
        if (this.opts.iframe && (this.events.disableBlur(), this.win.focus(), this.events.enableBlur()), this.events.trigger("destroy", [], true), this.events.trigger("shared.destroy", undefined, true), 0 === this.shared.count) {
            var requestedName;
            for (requestedName in this.shared) {
                if (this.shared.hasOwnProperty(requestedName)) {
                    this.shared[requestedName];
                    /** @type {null} */
                    $.FE.SHARED[this.sid][requestedName] = null;
                }
            }
            delete $.FE.SHARED[this.sid];
        }
        this.$oel.parents("form").off("." + this.id);
        this.$oel.off("click.popup");
        this.$oel.removeData("froala.editor");
        this.$oel.off("froalaEditor");
        this.core.destroy(item);
        $.FE.INSTANCES.splice($.FE.INSTANCES.indexOf(this), 1);
    };
    /**
     * @param {string} s
     * @return {?}
     */
    $.fn.froalaEditor = function(s) {
        /** @type {!Array} */
        var additionalArgs = [];
        /** @type {number} */
        var i = 0;
        for (; i < arguments.length; i++) {
            additionalArgs.push(arguments[i]);
        }
        if ("string" == typeof s) {
            /** @type {!Array} */
            var rectSel = [];
            return this.each(function() {
                var match = $(this).data("froala.editor");
                if (match) {
                    var m;
                    var i;
                    if (0 < s.indexOf(".") && match[s.split(".")[0]] ? (match[s.split(".")[0]] && (m = match[s.split(".")[0]]), i = s.split(".")[1]) : (m = match, i = s.split(".")[0]), !m[i]) {
                        return $.error("Method " + s + " does not exist in Froala Editor.");
                    }
                    var r = m[i].apply(match, additionalArgs.slice(1));
                    if (r === undefined) {
                        rectSel.push(this);
                    } else {
                        if (0 === rectSel.length) {
                            rectSel.push(r);
                        }
                    }
                }
            }), 1 == rectSel.length ? rectSel[0] : rectSel;
        }
        if ("object" == typeof s || !s) {
            return this.each(function() {
                if (!$(this).data("froala.editor")) {
                    new init(this, s);
                }
            });
        }
    };
    /** @type {function(!Element, !Function): undefined} */
    $.fn.froalaEditor.Constructor = init;
    /** @type {function(!Element, !Function): undefined} */
    $.FroalaEditor = init;
    /** @type {function(!Element, !Function): undefined} */
    $.FE = init;
    /** @type {number} */
    $.FE.XS = 0;
    /** @type {number} */
    $.FE.SM = 1;
    /** @type {number} */
    $.FE.MD = 2;
    /** @type {number} */
    $.FE.LG = 3;
    /** @type {string} */
    $.FE.LinkRegExCommon = "[a-z\\u0080-\\u009f\\u00a1-\\uffff0-9-_.]{1,}";
    /** @type {string} */
    $.FE.LinkRegExEnd = "((:[0-9]{1,5})|)(((\\/|\\?|#)[a-z\\u00a1-\\uffff0-9@?\\|!^=%&amp;/~+#-\\'*-_{}]*)|())";
    /** @type {string} */
    $.FE.LinkRegExTLD = "((" + $.FE.LinkRegExCommon + ")(\\.(com|net|org|edu|mil|gov|co|biz|info|me|dev)))";
    /** @type {string} */
    $.FE.LinkRegExHTTP = "((ftp|http|https):\\/\\/" + $.FE.LinkRegExCommon + ")";
    /** @type {string} */
    $.FE.LinkRegExAuth = "((ftp|http|https):\\/\\/[\\u0021-\\uffff]{1,}@" + $.FE.LinkRegExCommon + ")";
    /** @type {string} */
    $.FE.LinkRegExWWW = "(www\\." + $.FE.LinkRegExCommon + "\\.[a-z0-9-]{2,24})";
    /** @type {string} */
    $.FE.LinkRegEx = "(" + $.FE.LinkRegExTLD + "|" + $.FE.LinkRegExHTTP + "|" + $.FE.LinkRegExWWW + "|" + $.FE.LinkRegExAuth + ")" + $.FE.LinkRegExEnd;
    /** @type {!Array} */
    $.FE.LinkProtocols = ["mailto", "tel", "sms", "notes", "data"];
    /** @type {!RegExp} */
    $.FE.MAIL_REGEX = /.+@.+\..+/i;
    /**
     * @param {!Object} editor
     * @return {?}
     */
    $.FE.MODULES.helpers = function(editor) {
        /**
         * @return {?}
         */
        function detectBrowser() {
            var val;
            var numChildOptions;
            var browser = {};
            /** @type {number} */
            var version = (numChildOptions = -1, "Microsoft Internet Explorer" == navigator.appName ? (val = navigator.userAgent, null !== (new RegExp("MSIE ([0-9]{1,}[\\.0-9]{0,})")).exec(val) && (numChildOptions = parseFloat(RegExp.$1))) : "Netscape" == navigator.appName && (val = navigator.userAgent, null !== (new RegExp("Trident/.*rv:([0-9]{1,}[\\.0-9]{0,})")).exec(val) && (numChildOptions = parseFloat(RegExp.$1))), numChildOptions);
            if (0 < version) {
                /** @type {boolean} */
                browser.msie = true;
            } else {
                /** @type {string} */
                var a = navigator.userAgent.toLowerCase();
                /** @type {!Array<string>} */
                var BROWSER_ENGINES = /(edge)[ \/]([\w.]+)/.exec(a) || /(chrome)[ \/]([\w.]+)/.exec(a) || /(webkit)[ \/]([\w.]+)/.exec(a) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(a) || /(msie) ([\w.]+)/.exec(a) || a.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(a) || [];
                /** @type {string} */
                var p = BROWSER_ENGINES[1] || "";
                BROWSER_ENGINES[2];
                if (BROWSER_ENGINES[1]) {
                    /** @type {boolean} */
                    browser[p] = true;
                }
                if (browser.chrome) {
                    /** @type {boolean} */
                    browser.webkit = true;
                } else {
                    if (browser.webkit) {
                        /** @type {boolean} */
                        browser.safari = true;
                    }
                }
            }
            return browser.msie && (browser.version = version), browser;
        }
        /**
         * @return {?}
         */
        function isIOS() {
            return /(iPad|iPhone|iPod)/g.test(navigator.userAgent) && !test();
        }
        /**
         * @return {?}
         */
        function isAndroid() {
            return /(Android)/g.test(navigator.userAgent) && !test();
        }
        /**
         * @return {?}
         */
        function check() {
            return /(Blackberry)/g.test(navigator.userAgent);
        }
        /**
         * @return {?}
         */
        function test() {
            return /(Windows Phone)/gi.test(navigator.userAgent);
        }
        /**
         * @param {?} start
         * @return {?}
         */
        function strToNum(start) {
            return parseInt(start, 10) || 0;
        }
        var direction;
        /** @type {null} */
        var l = null;
        return {
            _init : function() {
                editor.browser = detectBrowser();
                (function() {
                    /**
                     * @param {!Object} options
                     * @param {string} prop
                     * @return {undefined}
                     */
                    function check(options, prop) {
                        var value = options[prop];
                        /**
                         * @param {string} e
                         * @return {?}
                         */
                        options[prop] = function(e) {
                            var container;
                            /** @type {boolean} */
                            var n = false;
                            /** @type {boolean} */
                            var r = false;
                            if (e && e.match(t)) {
                                e = e.replace(t, "");
                                if (!this.parentNode) {
                                    a.appendChild(this);
                                    /** @type {boolean} */
                                    r = true;
                                }
                                var section = this.parentNode;
                                return this.id || (this.id = "rootedQuerySelector_id_" + (new Date).getTime(), n = true), container = value.call(section, "#" + this.id + " " + e), n && (this.id = ""), r && a.removeChild(this), container;
                            }
                            return value.call(this, e);
                        };
                    }
                    var a = editor.o_doc.createElement("div");
                    try {
                        a.querySelectorAll(":scope *");
                    } catch (s) {
                        /** @type {!RegExp} */
                        var t = /^\s*:scope/gi;
                        check(Element.prototype, "querySelector");
                        check(Element.prototype, "querySelectorAll");
                        check(HTMLElement.prototype, "querySelector");
                        check(HTMLElement.prototype, "querySelectorAll");
                    }
                })();
                if (!Element.prototype.matches) {
                    /** @type {function(this:Element, string): boolean} */
                    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
                }
                if (!Element.prototype.closest) {
                    /**
                     * @param {string} selector
                     * @return {(Element|null)}
                     */
                    Element.prototype.closest = function(selector) {
                        /** @type {!Element} */
                        var element = this;
                        if (!element) {
                            return null;
                        }
                        if (!document.documentElement.contains(this)) {
                            return null;
                        }
                        do {
                            if (element.matches(selector)) {
                                return element;
                            }
                            /** @type {(Element|null)} */
                            element = element.parentElement;
                        } while (null !== element);
                        return null;
                    };
                }
            },
            isIOS : isIOS,
            isMac : function() {
                return null == l && (l = 0 <= navigator.platform.toUpperCase().indexOf("MAC")), l;
            },
            isAndroid : isAndroid,
            isBlackberry : check,
            isWindowsPhone : test,
            isMobile : function() {
                return isAndroid() || isIOS() || check();
            },
            isEmail : function(emailValue) {
                return !/^(https?:|ftps?:|)\/\//i.test(emailValue) && $.FE.MAIL_REGEX.test(emailValue);
            },
            requestAnimationFrame : function() {
                return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function(rafFunction) {
                    window.setTimeout(rafFunction, 1E3 / 60);
                };
            },
            getPX : strToNum,
            screenSize : function() {
                var $this = $('<div class="fr-visibility-helper"></div>').appendTo("body:first");
                try {
                    var t = strToNum($this.css("margin-left"));
                    return $this.remove(), t;
                } catch (n) {
                    return $.FE.LG;
                }
            },
            isTouch : function() {
                return "ontouchstart" in window || window.DocumentTouch && document instanceof DocumentTouch;
            },
            sanitizeURL : function(url) {
                return /^(https?:|ftps?:|)\/\//i.test(url) ? url : /^([A-Za-z]:(\\){1,2}|[A-Za-z]:((\\){1,2}[^\\]+)+)(\\)?$/i.test(url) ? url : (new RegExp("^(" + $.FE.LinkProtocols.join("|") + "):\\/\\/", "i")).test(url) ? url : url = encodeURIComponent(url).replace(/%23/g, "#").replace(/%2F/g, "/").replace(/%25/g, "%").replace(/mailto%3A/gi, "mailto:").replace(/file%3A/gi, "file:").replace(/sms%3A/gi, "sms:").replace(/tel%3A/gi, "tel:").replace(/notes%3A/gi, "notes:").replace(/data%3Aimage/gi, "data:image").replace(/blob%3A/gi,
                    "blob:").replace(/webkit-fake-url%3A/gi, "webkit-fake-url:").replace(/%3F/g, "?").replace(/%3D/g, "=").replace(/%26/g, "&").replace(/&amp;/g, "&").replace(/%2C/g, ",").replace(/%3B/g, ";").replace(/%2B/g, "+").replace(/%40/g, "@").replace(/%5B/g, "[").replace(/%5D/g, "]").replace(/%7B/g, "{").replace(/%7D/g, "}");
            },
            isArray : function(value) {
                return value && !value.propertyIsEnumerable("length") && "object" == typeof value && "number" == typeof value.length;
            },
            RGBToHex : function(r) {
                /**
                 * @param {?} value
                 * @return {?}
                 */
                function pad(value) {
                    return ("0" + parseInt(value, 10).toString(16)).slice(-2);
                }
                try {
                    return r && "transparent" !== r ? /^#[0-9A-F]{6}$/i.test(r) ? r : ("#" + pad((r = r.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/))[1]) + pad(r[2]) + pad(r[3])).toUpperCase() : "";
                } catch (n) {
                    return null;
                }
            },
            HEXtoRGB : function(e) {
                e = e.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, function(canCreateDiscussions, h, s, Q) {
                    return h + h + s + s + Q + Q;
                });
                /** @type {(Array<string>|null)} */
                var t = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);
                return t ? "rgb(" + parseInt(t[1], 16) + ", " + parseInt(t[2], 16) + ", " + parseInt(t[3], 16) + ")" : "";
            },
            isURL : function(url) {
                return !!/^(https?:|ftps?:|)\/\//i.test(url) && (url = String(url).replace(/</g, "%3C").replace(/>/g, "%3E").replace(/"/g, "%22").replace(/ /g, "%20"), (new RegExp("^" + $.FE.LinkRegExHTTP + $.FE.LinkRegExEnd + "$", "gi")).test(url));
            },
            getAlignment : function(element) {
                var fn = (element.css("text-align") || "").replace(/-(.*)-/g, "");
                if (["left", "right", "justify", "center"].indexOf(fn) < 0) {
                    if (!direction) {
                        var div = $('<div dir="' + ("rtl" == editor.opts.direction ? "rtl" : "auto") + '" style="text-align: ' + editor.$el.css("text-align") + '; position: fixed; left: -3000px;"><span id="s1">.</span><span id="s2">.</span></div>');
                        $("body:first").append(div);
                        var leftDistance = div.find("#s1").get(0).getBoundingClientRect().left;
                        var rightDistance = div.find("#s2").get(0).getBoundingClientRect().left;
                        div.remove();
                        /** @type {string} */
                        direction = leftDistance < rightDistance ? "left" : "right";
                    }
                    /** @type {string} */
                    fn = direction;
                }
                return fn;
            },
            scrollTop : function() {
                return editor.o_win.pageYOffset ? editor.o_win.pageYOffset : editor.o_doc.documentElement && editor.o_doc.documentElement.scrollTop ? editor.o_doc.documentElement.scrollTop : editor.o_doc.body.scrollTop ? editor.o_doc.body.scrollTop : 0;
            },
            scrollLeft : function() {
                return editor.o_win.pageXOffset ? editor.o_win.pageXOffset : editor.o_doc.documentElement && editor.o_doc.documentElement.scrollLeft ? editor.o_doc.documentElement.scrollLeft : editor.o_doc.body.scrollLeft ? editor.o_doc.body.scrollLeft : 0;
            },
            isInViewPort : function(item) {
                var fixedMargins = item.getBoundingClientRect();
                return 0 <= fixedMargins.top && fixedMargins.bottom <= (window.innerHeight || document.documentElement.clientHeight) || fixedMargins.top <= 0 && fixedMargins.bottom >= (window.innerHeight || document.documentElement.clientHeight);
            }
        };
    };
    /**
     * @param {!Object} self
     * @return {?}
     */
    $.FE.MODULES.events = function(self) {
        /**
         * @param {!Object} target
         * @param {string} n
         * @param {!Function} name
         * @return {undefined}
         */
        function on(target, n, name) {
            validate(target, n, name);
        }
        /**
         * @param {number} endStatus
         * @return {?}
         */
        function render(endStatus) {
            if (void 0 === endStatus && (endStatus = true), !self.$wp) {
                return false;
            }
            if (self.helpers.isIOS() && self.$win.get(0).focus(), self.core.hasFocus()) {
                return false;
            }
            if (!self.core.hasFocus() && endStatus) {
                var value = self.$win.scrollTop();
                if (self.browser.msie && self.$box && self.$box.css("position", "fixed"), self.browser.msie && self.$wp && self.$wp.css("overflow", "visible"), bindEvents(), self.$el.focus(), self.events.trigger("focus"), children(), self.browser.msie && self.$box && self.$box.css("position", ""), self.browser.msie && self.$wp && self.$wp.css("overflow", "auto"), value != self.$win.scrollTop() && self.$win.scrollTop(value), !self.selection.info(self.el).atStart) {
                    return false;
                }
            }
            if (!self.core.hasFocus() || 0 < self.$el.find(".fr-marker").length) {
                return false;
            }
            if (self.selection.info(self.el).atStart && self.selection.isCollapsed() && null != self.html.defaultTag()) {
                var t = self.markers.insert();
                if (t && !self.node.blockParent(t)) {
                    $(t).remove();
                    var _postStaredUserWrapSel = self.$el.find(self.html.blockTagsQuery()).get(0);
                    if (_postStaredUserWrapSel) {
                        $(_postStaredUserWrapSel).prepend($.FE.MARKERS);
                        self.selection.restore();
                    }
                } else {
                    if (t) {
                        $(t).remove();
                    }
                }
            }
        }
        /**
         * @return {undefined}
         */
        function children() {
            /** @type {boolean} */
            result = true;
        }
        /**
         * @return {undefined}
         */
        function bindEvents() {
            /** @type {boolean} */
            result = false;
        }
        /**
         * @return {?}
         */
        function removeEventListener() {
            return result;
        }
        /**
         * @param {string} name
         * @param {!Function} callback
         * @param {?} value
         * @return {?}
         */
        function bind(name, callback, value) {
            var r;
            var events = name.split(" ");
            if (1 < events.length) {
                /** @type {number} */
                var i = 0;
                for (; i < events.length; i++) {
                    bind(events[i], callback, value);
                }
                return true;
            }
            if (void 0 === value) {
                /** @type {boolean} */
                value = false;
            }
            r = 0 !== name.indexOf("shared.") ? a[name] = a[name] || [] : self.shared._events[name] = self.shared._events[name] || [];
            if (value) {
                r.unshift(callback);
            } else {
                r.push(callback);
            }
        }
        /**
         * @param {!Object} el
         * @param {string} type
         * @param {string} name
         * @param {!Function} data
         * @param {boolean} err
         * @return {undefined}
         */
        function validate(el, type, name, data, err) {
            if ("function" == typeof name) {
                /** @type {!Function} */
                err = data;
                /** @type {string} */
                data = name;
                /** @type {boolean} */
                name = false;
            }
            var r = err ? self.shared.$_events : file;
            var state = err ? self.sid : self.id;
            if (name) {
                el.on(type.split(" ").join(".ed" + state + " ") + ".ed" + state, name, data);
            } else {
                el.on(type.split(" ").join(".ed" + state + " ") + ".ed" + state, data);
            }
            r.push([el, type.split(" ").join(".ed" + state + " ") + ".ed" + state]);
        }
        /**
         * @param {!Array} resources
         * @return {undefined}
         */
        function remove(resources) {
            /** @type {number} */
            var i = 0;
            for (; i < resources.length; i++) {
                resources[i][0].off(resources[i][1]);
            }
        }
        /**
         * @param {string} e
         * @param {!Array} data
         * @param {boolean} retry
         * @return {?}
         */
        function callback(e, data, retry) {
            if (!self.edit.isDisabled() || retry) {
                var r;
                var selected;
                if (0 !== e.indexOf("shared.")) {
                    r = a[e];
                } else {
                    if (0 < self.shared.count) {
                        return false;
                    }
                    r = self.shared._events[e];
                }
                if (r) {
                    /** @type {number} */
                    var i = 0;
                    for (; i < r.length; i++) {
                        if (false === (selected = r[i].apply(self, data))) {
                            return false;
                        }
                    }
                }
                return false !== (selected = self.$oel.triggerHandler("froalaEditor." + e, $.merge([self], data || []))) && selected;
            }
        }
        /**
         * @return {undefined}
         */
        function value() {
            var j;
            for (j in a) {
                if (a.hasOwnProperty(j)) {
                    delete a[j];
                }
            }
        }
        /**
         * @return {undefined}
         */
        function init() {
            var event;
            for (event in self.shared._events) {
                if (self.shared._events.hasOwnProperty(event)) {
                    delete self.shared._events[event];
                }
            }
        }
        var result;
        var a = {};
        /** @type {boolean} */
        var number = false;
        /** @type {!Array} */
        var file = [];
        return {
            _init : function() {
                self.shared.$_events = self.shared.$_events || [];
                self.shared._events = {};
                if (self.helpers.isMobile()) {
                    /** @type {string} */
                    self._mousedown = "touchstart";
                    /** @type {string} */
                    self._mouseup = "touchend";
                    /** @type {string} */
                    self._move = "touchmove";
                    /** @type {string} */
                    self._mousemove = "touchmove";
                } else {
                    /** @type {string} */
                    self._mousedown = "mousedown";
                    /** @type {string} */
                    self._mouseup = "mouseup";
                    /** @type {string} */
                    self._move = "";
                    /** @type {string} */
                    self._mousemove = "mousemove";
                }
                on(self.$el, "click mouseup mousedown touchstart touchend dragenter dragover dragleave dragend drop dragstart", function(event) {
                    callback(event.type, [event]);
                });
                bind("mousedown", function() {
                    /** @type {number} */
                    var i = 0;
                    for (; i < $.FE.INSTANCES.length; i++) {
                        if ($.FE.INSTANCES[i] != self && $.FE.INSTANCES[i].popups && $.FE.INSTANCES[i].popups.areVisible()) {
                            $.FE.INSTANCES[i].$el.find(".fr-marker").remove();
                        }
                    }
                });
                on(self.$win, self._mousedown, function(res) {
                    callback("window.mousedown", [res]);
                    children();
                });
                on(self.$win, self._mouseup, function(res) {
                    callback("window.mouseup", [res]);
                });
                on(self.$win, "cut copy keydown keyup touchmove touchend", function(event) {
                    callback("window." + event.type, [event]);
                });
                on(self.$doc, "dragend drop", function(event) {
                    callback("document." + event.type, [event]);
                });
                on(self.$el, "keydown keypress keyup input", function(event) {
                    callback(event.type, [event]);
                });
                on(self.$el, "focus", function(event) {
                    if (removeEventListener()) {
                        render(false);
                        if (false === number) {
                            callback(event.type, [event]);
                        }
                    }
                });
                on(self.$el, "blur", function(event) {
                    if (removeEventListener() && true === number) {
                        callback(event.type, [event]);
                        children();
                    }
                });
                bind("focus", function() {
                    /** @type {boolean} */
                    number = true;
                });
                bind("blur", function() {
                    /** @type {boolean} */
                    number = false;
                });
                children();
                on(self.$el, "cut copy paste beforepaste", function(event) {
                    callback(event.type, [event]);
                });
                bind("destroy", value);
                bind("shared.destroy", init);
            },
            on : bind,
            trigger : callback,
            bindClick : function(node, name, func) {
                validate(node, self._mousedown, name, function(tmp) {
                    var e;
                    var $input;
                    if (!self.edit.isDisabled()) {
                        $input = $((e = tmp).currentTarget);
                        if (self.edit.isDisabled() || self.node.hasClass($input.get(0), "fr-disabled")) {
                            e.preventDefault();
                        } else {
                            if (!("mousedown" === e.type && 1 !== e.which)) {
                                if (!self.helpers.isMobile()) {
                                    e.preventDefault();
                                }
                                if ((self.helpers.isAndroid() || self.helpers.isWindowsPhone()) && 0 === $input.parents(".fr-dropdown-menu").length) {
                                    e.preventDefault();
                                    e.stopPropagation();
                                }
                                $input.addClass("fr-selected");
                                self.events.trigger("commands.mousedown", [$input]);
                            }
                        }
                    }
                }, true);
                validate(node, self._mouseup + " " + self._move, name, function(e) {
                    if (!self.edit.isDisabled()) {
                        (function(event, callback) {
                            var $elem = $(event.currentTarget);
                            if (self.edit.isDisabled() || self.node.hasClass($elem.get(0), "fr-disabled")) {
                                return event.preventDefault();
                            }
                            if (("mouseup" !== event.type || 1 === event.which) && self.node.hasClass($elem.get(0), "fr-selected")) {
                                if ("touchmove" != event.type) {
                                    if (event.stopPropagation(), event.stopImmediatePropagation(), event.preventDefault(), !self.node.hasClass($elem.get(0), "fr-selected")) {
                                        return self.button.getButtons(".fr-selected", true).removeClass("fr-selected");
                                    }
                                    if (self.button.getButtons(".fr-selected", true).removeClass("fr-selected"), $elem.data("dragging") || $elem.attr("disabled")) {
                                        return $elem.removeData("dragging");
                                    }
                                    var ontimeout = $elem.data("timeout");
                                    if (ontimeout) {
                                        clearTimeout(ontimeout);
                                        $elem.removeData("timeout");
                                    }
                                    callback.apply(self, [event]);
                                } else {
                                    if (!$elem.data("timeout")) {
                                        $elem.data("timeout", setTimeout(function() {
                                            $elem.data("dragging", true);
                                        }, 100));
                                    }
                                }
                            }
                        })(e, func);
                    }
                }, true);
                validate(node, "mousedown click mouseup", name, function(event) {
                    if (!self.edit.isDisabled()) {
                        event.stopPropagation();
                    }
                }, true);
                bind("window.mouseup", function() {
                    if (!self.edit.isDisabled()) {
                        node.find(name).removeClass("fr-selected");
                        children();
                    }
                });
            },
            disableBlur : bindEvents,
            enableBlur : children,
            blurActive : removeEventListener,
            focus : render,
            chainTrigger : function(key, event, tempalte) {
                if (!self.edit.isDisabled() || tempalte) {
                    var val;
                    var success;
                    if (0 !== key.indexOf("shared.")) {
                        val = a[key];
                    } else {
                        if (0 < self.shared.count) {
                            return false;
                        }
                        val = self.shared._events[key];
                    }
                    if (val) {
                        /** @type {number} */
                        var i = 0;
                        for (; i < val.length; i++) {
                            if (void 0 !== (success = val[i].apply(self, [event]))) {
                                event = success;
                            }
                        }
                    }
                    return void 0 !== (success = self.$oel.triggerHandler("froalaEditor." + key, $.merge([self], [event]))) && (event = success), event;
                }
            },
            $on : validate,
            $off : function() {
                remove(file);
                /** @type {!Array} */
                file = [];
                if (0 === self.shared.count) {
                    remove(self.shared.$_events);
                    /** @type {!Array} */
                    self.shared.$_events = [];
                }
            }
        };
    };
    /**
     * @param {!Object} that
     * @return {?}
     */
    $.FE.MODULES.node = function(that) {
        /**
         * @param {!Node} element
         * @return {?}
         */
        function getValue(element) {
            return element && "IFRAME" != element.tagName ? Array.prototype.slice.call(element.childNodes || []) : [];
        }
        /**
         * @param {!Node} node
         * @return {?}
         */
        function createNode(node) {
            return !!node && (node.nodeType == Node.ELEMENT_NODE && 0 <= $.FE.BLOCK_TAGS.indexOf(node.tagName.toLowerCase()));
        }
        /**
         * @param {!Object} token
         * @return {?}
         */
        function search(token) {
            var res = {};
            var attributes = token.attributes;
            if (attributes) {
                /** @type {number} */
                var i = 0;
                for (; i < attributes.length; i++) {
                    var attr = attributes[i];
                    res[attr.nodeName] = attr.value;
                }
            }
            return res;
        }
        /**
         * @param {!Object} value
         * @return {?}
         */
        function compare(value) {
            /** @type {string} */
            var errorMsg = "";
            var contents = search(value);
            /** @type {!Array<string>} */
            var handlersIndex = Object.keys(contents).sort();
            /** @type {number} */
            var j = 0;
            for (; j < handlersIndex.length; j++) {
                /** @type {string} */
                var i = handlersIndex[j];
                var item = contents[i];
                if (item.indexOf("'") < 0 && 0 <= item.indexOf('"')) {
                    /** @type {string} */
                    errorMsg = errorMsg + (" " + i + "='" + item + "'");
                } else {
                    if (0 <= item.indexOf('"') && 0 <= item.indexOf("'")) {
                        /** @type {string} */
                        errorMsg = errorMsg + (" " + i + '="' + (item = item.replace(/"/g, "&quot;")) + '"');
                    } else {
                        /** @type {string} */
                        errorMsg = errorMsg + (" " + i + '="' + item + '"');
                    }
                }
            }
            return errorMsg;
        }
        /**
         * @param {?} node
         * @return {?}
         */
        function fire(node) {
            return node === that.el;
        }
        return {
            isBlock : createNode,
            isEmpty : function(node, cb) {
                if (!node) {
                    return true;
                }
                if (node.querySelector("table")) {
                    return false;
                }
                var value = getValue(node);
                if (1 == value.length && createNode(value[0])) {
                    value = getValue(value[0]);
                }
                /** @type {boolean} */
                var r = false;
                /** @type {number} */
                var i = 0;
                for (; i < value.length; i++) {
                    var e = value[i];
                    if (!(cb && that.node.hasClass(e, "fr-marker") || e.nodeType == Node.TEXT_NODE && 0 === e.textContent.length)) {
                        if ("BR" != e.tagName && 0 < (e.textContent || "").replace(/\u200B/gi, "").replace(/\n/g, "").length) {
                            return false;
                        }
                        if (r) {
                            return false;
                        }
                        if ("BR" == e.tagName) {
                            /** @type {boolean} */
                            r = true;
                        }
                    }
                }
                return !(node.querySelectorAll($.FE.VOID_ELEMENTS.join(",")).length - node.querySelectorAll("br").length || node.querySelector(that.opts.htmlAllowedEmptyTags.join(":not(.fr-marker),") + ":not(.fr-marker)") || 1 < node.querySelectorAll($.FE.BLOCK_TAGS.join(",")).length || node.querySelector(that.opts.htmlDoNotWrapTags.join(":not(.fr-marker),") + ":not(.fr-marker)"));
            },
            blockParent : function(e) {
                for (; e && e.parentNode !== that.el && (!e.parentNode || !that.node.hasClass(e.parentNode, "fr-inner"));) {
                    if (createNode(e = e.parentNode)) {
                        return e;
                    }
                }
                return null;
            },
            deepestParent : function(obj, t, xgh2) {
                if (void 0 === t && (t = []), void 0 === xgh2 && (xgh2 = true), t.push(that.el), 0 <= t.indexOf(obj.parentNode) || obj.parentNode && that.node.hasClass(obj.parentNode, "fr-inner") || obj.parentNode && 0 <= $.FE.SIMPLE_ENTER_TAGS.indexOf(obj.parentNode.tagName) && xgh2) {
                    return null;
                }
                for (; t.indexOf(obj.parentNode) < 0 && obj.parentNode && !that.node.hasClass(obj.parentNode, "fr-inner") && ($.FE.SIMPLE_ENTER_TAGS.indexOf(obj.parentNode.tagName) < 0 || !xgh2) && (!createNode(obj) || !createNode(obj.parentNode) || !xgh2);) {
                    obj = obj.parentNode;
                }
                return obj;
            },
            rawAttributes : search,
            attributes : compare,
            clearAttributes : function(element) {
                var params = element.attributes;
                /** @type {number} */
                var locale = params.length - 1;
                for (; 0 <= locale; locale--) {
                    var o = params[locale];
                    element.removeAttribute(o.nodeName);
                }
            },
            openTagString : function(x) {
                return "<" + x.tagName.toLowerCase() + compare(x) + ">";
            },
            closeTagString : function(element) {
                return "</" + element.tagName.toLowerCase() + ">";
            },
            isFirstSibling : function next(el, selector) {
                if (void 0 === selector) {
                    /** @type {boolean} */
                    selector = true;
                }
                var node = el.previousSibling;
                for (; node && selector && that.node.hasClass(node, "fr-marker");) {
                    node = node.previousSibling;
                }
                return !node || node.nodeType == Node.TEXT_NODE && "" === node.textContent && next(node);
            },
            isLastSibling : function insert(element, other) {
                if (void 0 === other) {
                    /** @type {boolean} */
                    other = true;
                }
                var node = element.nextSibling;
                for (; node && other && that.node.hasClass(node, "fr-marker");) {
                    node = node.nextSibling;
                }
                return !node || node.nodeType == Node.TEXT_NODE && "" === node.textContent && insert(node);
            },
            isList : function(obj) {
                return !!obj && 0 <= ["UL", "OL"].indexOf(obj.tagName);
            },
            isLink : function(child) {
                return !!child && child.nodeType == Node.ELEMENT_NODE && "a" == child.tagName.toLowerCase();
            },
            isElement : fire,
            contents : getValue,
            isVoid : function(node) {
                return node && node.nodeType == Node.ELEMENT_NODE && 0 <= $.FE.VOID_ELEMENTS.indexOf((node.tagName || "").toLowerCase());
            },
            hasFocus : function(target) {
                return target === that.doc.activeElement && (!that.doc.hasFocus || that.doc.hasFocus()) && !!(fire(target) || target.type || target.href || ~target.tabIndex);
            },
            isEditable : function(element) {
                return (!element.getAttribute || "false" != element.getAttribute("contenteditable")) && ["STYLE", "SCRIPT"].indexOf(element.tagName) < 0;
            },
            isDeletable : function(parent) {
                return parent && parent.nodeType == Node.ELEMENT_NODE && parent.getAttribute("class") && 0 <= (parent.getAttribute("class") || "").indexOf("fr-deletable");
            },
            hasClass : function(el, cls) {
                return el instanceof $ && (el = el.get(0)), el && el.classList && el.classList.contains(cls);
            },
            filter : function(name) {
                return that.browser.msie ? name : {
                    acceptNode : name
                };
            }
        };
    };
    /** @type {string} */
    $.FE.INVISIBLE_SPACE = "&#8203;";
    /** @type {string} */
    $.FE.START_MARKER = '<span class="fr-marker" data-id="0" data-type="true" style="display: none; line-height: 0;">' + $.FE.INVISIBLE_SPACE + "</span>";
    /** @type {string} */
    $.FE.END_MARKER = '<span class="fr-marker" data-id="0" data-type="false" style="display: none; line-height: 0;">' + $.FE.INVISIBLE_SPACE + "</span>";
    /** @type {string} */
    $.FE.MARKERS = $.FE.START_MARKER + $.FE.END_MARKER;
    /**
     * @param {!Object} editor
     * @return {?}
     */
    $.FE.MODULES.markers = function(editor) {
        /**
         * @return {?}
         */
        function init() {
            if (!editor.$wp) {
                return null;
            }
            try {
                var rng = editor.selection.ranges(0);
                var container = rng.commonAncestorContainer;
                if (container != editor.el && 0 === editor.$el.find(container).length) {
                    return null;
                }
                var range = rng.cloneRange();
                var stored_selection = rng.cloneRange();
                range.collapse(true);
                var table = $('<span class="fr-marker" style="display: none; line-height: 0;">' + $.FE.INVISIBLE_SPACE + "</span>", editor.doc)[0];
                if (range.insertNode(table), table = editor.$el.find("span.fr-marker").get(0)) {
                    var sibling = table.nextSibling;
                    for (; sibling && sibling.nodeType === Node.TEXT_NODE && 0 === sibling.textContent.length;) {
                        $(sibling).remove();
                        sibling = editor.$el.find("span.fr-marker").get(0).nextSibling;
                    }
                    return editor.selection.clear(), editor.selection.get().addRange(stored_selection), table;
                }
                return null;
            } catch (a) {
            }
        }
        /**
         * @return {undefined}
         */
        function remove() {
            editor.$el.find(".fr-marker").remove();
        }
        return {
            place : function(obj, name, position) {
                var item;
                var nodes;
                var node;
                try {
                    var insertionPoint = obj.cloneRange();
                    if (insertionPoint.collapse(name), insertionPoint.insertNode($('<span class="fr-marker" data-id="' + position + '" data-type="' + name + '" style="display: ' + (editor.browser.safari ? "none" : "inline-block") + '; line-height: 0;">' + $.FE.INVISIBLE_SPACE + "</span>", editor.doc)[0]), true === name) {
                        node = (item = editor.$el.find('span.fr-marker[data-type="true"][data-id="' + position + '"]').get(0)).nextSibling;
                        for (; node && node.nodeType === Node.TEXT_NODE && 0 === node.textContent.length;) {
                            $(node).remove();
                            node = item.nextSibling;
                        }
                    }
                    if (true === name && !obj.collapsed) {
                        for (; !editor.node.isElement(item.parentNode) && !node;) {
                            $(item.parentNode).after(item);
                            node = item.nextSibling;
                        }
                        if (node && node.nodeType === Node.ELEMENT_NODE && editor.node.isBlock(node) && "HR" !== node.tagName) {
                            /** @type {!Array} */
                            nodes = [node];
                            for (; node = nodes[0], (nodes = editor.node.contents(node))[0] && editor.node.isBlock(nodes[0]);) {
                            }
                            $(node).prepend($(item));
                        }
                    }
                    if (false === name && !obj.collapsed) {
                        if ((node = (item = editor.$el.find('span.fr-marker[data-type="false"][data-id="' + position + '"]').get(0)).previousSibling) && node.nodeType === Node.ELEMENT_NODE && editor.node.isBlock(node) && "HR" !== node.tagName) {
                            /** @type {!Array} */
                            nodes = [node];
                            for (; node = nodes[nodes.length - 1], (nodes = editor.node.contents(node))[nodes.length - 1] && editor.node.isBlock(nodes[nodes.length - 1]);) {
                            }
                            $(node).append($(item));
                        }
                        if (item.parentNode && 0 <= ["TD", "TH"].indexOf(item.parentNode.tagName) && item.parentNode.previousSibling && !item.previousSibling) {
                            $(item.parentNode.previousSibling).append(item);
                        }
                    }
                    var boxChild = editor.$el.find('span.fr-marker[data-type="' + name + '"][data-id="' + position + '"]').get(0);
                    return boxChild && (boxChild.style.display = "none"), boxChild;
                } catch (l) {
                    return null;
                }
            },
            insert : init,
            split : function() {
                if (!editor.selection.isCollapsed()) {
                    editor.selection.remove();
                }
                var e = editor.$el.find(".fr-marker").get(0);
                if (null == e && (e = init()), null == e) {
                    return null;
                }
                var node = editor.node.deepestParent(e);
                if (node || (node = editor.node.blockParent(e)) && "LI" != node.tagName && (node = null), node) {
                    if (editor.node.isBlock(node) && editor.node.isEmpty(node)) {
                        if ("LI" != node.tagName || node.parentNode.firstElementChild != node || editor.node.isEmpty(node.parentNode)) {
                            $(node).replaceWith('<span class="fr-marker"></span>');
                        } else {
                            $(node).append('<span class="fr-marker"></span>');
                        }
                    } else {
                        if (editor.cursor.isAtStart(e, node)) {
                            $(node).before('<span class="fr-marker"></span>');
                            $(e).remove();
                        } else {
                            if (editor.cursor.isAtEnd(e, node)) {
                                $(node).after('<span class="fr-marker"></span>');
                                $(e).remove();
                            } else {
                                var n = e;
                                /** @type {string} */
                                var t = "";
                                /** @type {string} */
                                var a = "";
                                for (; n = n.parentNode, t = t + editor.node.closeTagString(n), a = editor.node.openTagString(n) + a, n != node;) {
                                }
                                $(e).replaceWith('<span id="fr-break"></span>');
                                var state = editor.node.openTagString(node) + $(node).html() + editor.node.closeTagString(node);
                                state = state.replace(/<span id="fr-break"><\/span>/g, t + '<span class="fr-marker"></span>' + a);
                                $(node).replaceWith(state);
                            }
                        }
                    }
                }
                return editor.$el.find(".fr-marker").get(0);
            },
            insertAtPoint : function(event) {
                var range;
                var x = event.clientX;
                var y = event.clientY;
                remove();
                /** @type {null} */
                var r = null;
                if ("undefined" != typeof editor.doc.caretPositionFromPoint ? (range = editor.doc.caretPositionFromPoint(x, y), (r = editor.doc.createRange()).setStart(range.offsetNode, range.offset), r.setEnd(range.offsetNode, range.offset)) : "undefined" != typeof editor.doc.caretRangeFromPoint && (range = editor.doc.caretRangeFromPoint(x, y), (r = editor.doc.createRange()).setStart(range.startContainer, range.startOffset), r.setEnd(range.startContainer, range.startOffset)), null !== r && "undefined" !=
                    typeof editor.win.getSelection) {
                    var sel = editor.win.getSelection();
                    sel.removeAllRanges();
                    sel.addRange(r);
                } else {
                    if ("undefined" != typeof editor.doc.body.createTextRange) {
                        try {
                            (r = editor.doc.body.createTextRange()).moveToPoint(x, y);
                            var rng = r.duplicate();
                            rng.moveToPoint(x, y);
                            r.setEndPoint("EndToEnd", rng);
                            r.select();
                        } catch (s) {
                            return false;
                        }
                    }
                }
                init();
            },
            remove : remove
        };
    };
    /**
     * @param {!Object} editor
     * @return {?}
     */
    $.FE.MODULES.selection = function(editor) {
        /**
         * @return {?}
         */
        function replace() {
            /** @type {string} */
            var cellText = "";
            return editor.win.getSelection ? cellText = editor.win.getSelection() : editor.doc.getSelection ? cellText = editor.doc.getSelection() : editor.doc.selection && (cellText = editor.doc.selection.createRange().text), cellText.toString();
        }
        /**
         * @return {?}
         */
        function getSelection() {
            return editor.win.getSelection ? editor.win.getSelection() : editor.doc.getSelection ? editor.doc.getSelection() : editor.doc.selection.createRange();
        }
        /**
         * @param {number} string
         * @return {?}
         */
        function $(string) {
            var selection = getSelection();
            /** @type {!Array} */
            var result = [];
            if (selection && selection.getRangeAt && selection.rangeCount) {
                /** @type {!Array} */
                result = [];
                /** @type {number} */
                var i = 0;
                for (; i < selection.rangeCount; i++) {
                    result.push(selection.getRangeAt(i));
                }
            } else {
                /** @type {!Array} */
                result = editor.doc.createRange ? [editor.doc.createRange()] : [];
            }
            return void 0 !== string ? result[string] : result;
        }
        /**
         * @return {undefined}
         */
        function clearSelection() {
            var sel = getSelection();
            try {
                if (sel.removeAllRanges) {
                    sel.removeAllRanges();
                } else {
                    if (sel.empty) {
                        sel.empty();
                    } else {
                        if (sel.clear) {
                            sel.clear();
                        }
                    }
                }
            } catch (t) {
            }
        }
        /**
         * @param {?} p
         * @param {?} offset
         * @return {?}
         */
        function check(p, offset) {
            var container = p;
            return container.nodeType == Node.ELEMENT_NODE && 0 < container.childNodes.length && container.childNodes[offset] && (container = container.childNodes[offset]), container.nodeType == Node.TEXT_NODE && (container = container.parentNode), container;
        }
        /**
         * @return {undefined}
         */
        function render() {
            if (editor.$wp) {
                editor.markers.remove();
                var range;
                var i;
                var all = $();
                /** @type {!Array} */
                var ranges = [];
                /** @type {number} */
                i = 0;
                for (; i < all.length; i++) {
                    if (all[i].startContainer !== editor.doc || editor.browser.msie) {
                        var full_list = (range = all[i]).collapsed;
                        var last = editor.markers.place(range, true, i);
                        var end = editor.markers.place(range, false, i);
                        if (!(void 0 !== last && last || !full_list)) {
                            $(".fr-marker").remove();
                            editor.selection.setAtEnd(editor.el);
                        }
                        editor.el.normalize();
                        if (editor.browser.safari && !full_list) {
                            (range = editor.doc.createRange()).setStartAfter(last);
                            range.setEndBefore(end);
                            ranges.push(range);
                        }
                    }
                }
                if (editor.browser.safari && ranges.length) {
                    editor.selection.clear();
                    /** @type {number} */
                    i = 0;
                    for (; i < ranges.length; i++) {
                        editor.selection.get().addRange(ranges[i]);
                    }
                }
            }
        }
        /**
         * @return {?}
         */
        function init() {
            var i;
            var targets = editor.el.querySelectorAll('.fr-marker[data-type="true"]');
            if (!editor.$wp) {
                return editor.markers.remove(), false;
            }
            if (0 === targets.length) {
                return false;
            }
            if (editor.browser.msie || editor.browser.edge) {
                /** @type {number} */
                i = 0;
                for (; i < targets.length; i++) {
                    /** @type {string} */
                    targets[i].style.display = "inline-block";
                }
            }
            if (!(editor.core.hasFocus() || editor.browser.msie || editor.browser.webkit)) {
                editor.$el.focus();
            }
            clearSelection();
            var sel = getSelection();
            /** @type {number} */
            i = 0;
            for (; i < targets.length; i++) {
                var salesTeam = $(targets[i]).data("id");
                var target = targets[i];
                var range = editor.doc.createRange();
                var element = editor.$el.find('.fr-marker[data-type="false"][data-id="' + salesTeam + '"]');
                if (editor.browser.msie || editor.browser.edge) {
                    element.css("display", "inline-block");
                }
                /** @type {null} */
                var value = null;
                if (0 < element.length) {
                    element = element[0];
                    try {
                        var prev;
                        /** @type {boolean} */
                        var d = false;
                        var node = target.nextSibling;
                        for (; node && node.nodeType == Node.TEXT_NODE && 0 === node.textContent.length;) {
                            node = (prev = node).nextSibling;
                            $(prev).remove();
                        }
                        var host;
                        var transform;
                        var next = element.nextSibling;
                        for (; next && next.nodeType == Node.TEXT_NODE && 0 === next.textContent.length;) {
                            next = (prev = next).nextSibling;
                            $(prev).remove();
                        }
                        if (target.nextSibling == element || element.nextSibling == target) {
                            var elem = target.nextSibling == element ? target : element;
                            var node = elem == target ? element : target;
                            var parent = elem.previousSibling;
                            for (; parent && parent.nodeType == Node.TEXT_NODE && 0 === parent.length;) {
                                parent = (prev = parent).previousSibling;
                                $(prev).remove();
                            }
                            if (parent && parent.nodeType == Node.TEXT_NODE) {
                                for (; parent && parent.previousSibling && parent.previousSibling.nodeType == Node.TEXT_NODE;) {
                                    parent.previousSibling.textContent = parent.previousSibling.textContent + parent.textContent;
                                    parent = parent.previousSibling;
                                    $(parent.nextSibling).remove();
                                }
                            }
                            var child = node.nextSibling;
                            for (; child && child.nodeType == Node.TEXT_NODE && 0 === child.length;) {
                                child = (prev = child).nextSibling;
                                $(prev).remove();
                            }
                            if (child && child.nodeType == Node.TEXT_NODE) {
                                for (; child && child.nextSibling && child.nextSibling.nodeType == Node.TEXT_NODE;) {
                                    child.nextSibling.textContent = child.textContent + child.nextSibling.textContent;
                                    child = child.nextSibling;
                                    $(child.previousSibling).remove();
                                }
                            }
                            if (parent && (editor.node.isVoid(parent) || editor.node.isBlock(parent)) && (parent = null), child && (editor.node.isVoid(child) || editor.node.isBlock(child)) && (child = null), parent && child && parent.nodeType == Node.TEXT_NODE && child.nodeType == Node.TEXT_NODE) {
                                $(target).remove();
                                $(element).remove();
                                var count = parent.textContent.length;
                                parent.textContent = parent.textContent + child.textContent;
                                $(child).remove();
                                if (!editor.opts.htmlUntouched) {
                                    editor.spaces.normalize(parent);
                                }
                                range.setStart(parent, count);
                                range.setEnd(parent, count);
                                /** @type {boolean} */
                                d = true;
                            } else {
                                if (!parent && child && child.nodeType == Node.TEXT_NODE) {
                                    $(target).remove();
                                    $(element).remove();
                                    if (!editor.opts.htmlUntouched) {
                                        editor.spaces.normalize(child);
                                    }
                                    value = $(editor.doc.createTextNode("\u200b"));
                                    $(child).before(value);
                                    range.setStart(child, 0);
                                    range.setEnd(child, 0);
                                    /** @type {boolean} */
                                    d = true;
                                } else {
                                    if (!child && parent && parent.nodeType == Node.TEXT_NODE) {
                                        $(target).remove();
                                        $(element).remove();
                                        if (!editor.opts.htmlUntouched) {
                                            editor.spaces.normalize(parent);
                                        }
                                        value = $(editor.doc.createTextNode("\u200b"));
                                        $(parent).after(value);
                                        range.setStart(parent, parent.textContent.length);
                                        range.setEnd(parent, parent.textContent.length);
                                        /** @type {boolean} */
                                        d = true;
                                    }
                                }
                            }
                        }
                        if (!d) {
                            if ((editor.browser.chrome || editor.browser.edge) && target.nextSibling == element) {
                                host = update(element, range, true) || range.setStartAfter(element);
                                transform = update(target, range, false) || range.setEndBefore(target);
                            } else {
                                if (target.previousSibling == element) {
                                    element = (target = element).nextSibling;
                                }
                                if (!(element.nextSibling && "BR" === element.nextSibling.tagName || !element.nextSibling && editor.node.isBlock(target.previousSibling) || target.previousSibling && "BR" == target.previousSibling.tagName)) {
                                    /** @type {string} */
                                    target.style.display = "inline";
                                    /** @type {string} */
                                    element.style.display = "inline";
                                    value = $(editor.doc.createTextNode("\u200b"));
                                }
                                host = update(target, range, true) || $(target).before(value) && range.setStartBefore(target);
                                transform = update(element, range, false) || $(element).after(value) && range.setEndAfter(element);
                            }
                            if ("function" == typeof host) {
                                host();
                            }
                            if ("function" == typeof transform) {
                                transform();
                            }
                        }
                    } catch (b) {
                    }
                }
                if (value) {
                    value.remove();
                }
                try {
                    sel.addRange(range);
                } catch (b) {
                }
            }
            editor.markers.remove();
        }
        /**
         * @param {!Node} item
         * @param {!Range} range
         * @param {boolean} n
         * @return {?}
         */
        function update(item, range, n) {
            var count;
            var prev = item.previousSibling;
            var next = item.nextSibling;
            return prev && next && prev.nodeType == Node.TEXT_NODE && next.nodeType == Node.TEXT_NODE ? (count = prev.textContent.length, n ? (next.textContent = prev.textContent + next.textContent, $(prev).remove(), $(item).remove(), editor.opts.htmlUntouched || editor.spaces.normalize(next), function() {
                range.setStart(next, count);
            }) : (prev.textContent = prev.textContent + next.textContent, $(next).remove(), $(item).remove(), editor.opts.htmlUntouched || editor.spaces.normalize(prev), function() {
                range.setEnd(prev, count);
            })) : prev && !next && prev.nodeType == Node.TEXT_NODE ? (count = prev.textContent.length, n ? (editor.opts.htmlUntouched || editor.spaces.normalize(prev), function() {
                range.setStart(prev, count);
            }) : (editor.opts.htmlUntouched || editor.spaces.normalize(prev), function() {
                range.setEnd(prev, count);
            })) : !(!next || prev || next.nodeType != Node.TEXT_NODE) && (n ? (editor.opts.htmlUntouched || editor.spaces.normalize(next), function() {
                range.setStart(next, 0);
            }) : (editor.opts.htmlUntouched || editor.spaces.normalize(next), function() {
                range.setEnd(next, 0);
            }));
        }
        /**
         * @return {?}
         */
        function getParent() {
            var sList = $();
            /** @type {number} */
            var i = 0;
            for (; i < sList.length; i++) {
                if (!sList[i].collapsed) {
                    return false;
                }
            }
            return true;
        }
        /**
         * @param {?} el
         * @return {?}
         */
        function cursorPos(el) {
            var range;
            var r;
            /** @type {boolean} */
            var atStart = false;
            /** @type {boolean} */
            var atEnd = false;
            if (editor.win.getSelection) {
                var sel = editor.win.getSelection();
                if (sel.rangeCount) {
                    (r = (range = sel.getRangeAt(0)).cloneRange()).selectNodeContents(el);
                    r.setEnd(range.startContainer, range.startOffset);
                    /** @type {boolean} */
                    atStart = "" === r.toString();
                    r.selectNodeContents(el);
                    r.setStart(range.endContainer, range.endOffset);
                    /** @type {boolean} */
                    atEnd = "" === r.toString();
                }
            } else {
                if (editor.doc.selection && "Control" != editor.doc.selection.type) {
                    (r = (range = editor.doc.selection.createRange()).duplicate()).moveToElementText(el);
                    r.setEndPoint("EndToStart", range);
                    /** @type {boolean} */
                    atStart = "" === r.text;
                    r.moveToElementText(el);
                    r.setEndPoint("StartToEnd", range);
                    /** @type {boolean} */
                    atEnd = "" === r.text;
                }
            }
            return {
                atStart : atStart,
                atEnd : atEnd
            };
        }
        /**
         * @param {!Node} node
         * @param {number} deep
         * @return {undefined}
         */
        function getText(node, deep) {
            if (void 0 === deep) {
                /** @type {boolean} */
                deep = true;
            }
            var asciiBuffer = $(node).html();
            if (asciiBuffer && asciiBuffer.replace(/\u200b/g, "").length != asciiBuffer.length) {
                $(node).html(asciiBuffer.replace(/\u200b/g, ""));
            }
            var children = editor.node.contents(node);
            /** @type {number} */
            var i = 0;
            for (; i < children.length; i++) {
                if (children[i].nodeType != Node.ELEMENT_NODE) {
                    $(children[i]).remove();
                } else {
                    getText(children[i], 0 === i);
                    if (0 === i) {
                        /** @type {boolean} */
                        deep = false;
                    }
                }
            }
            if (node.nodeType == Node.TEXT_NODE) {
                $(node).replaceWith('<span data-first="true" data-text="true"></span>');
            } else {
                if (deep) {
                    $(node).attr("data-first", true);
                }
            }
        }
        /**
         * @return {?}
         */
        function cb() {
            return 0 === $(this).find("fr-inner").length;
        }
        /**
         * @return {?}
         */
        function getNode() {
            try {
                if (!editor.$wp) {
                    return false;
                }
                var parent = $(0).commonAncestorContainer;
                for (; parent && !editor.node.isElement(parent);) {
                    parent = parent.parentNode;
                }
                return !!editor.node.isElement(parent);
            } catch (t) {
                return false;
            }
        }
        /**
         * @param {!Node} e
         * @param {!Node} p_obj
         * @return {?}
         */
        function process(e, p_obj) {
            if (!e || 0 < e.getElementsByClassName("fr-marker").length) {
                return false;
            }
            var element = e.firstChild;
            for (; element && (editor.node.isBlock(element) || p_obj && !editor.node.isVoid(element) && element.nodeType == Node.ELEMENT_NODE);) {
                element = (e = element).firstChild;
            }
            e.innerHTML = $.FE.MARKERS + e.innerHTML;
        }
        /**
         * @param {!Element} node
         * @param {string} enabled
         * @return {?}
         */
        function wrap(node, enabled) {
            if (!node || 0 < node.getElementsByClassName("fr-marker").length) {
                return false;
            }
            var element = node.lastChild;
            for (; element && (editor.node.isBlock(element) || enabled && !editor.node.isVoid(element) && element.nodeType == Node.ELEMENT_NODE);) {
                element = (node = element).lastChild;
            }
            var button = editor.doc.createElement("SPAN");
            button.setAttribute("id", "fr-sel-markers");
            button.innerHTML = $.FE.MARKERS;
            node.appendChild(button);
            var elm = node.querySelector("#fr-sel-markers");
            elm.outerHTML = elm.innerHTML;
        }
        return {
            text : replace,
            get : getSelection,
            ranges : $,
            clear : clearSelection,
            element : function() {
                var sel = getSelection();
                try {
                    if (sel.rangeCount) {
                        var elem;
                        var range = $(0);
                        var node = range.startContainer;
                        if (node.nodeType == Node.TEXT_NODE && range.startOffset == (node.textContent || "").length && node.nextSibling && (node = node.nextSibling), node.nodeType == Node.ELEMENT_NODE) {
                            /** @type {boolean} */
                            var $el = false;
                            if (0 < node.childNodes.length && node.childNodes[range.startOffset]) {
                                elem = node.childNodes[range.startOffset];
                                for (; elem && elem.nodeType == Node.TEXT_NODE && 0 === elem.textContent.length;) {
                                    elem = elem.nextSibling;
                                }
                                if (elem && elem.textContent.replace(/\u200B/g, "") === replace().replace(/\u200B/g, "") && (node = elem, $el = true), !$el && 1 < node.childNodes.length && 0 < range.startOffset && node.childNodes[range.startOffset - 1]) {
                                    elem = node.childNodes[range.startOffset - 1];
                                    for (; elem && elem.nodeType == Node.TEXT_NODE && 0 === elem.textContent.length;) {
                                        elem = elem.nextSibling;
                                    }
                                    if (elem && elem.textContent.replace(/\u200B/g, "") === replace().replace(/\u200B/g, "")) {
                                        node = elem;
                                        /** @type {boolean} */
                                        $el = true;
                                    }
                                }
                            } else {
                                if (!range.collapsed && node.nextSibling && node.nextSibling.nodeType == Node.ELEMENT_NODE && (elem = node.nextSibling) && elem.textContent.replace(/\u200B/g, "") === replace().replace(/\u200B/g, "")) {
                                    node = elem;
                                    /** @type {boolean} */
                                    $el = true;
                                }
                            }
                            if (!$el && 0 < node.childNodes.length && $(node.childNodes[0]).text().replace(/\u200B/g, "") === replace().replace(/\u200B/g, "") && ["BR", "IMG", "HR"].indexOf(node.childNodes[0].tagName) < 0) {
                                node = node.childNodes[0];
                            }
                        }
                        for (; node.nodeType != Node.ELEMENT_NODE && node.parentNode;) {
                            node = node.parentNode;
                        }
                        var target = node;
                        for (; target && "HTML" != target.tagName;) {
                            if (target == editor.el) {
                                return node;
                            }
                            target = $(target).parent()[0];
                        }
                    }
                } catch (a) {
                }
                return editor.el;
            },
            endElement : function() {
                var sel = getSelection();
                try {
                    if (sel.rangeCount) {
                        var node;
                        var range = $(0);
                        var element = range.endContainer;
                        if (element.nodeType == Node.ELEMENT_NODE) {
                            /** @type {boolean} */
                            var o = false;
                            if (0 < element.childNodes.length && element.childNodes[range.endOffset] && $(element.childNodes[range.endOffset]).text() === replace()) {
                                element = element.childNodes[range.endOffset];
                                /** @type {boolean} */
                                o = true;
                            } else {
                                if (!range.collapsed && element.previousSibling && element.previousSibling.nodeType == Node.ELEMENT_NODE) {
                                    if ((node = element.previousSibling) && node.textContent.replace(/\u200B/g, "") === replace().replace(/\u200B/g, "")) {
                                        element = node;
                                        /** @type {boolean} */
                                        o = true;
                                    }
                                } else {
                                    if (!range.collapsed && 0 < element.childNodes.length && element.childNodes[range.endOffset] && (node = element.childNodes[range.endOffset].previousSibling).nodeType == Node.ELEMENT_NODE && node && node.textContent.replace(/\u200B/g, "") === replace().replace(/\u200B/g, "")) {
                                        element = node;
                                        /** @type {boolean} */
                                        o = true;
                                    }
                                }
                            }
                            if (!o && 0 < element.childNodes.length && $(element.childNodes[element.childNodes.length - 1]).text() === replace() && ["BR", "IMG", "HR"].indexOf(element.childNodes[element.childNodes.length - 1].tagName) < 0) {
                                element = element.childNodes[element.childNodes.length - 1];
                            }
                        }
                        if (element.nodeType == Node.TEXT_NODE && 0 === range.endOffset && element.previousSibling && element.previousSibling.nodeType == Node.ELEMENT_NODE) {
                            element = element.previousSibling;
                        }
                        for (; element.nodeType != Node.ELEMENT_NODE && element.parentNode;) {
                            element = element.parentNode;
                        }
                        var target = element;
                        for (; target && "HTML" != target.tagName;) {
                            if (target == editor.el) {
                                return element;
                            }
                            target = $(target).parent()[0];
                        }
                    }
                } catch (a) {
                }
                return editor.el;
            },
            save : render,
            restore : init,
            isCollapsed : getParent,
            isFull : function() {
                if (getParent()) {
                    return false;
                }
                editor.selection.save();
                var i;
                var divs = editor.el.querySelectorAll("td, th, img, br");
                /** @type {number} */
                i = 0;
                for (; i < divs.length; i++) {
                    if (divs[i].nextSibling) {
                        /** @type {string} */
                        divs[i].innerHTML = '<span class="fr-mk">' + $.FE.INVISIBLE_SPACE + "</span>" + divs[i].innerHTML;
                    }
                }
                /** @type {boolean} */
                var n = false;
                var self = cursorPos(editor.el);
                if (self.atStart && self.atEnd) {
                    /** @type {boolean} */
                    n = true;
                }
                divs = editor.el.querySelectorAll(".fr-mk");
                /** @type {number} */
                i = 0;
                for (; i < divs.length; i++) {
                    divs[i].parentNode.removeChild(divs[i]);
                }
                return editor.selection.restore(), n;
            },
            inEditor : getNode,
            remove : function() {
                if (getParent()) {
                    return true;
                }
                var i;
                render();
                /**
                 * @param {!Node} el
                 * @return {?}
                 */
                var process = function(el) {
                    var node = el.previousSibling;
                    for (; node && node.nodeType == Node.TEXT_NODE && 0 === node.textContent.length;) {
                        var ct = node;
                        node = node.previousSibling;
                        $(ct).remove();
                    }
                    return node;
                };
                /**
                 * @param {!Node} element
                 * @return {?}
                 */
                var success = function(element) {
                    var child = element.nextSibling;
                    for (; child && child.nodeType == Node.TEXT_NODE && 0 === child.textContent.length;) {
                        var pre = child;
                        child = child.nextSibling;
                        $(pre).remove();
                    }
                    return child;
                };
                var siblings = editor.$el.find('.fr-marker[data-type="true"]');
                /** @type {number} */
                i = 0;
                for (; i < siblings.length; i++) {
                    var child = siblings[i];
                    for (; !(process(child) || editor.node.isBlock(child.parentNode) || editor.$el.is(child.parentNode) || editor.node.hasClass(child.parentNode, "fr-inner"));) {
                        $(child.parentNode).before(child);
                    }
                }
                var filtersChildren = editor.$el.find('.fr-marker[data-type="false"]');
                /** @type {number} */
                i = 0;
                for (; i < filtersChildren.length; i++) {
                    var element = filtersChildren[i];
                    for (; !(success(element) || editor.node.isBlock(element.parentNode) || editor.$el.is(element.parentNode) || editor.node.hasClass(element.parentNode, "fr-inner"));) {
                        $(element.parentNode).after(element);
                    }
                    if (element.parentNode && editor.node.isBlock(element.parentNode) && editor.node.isEmpty(element.parentNode) && !editor.$el.is(element.parentNode) && !editor.node.hasClass(element.parentNode, "fr-inner") && editor.opts.keepFormatOnDelete) {
                        $(element.parentNode).after(element);
                    }
                }
                if (function() {
                        var bcofl_checkbox = editor.$el.find(".fr-marker");
                        /** @type {number} */
                        var i = 0;
                        for (; i < bcofl_checkbox.length; i++) {
                            if ($(bcofl_checkbox[i]).parentsUntil('.fr-element, [contenteditable="true"]', '[contenteditable="false"]').length) {
                                return false;
                            }
                        }
                        return true;
                    }()) {
                    !function process(q, data) {
                        var classes = editor.node.contents(q.get(0));
                        if (0 <= ["TD", "TH"].indexOf(q.get(0).tagName) && 1 == q.find(".fr-marker").length && editor.node.hasClass(classes[0], "fr-marker")) {
                            q.attr("data-del-cell", true);
                        }
                        /** @type {number} */
                        var i = 0;
                        for (; i < classes.length; i++) {
                            var element = classes[i];
                            if (editor.node.hasClass(element, "fr-marker")) {
                                /** @type {number} */
                                data = (data + 1) % 2;
                            } else {
                                if (data) {
                                    if (0 < $(element).find(".fr-marker").length) {
                                        data = process($(element), data);
                                    } else {
                                        if (["TD", "TH"].indexOf(element.tagName) < 0 && !editor.node.hasClass(element, "fr-inner")) {
                                            if (!editor.opts.keepFormatOnDelete || 0 < editor.$el.find("[data-first]").length || editor.node.isVoid(element)) {
                                                $(element).remove();
                                            } else {
                                                getText(element);
                                            }
                                        } else {
                                            if (editor.node.hasClass(element, "fr-inner")) {
                                                if (0 === $(element).find(".fr-inner").length) {
                                                    $(element).html("<br>");
                                                } else {
                                                    $(element).find(".fr-inner").filter(cb).html("<br>");
                                                }
                                            } else {
                                                $(element).empty();
                                                $(element).attr("data-del-cell", true);
                                            }
                                        }
                                    }
                                } else {
                                    if (0 < $(element).find(".fr-marker").length) {
                                        data = process($(element), data);
                                    }
                                }
                            }
                        }
                        return data;
                    }(editor.$el, 0);
                    var label = editor.$el.find('[data-first="true"]');
                    if (label.length) {
                        editor.$el.find(".fr-marker").remove();
                        label.append($.FE.INVISIBLE_SPACE + $.FE.MARKERS).removeAttr("data-first");
                        if (label.attr("data-text")) {
                            label.replaceWith(label.html());
                        }
                    } else {
                        editor.$el.find("table").filter(function() {
                            return 0 < $(this).find("[data-del-cell]").length && $(this).find("[data-del-cell]").length == $(this).find("td, th").length;
                        }).remove();
                        editor.$el.find("[data-del-cell]").removeAttr("data-del-cell");
                        siblings = editor.$el.find('.fr-marker[data-type="true"]');
                        /** @type {number} */
                        i = 0;
                        for (; i < siblings.length; i++) {
                            var node = siblings[i];
                            var a = node.nextSibling;
                            var t = editor.$el.find('.fr-marker[data-type="false"][data-id="' + $(node).data("id") + '"]').get(0);
                            if (t) {
                                if (node && (!a || a != t)) {
                                    var target = editor.node.blockParent(node);
                                    var element = editor.node.blockParent(t);
                                    /** @type {boolean} */
                                    var tagName = false;
                                    /** @type {boolean} */
                                    var elementMetaId = false;
                                    if (target && 0 <= ["UL", "OL"].indexOf(target.tagName) && (tagName = !(target = null)), element && 0 <= ["UL", "OL"].indexOf(element.tagName) && (elementMetaId = !(element = null)), $(node).after(t), target != element) {
                                        if (null != target || tagName) {
                                            if (null != element || elementMetaId || 0 !== $(target).parentsUntil(editor.$el, "table").length) {
                                                if (target && element && 0 === $(target).parentsUntil(editor.$el, "table").length && 0 === $(element).parentsUntil(editor.$el, "table").length && 0 === $(target).find(element).length && 0 === $(element).find(target).length) {
                                                    $(target).append($(element).html());
                                                    $(element).remove();
                                                }
                                            } else {
                                                a = target;
                                                for (; !a.nextSibling && a.parentNode != editor.el;) {
                                                    a = a.parentNode;
                                                }
                                                a = a.nextSibling;
                                                for (; a && "BR" != a.tagName;) {
                                                    var nextA = a.nextSibling;
                                                    $(target).append(a);
                                                    a = nextA;
                                                }
                                                if (a && "BR" == a.tagName) {
                                                    $(a).remove();
                                                }
                                            }
                                        } else {
                                            var rel = editor.node.deepestParent(node);
                                            if (rel) {
                                                $(rel).after($(element).html());
                                                $(element).remove();
                                            } else {
                                                if (0 === $(element).parentsUntil(editor.$el, "table").length) {
                                                    $(node).next().after($(element).html());
                                                    $(element).remove();
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                t = $(node).clone().attr("data-type", false);
                                $(node).after(t);
                            }
                        }
                    }
                }
                if (!editor.opts.keepFormatOnDelete) {
                    editor.html.fillEmptyBlocks();
                }
                editor.html.cleanEmptyTags(true);
                if (!editor.opts.htmlUntouched) {
                    editor.clean.lists();
                    editor.spaces.normalize();
                }
                var row = editor.$el.find(".fr-marker:last").get(0);
                var startNode = editor.$el.find(".fr-marker:first").get(0);
                if (void 0 !== row && void 0 !== startNode && !row.nextSibling && startNode.previousSibling && "BR" == startNode.previousSibling.tagName && editor.node.isElement(row.parentNode) && editor.node.isElement(startNode.parentNode)) {
                    editor.$el.append("<br>");
                }
                init();
            },
            blocks : function() {
                var i;
                /** @type {!Array} */
                var t = [];
                var sel = getSelection();
                if (getNode() && sel.rangeCount) {
                    var operators = $();
                    /** @type {number} */
                    i = 0;
                    for (; i < operators.length; i++) {
                        var el;
                        var options = operators[i];
                        var parent = check(options.startContainer, options.startOffset);
                        var target = check(options.endContainer, options.endOffset);
                        if ((editor.node.isBlock(parent) || editor.node.hasClass(parent, "fr-inner")) && t.indexOf(parent) < 0) {
                            t.push(parent);
                        }
                        if ((el = editor.node.blockParent(parent)) && t.indexOf(el) < 0) {
                            t.push(el);
                        }
                        /** @type {!Array} */
                        var sourceBases = [];
                        var node = parent;
                        for (; node !== target && node !== editor.el;) {
                            if (sourceBases.indexOf(node) < 0 && node.children && node.children.length) {
                                sourceBases.push(node);
                                node = node.children[0];
                            } else {
                                if (node.nextSibling) {
                                    node = node.nextSibling;
                                } else {
                                    if (node.parentNode) {
                                        node = node.parentNode;
                                        sourceBases.push(node);
                                    }
                                }
                            }
                            if (editor.node.isBlock(node) && sourceBases.indexOf(node) < 0 && t.indexOf(node) < 0 && (node !== target || 0 < options.endOffset)) {
                                t.push(node);
                            }
                        }
                        if (editor.node.isBlock(target) && t.indexOf(target) < 0 && 0 < options.endOffset) {
                            t.push(target);
                        }
                        if ((el = editor.node.blockParent(target)) && t.indexOf(el) < 0) {
                            t.push(el);
                        }
                    }
                }
                /** @type {number} */
                i = t.length - 1;
                for (; 0 < i; i--) {
                    if ($(t[i]).find(t).length) {
                        t.splice(i, 1);
                    }
                }
                return t;
            },
            info : cursorPos,
            setAtEnd : wrap,
            setAtStart : process,
            setBefore : function(value, line) {
                if (void 0 === line) {
                    /** @type {boolean} */
                    line = true;
                }
                var node = value.previousSibling;
                for (; node && node.nodeType == Node.TEXT_NODE && 0 === node.textContent.length;) {
                    node = node.previousSibling;
                }
                return node ? (editor.node.isBlock(node) ? wrap(node) : "BR" == node.tagName ? $(node).before($.FE.MARKERS) : $(node).after($.FE.MARKERS), true) : !!line && (editor.node.isBlock(value) ? process(value) : $(value).before($.FE.MARKERS), true);
            },
            setAfter : function(node, value) {
                if (void 0 === value) {
                    /** @type {boolean} */
                    value = true;
                }
                var target = node.nextSibling;
                for (; target && target.nodeType == Node.TEXT_NODE && 0 === target.textContent.length;) {
                    target = target.nextSibling;
                }
                return target ? (editor.node.isBlock(target) ? process(target) : $(target).before($.FE.MARKERS), true) : !!value && (editor.node.isBlock(node) ? wrap(node) : $(node).after($.FE.MARKERS), true);
            },
            rangeElement : check
        };
    };
    $.extend($.FE.DEFAULTS, {
        htmlAllowedTags : ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "blockquote", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hgroup", "hr", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map",
            "mark", "menu", "menuitem", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "pre", "progress", "queue", "rp", "rt", "ruby", "s", "samp", "script", "style", "section", "select", "small", "source", "span", "strike", "strong", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "tr", "track", "u", "ul", "var", "video", "wbr"],
        htmlRemoveTags : ["script", "style"],
        htmlAllowedAttrs : ["accept", "accept-charset", "accesskey", "action", "align", "allowfullscreen", "allowtransparency", "alt", "async", "autocomplete", "autofocus", "autoplay", "autosave", "background", "bgcolor", "border", "charset", "cellpadding", "cellspacing", "checked", "cite", "class", "color", "cols", "colspan", "content", "contenteditable", "contextmenu", "controls", "coords", "data", "data-.*", "datetime", "default", "defer", "dir", "dirname", "disabled", "download", "draggable", "dropzone",
            "enctype", "for", "form", "formaction", "frameborder", "headers", "height", "hidden", "high", "href", "hreflang", "http-equiv", "icon", "id", "ismap", "itemprop", "keytype", "kind", "label", "lang", "language", "list", "loop", "low", "max", "maxlength", "media", "method", "min", "mozallowfullscreen", "multiple", "muted", "name", "novalidate", "open", "optimum", "pattern", "ping", "placeholder", "playsinline", "poster", "preload", "pubdate", "radiogroup", "readonly", "rel", "required", "reversed",
            "rows", "rowspan", "sandbox", "scope", "scoped", "scrolling", "seamless", "selected", "shape", "size", "sizes", "span", "src", "srcdoc", "srclang", "srcset", "start", "step", "summary", "spellcheck", "style", "tabindex", "target", "title", "type", "translate", "usemap", "value", "valign", "webkitallowfullscreen", "width", "wrap"],
        htmlAllowedStyleProps : [".*"],
        htmlAllowComments : true,
        htmlUntouched : false,
        fullPage : false
    });
    $.FE.HTML5Map = {
        B : "STRONG",
        I : "EM",
        STRIKE : "S"
    };
    /**
     * @param {!Object} editor
     * @return {?}
     */
    $.FE.MODULES.clean = function(editor) {
        /**
         * @param {!Node} element
         * @return {?}
         */
        function check(element) {
            if (element.nodeType == Node.ELEMENT_NODE && element.getAttribute("class") && 0 <= element.getAttribute("class").indexOf("fr-marker")) {
                return false;
            }
            var i;
            var actual = editor.node.contents(element);
            /** @type {!Array} */
            var styles = [];
            /** @type {number} */
            i = 0;
            for (; i < actual.length; i++) {
                if (actual[i].nodeType != Node.ELEMENT_NODE || editor.node.isVoid(actual[i])) {
                    if (actual[i].nodeType == Node.TEXT_NODE) {
                        actual[i].textContent = actual[i].textContent.replace(/\u200b/g, "");
                    }
                } else {
                    if (actual[i].textContent.replace(/\u200b/g, "").length != actual[i].textContent.length) {
                        check(actual[i]);
                    }
                }
            }
            if (element.nodeType == Node.ELEMENT_NODE && !editor.node.isVoid(element) && (element.normalize(), actual = editor.node.contents(element), styles = element.querySelectorAll(".fr-marker"), actual.length - styles.length == 0)) {
                /** @type {number} */
                i = 0;
                for (; i < actual.length; i++) {
                    if (actual[i].nodeType == Node.ELEMENT_NODE && (actual[i].getAttribute("class") || "").indexOf("fr-marker") < 0) {
                        return false;
                    }
                }
                /** @type {number} */
                i = 0;
                for (; i < styles.length; i++) {
                    element.parentNode.insertBefore(styles[i].cloneNode(true), element);
                }
                return element.parentNode.removeChild(element), false;
            }
        }
        /**
         * @param {!Node} node
         * @param {number} token
         * @return {?}
         */
        function set(node, token) {
            if (node.nodeType == Node.COMMENT_NODE) {
                return "\x3c!--" + node.nodeValue + "--\x3e";
            }
            if (node.nodeType == Node.TEXT_NODE) {
                return token ? node.textContent.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;") : node.textContent.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\u00A0/g, "&nbsp;").replace(/\u0009/g, "");
            }
            if (node.nodeType != Node.ELEMENT_NODE) {
                return node.outerHTML;
            }
            if (node.nodeType == Node.ELEMENT_NODE && 0 <= ["STYLE", "SCRIPT", "NOSCRIPT"].indexOf(node.tagName)) {
                return node.outerHTML;
            }
            if (node.nodeType == Node.ELEMENT_NODE && "svg" == node.tagName) {
                /** @type {!Element} */
                var op = document.createElement("div");
                var e = node.cloneNode(true);
                return op.appendChild(e), op.innerHTML;
            }
            if ("IFRAME" == node.tagName) {
                return node.outerHTML.replace(/&lt;/g, "<").replace(/&gt;/g, ">");
            }
            var elems = node.childNodes;
            if (0 === elems.length) {
                return node.outerHTML;
            }
            /** @type {string} */
            var code = "";
            /** @type {number} */
            var i = 0;
            for (; i < elems.length; i++) {
                if ("PRE" == node.tagName) {
                    /** @type {boolean} */
                    token = true;
                }
                /** @type {string} */
                code = code + set(elems[i], token);
            }
            return editor.node.openTagString(node) + code + editor.node.closeTagString(node);
        }
        /**
         * @param {string} text
         * @return {?}
         */
        function fn(text) {
            var str = text.replace(/;;/gi, ";");
            return ";" != (str = str.replace(/^;/gi, "")).charAt(str.length) && (str = str + ";"), str;
        }
        /**
         * @param {!Object} modules
         * @return {?}
         */
        function render(modules) {
            var id;
            for (id in modules) {
                if (modules.hasOwnProperty(id)) {
                    /** @type {(Array<string>|null)} */
                    var isStartThisDay = id.match(re);
                    /** @type {null} */
                    var isEndThisDay = null;
                    if ("style" == id && editor.opts.htmlAllowedStyleProps.length) {
                        isEndThisDay = modules[id].match(rDataName);
                    }
                    if (isStartThisDay && isEndThisDay) {
                        modules[id] = fn(isEndThisDay.join(";"));
                    } else {
                        if (!(isStartThisDay && ("style" != id || isEndThisDay))) {
                            delete modules[id];
                        }
                    }
                }
            }
            /** @type {string} */
            var ret = "";
            /** @type {!Array<string>} */
            var logArrays = Object.keys(modules).sort();
            /** @type {number} */
            var a = 0;
            for (; a < logArrays.length; a++) {
                if (modules[id = logArrays[a]].indexOf('"') < 0) {
                    /** @type {string} */
                    ret = ret + (" " + id + '="' + modules[id] + '"');
                } else {
                    /** @type {string} */
                    ret = ret + (" " + id + "='" + modules[id] + "'");
                }
            }
            return ret;
        }
        /**
         * @param {!Object} obj
         * @param {?} func
         * @return {?}
         */
        function get(obj, func) {
            var i;
            /** @type {!Element} */
            var node = document.implementation.createHTMLDocument("Froala DOC").createElement("DIV");
            $(node).append(obj);
            /** @type {string} */
            var retour = "";
            if (node) {
                var args = editor.node.contents(node);
                /** @type {number} */
                i = 0;
                for (; i < args.length; i++) {
                    func(args[i]);
                }
                args = editor.node.contents(node);
                /** @type {number} */
                i = 0;
                for (; i < args.length; i++) {
                    /** @type {string} */
                    retour = retour + set(args[i]);
                }
            }
            return retour;
        }
        /**
         * @param {!Object} value
         * @param {(!Function|string)} type
         * @param {boolean} n
         * @return {?}
         */
        function update(value, type, n) {
            /** @type {!Array} */
            a = [];
            var key = value = value.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, function(bT) {
                return a.push(bT), "[FROALA.EDITOR.SCRIPT " + (a.length - 1) + "]";
            }).replace(/<noscript\b[^<]*(?:(?!<\/noscript>)<[^<]*)*<\/noscript>/gi, function(bT) {
                return a.push(bT), "[FROALA.EDITOR.NOSCRIPT " + (a.length - 1) + "]";
            }).replace(/<img((?:[\w\W]*?)) src="/g, '<img$1 data-fr-src="');
            /** @type {null} */
            var target = null;
            if (editor.opts.fullPage) {
                key = editor.html.extractNode(value, "body") || (0 <= value.indexOf("<body") ? "" : value);
                if (n) {
                    target = editor.html.extractNode(value, "head") || "";
                }
            }
            key = get(key, type);
            if (target) {
                target = get(target, type);
            }
            var actual = function(name, url, node) {
                if (editor.opts.fullPage) {
                    var controlFlowActionMsg = editor.html.extractDoctype(node);
                    var boooom = render(editor.html.extractNodeAttrs(node, "html"));
                    return url = null == url ? editor.html.extractNode(node, "head") || "<title></title>" : url, controlFlowActionMsg + "<html" + boooom + "><head" + render(editor.html.extractNodeAttrs(node, "head")) + ">" + url + "</head><body" + render(editor.html.extractNodeAttrs(node, "body")) + ">" + name + "</body></html>";
                }
                return name;
            }(key, target, value);
            return actual.replace(/\[FROALA\.EDITOR\.SCRIPT ([\d]*)\]/gi, function(canCreateDiscussions, name) {
                return 0 <= editor.opts.htmlRemoveTags.indexOf("script") ? "" : a[parseInt(name, 10)];
            }).replace(/\[FROALA\.EDITOR\.NOSCRIPT ([\d]*)\]/gi, function(canCreateDiscussions, name) {
                return 0 <= editor.opts.htmlRemoveTags.indexOf("noscript") ? "" : a[parseInt(name, 10)].replace(/&lt;/g, "<").replace(/&gt;/g, ">");
            }).replace(/<img((?:[\w\W]*?)) data-fr-src="/g, '<img$1 src="');
        }
        /**
         * @param {string} content
         * @return {?}
         */
        function filter(content) {
            var e = editor.doc.createElement("DIV");
            return e.innerText = content, e.textContent;
        }
        /**
         * @param {!Node} el
         * @return {undefined}
         */
        function init(el) {
            var props = editor.node.contents(el);
            /** @type {number} */
            var i = 0;
            for (; i < props.length; i++) {
                if (props[i].nodeType != Node.TEXT_NODE) {
                    init(props[i]);
                }
            }
            !function(el) {
                if ("SPAN" == el.tagName && 0 <= (el.getAttribute("class") || "").indexOf("fr-marker")) {
                    return;
                }
                var tmp;
                var value;
                if ("PRE" == el.tagName && 0 <= (value = (tmp = el).innerHTML).indexOf("\n") && (tmp.innerHTML = value.replace(/\n/g, "<br>")), el.nodeType == Node.ELEMENT_NODE && (el.getAttribute("data-fr-src") && 0 !== el.getAttribute("data-fr-src").indexOf("blob:") && el.setAttribute("data-fr-src", editor.helpers.sanitizeURL(filter(el.getAttribute("data-fr-src")))), el.getAttribute("href") && el.setAttribute("href", editor.helpers.sanitizeURL(filter(el.getAttribute("href")))), el.getAttribute("src") &&
                    el.setAttribute("src", editor.helpers.sanitizeURL(filter(el.getAttribute("src")))), 0 <= ["TABLE", "TBODY", "TFOOT", "TR"].indexOf(el.tagName) && (el.innerHTML = el.innerHTML.trim())), !editor.opts.pasteAllowLocalImages && el.nodeType == Node.ELEMENT_NODE && "IMG" == el.tagName && el.getAttribute("data-fr-src") && 0 === el.getAttribute("data-fr-src").indexOf("file://")) {
                    return el.parentNode.removeChild(el);
                }
                if (el.nodeType == Node.ELEMENT_NODE && $.FE.HTML5Map[el.tagName] && "" === editor.node.attributes(el)) {
                    var r = $.FE.HTML5Map[el.tagName];
                    /** @type {string} */
                    var CONTAINER_TEMPLATE = "<" + r + ">" + el.innerHTML + "</" + r + ">";
                    el.insertAdjacentHTML("beforebegin", CONTAINER_TEMPLATE);
                    (el = el.previousSibling).parentNode.removeChild(el.nextSibling);
                }
                if (editor.opts.htmlAllowComments || el.nodeType != Node.COMMENT_NODE) {
                    if (el.tagName && el.tagName.match(specialWords)) {
                        el.parentNode.removeChild(el);
                    } else {
                        if (el.tagName && !el.tagName.match(_regex)) {
                            if ("svg" === el.tagName) {
                                el.parentNode.removeChild(el);
                            } else {
                                if (!(editor.browser.safari && "path" == el.tagName && el.parentNode && "svg" == el.parentNode.tagName)) {
                                    el.outerHTML = el.innerHTML;
                                }
                            }
                        } else {
                            var attributes = el.attributes;
                            if (attributes) {
                                /** @type {number} */
                                var name = attributes.length - 1;
                                for (; 0 <= name; name--) {
                                    var attribute = attributes[name];
                                    var isStartThisDay = attribute.nodeName.match(re);
                                    /** @type {null} */
                                    var isEndThisDay = null;
                                    if ("style" == attribute.nodeName && editor.opts.htmlAllowedStyleProps.length) {
                                        isEndThisDay = attribute.value.match(rDataName);
                                    }
                                    if (isStartThisDay && isEndThisDay) {
                                        attribute.value = fn(isEndThisDay.join(";"));
                                    } else {
                                        if (!(isStartThisDay && ("style" != attribute.nodeName || isEndThisDay))) {
                                            el.removeAttribute(attribute.nodeName);
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    if (0 !== el.data.indexOf("[FROALA.EDITOR")) {
                        el.parentNode.removeChild(el);
                    }
                }
            }(el);
        }
        var _regex;
        var specialWords;
        var re;
        var rDataName;
        /** @type {!Array} */
        var a = [];
        return {
            _init : function() {
                if (editor.opts.fullPage) {
                    $.merge(editor.opts.htmlAllowedTags, ["head", "title", "style", "link", "base", "body", "html", "meta"]);
                }
            },
            html : function(callback, files, n, max) {
                if (void 0 === files) {
                    /** @type {!Array} */
                    files = [];
                }
                if (void 0 === n) {
                    /** @type {!Array} */
                    n = [];
                }
                if (void 0 === max) {
                    /** @type {boolean} */
                    max = false;
                }
                var i;
                var list = $.merge([], editor.opts.htmlAllowedTags);
                /** @type {number} */
                i = 0;
                for (; i < files.length; i++) {
                    if (0 <= list.indexOf(files[i])) {
                        list.splice(list.indexOf(files[i]), 1);
                    }
                }
                var labels = $.merge([], editor.opts.htmlAllowedAttrs);
                /** @type {number} */
                i = 0;
                for (; i < n.length; i++) {
                    if (0 <= labels.indexOf(n[i])) {
                        labels.splice(labels.indexOf(n[i]), 1);
                    }
                }
                return labels.push("data-fr-.*"), labels.push("fr-.*"), _regex = new RegExp("^" + list.join("$|^") + "$", "gi"), re = new RegExp("^" + labels.join("$|^") + "$", "gi"), specialWords = new RegExp("^" + editor.opts.htmlRemoveTags.join("$|^") + "$", "gi"), rDataName = editor.opts.htmlAllowedStyleProps.length ? new RegExp("((^|;|\\s)" + editor.opts.htmlAllowedStyleProps.join(":.+?(?=;|$))|((^|;|\\s)") + ":.+?(?=(;)|$))", "gi") : null, callback = update(callback, init, true);
            },
            toHTML5 : function() {
                var blocks = editor.el.querySelectorAll(Object.keys($.FE.HTML5Map).join(","));
                if (blocks.length) {
                    /** @type {boolean} */
                    var t = false;
                    if (!editor.el.querySelector(".fr-marker")) {
                        editor.selection.save();
                        /** @type {boolean} */
                        t = true;
                    }
                    /** @type {number} */
                    var i = 0;
                    for (; i < blocks.length; i++) {
                        if ("" === editor.node.attributes(blocks[i])) {
                            $(blocks[i]).replaceWith("<" + $.FE.HTML5Map[blocks[i].tagName] + ">" + blocks[i].innerHTML + "</" + $.FE.HTML5Map[blocks[i].tagName] + ">");
                        }
                    }
                    if (t) {
                        editor.selection.restore();
                    }
                }
            },
            tables : function() {
                !function() {
                    var a = editor.el.querySelectorAll("tr");
                    /** @type {number} */
                    var i = 0;
                    for (; i < a.length; i++) {
                        var parsed = a[i].children;
                        /** @type {boolean} */
                        var r = true;
                        /** @type {number} */
                        var i2 = 0;
                        for (; i2 < parsed.length; i2++) {
                            if ("TH" != parsed[i2].tagName) {
                                /** @type {boolean} */
                                r = false;
                                break;
                            }
                        }
                        if (false !== r && 0 !== parsed.length) {
                            var e = a[i];
                            for (; e && "TABLE" != e.tagName && "THEAD" != e.tagName;) {
                                e = e.parentNode;
                            }
                            var el = e;
                            if ("THEAD" != el.tagName) {
                                el = editor.doc.createElement("THEAD");
                                e.insertBefore(el, e.firstChild);
                            }
                            el.appendChild(a[i]);
                        }
                    }
                }();
            },
            lists : function() {
                !function() {
                    var node;
                    /** @type {!Array} */
                    var untranslated = [];
                    do {
                        if (untranslated.length) {
                            var cNode = untranslated[0];
                            var painterTopMenuContainer = editor.doc.createElement("ul");
                            cNode.parentNode.insertBefore(painterTopMenuContainer, cNode);
                            do {
                                var painterTopMenuFile = cNode;
                                cNode = cNode.nextSibling;
                                painterTopMenuContainer.appendChild(painterTopMenuFile);
                            } while (cNode && "LI" == cNode.tagName);
                        }
                        /** @type {!Array} */
                        untranslated = [];
                        var elements = editor.el.querySelectorAll("li");
                        /** @type {number} */
                        var i = 0;
                        for (; i < elements.length; i++) {
                            node = elements[i];
                            if (!editor.node.isList(node.parentNode)) {
                                untranslated.push(elements[i]);
                            }
                        }
                    } while (0 < untranslated.length);
                }();
                (function() {
                    var bodyChildNodes = editor.el.querySelectorAll("ol + ol, ul + ul");
                    /** @type {number} */
                    var i = 0;
                    for (; i < bodyChildNodes.length; i++) {
                        var node = bodyChildNodes[i];
                        if (editor.node.isList(node.previousSibling) && editor.node.openTagString(node) == editor.node.openTagString(node.previousSibling)) {
                            var r = editor.node.contents(node);
                            /** @type {number} */
                            var i = 0;
                            for (; i < r.length; i++) {
                                node.previousSibling.appendChild(r[i]);
                            }
                            node.parentNode.removeChild(node);
                        }
                    }
                })();
                (function() {
                    var blocks = editor.el.querySelectorAll("ul, ol");
                    /** @type {number} */
                    var indexBlock = 0;
                    for (; indexBlock < blocks.length; indexBlock++) {
                        var childNodes = editor.node.contents(blocks[indexBlock]);
                        /** @type {null} */
                        var dom = null;
                        /** @type {number} */
                        var i = childNodes.length - 1;
                        for (; 0 <= i; i--) {
                            if ("LI" != childNodes[i].tagName) {
                                if (!dom) {
                                    (dom = $("<li>")).insertBefore(childNodes[i]);
                                }
                                dom.prepend(childNodes[i]);
                            } else {
                                /** @type {null} */
                                dom = null;
                            }
                        }
                    }
                })();
                (function() {
                    var i;
                    var t;
                    var itemEl;
                    do {
                        /** @type {boolean} */
                        t = false;
                        var eiFrame = editor.el.querySelectorAll("li:empty");
                        /** @type {number} */
                        i = 0;
                        for (; i < eiFrame.length; i++) {
                            eiFrame[i].parentNode.removeChild(eiFrame[i]);
                        }
                        var itemEls = editor.el.querySelectorAll("ul, ol");
                        /** @type {number} */
                        i = 0;
                        for (; i < itemEls.length; i++) {
                            if (!(itemEl = itemEls[i]).querySelector("LI")) {
                                /** @type {boolean} */
                                t = true;
                                itemEl.parentNode.removeChild(itemEl);
                            }
                        }
                    } while (true === t);
                })();
                (function() {
                    var namespaceSplit = editor.el.querySelectorAll("ul > ul, ol > ol, ul > ol, ol > ul");
                    /** @type {number} */
                    var i = 0;
                    for (; i < namespaceSplit.length; i++) {
                        var n = namespaceSplit[i];
                        var next = n.previousSibling;
                        if (next) {
                            if ("LI" == next.tagName) {
                                next.appendChild(n);
                            } else {
                                $(n).wrap("<li></li>");
                            }
                        }
                    }
                })();
                (function() {
                    var namespaceSplit = editor.el.querySelectorAll("li > ul, li > ol");
                    /** @type {number} */
                    var i = 0;
                    for (; i < namespaceSplit.length; i++) {
                        var n = namespaceSplit[i];
                        if (n.nextSibling) {
                            var t = n.nextSibling;
                            var o = $("<li>");
                            $(n.parentNode).after(o);
                            do {
                                var value = t;
                                t = t.nextSibling;
                                o.append(value);
                            } while (t);
                        }
                    }
                })();
                (function() {
                    var namespaceSplit = editor.el.querySelectorAll("li > ul, li > ol");
                    /** @type {number} */
                    var i = 0;
                    for (; i < namespaceSplit.length; i++) {
                        var n = namespaceSplit[i];
                        if (editor.node.isFirstSibling(n)) {
                            $(n).before("<br/>");
                        } else {
                            if (n.previousSibling && "BR" == n.previousSibling.tagName) {
                                var previousSibling = n.previousSibling.previousSibling;
                                for (; previousSibling && editor.node.hasClass(previousSibling, "fr-marker");) {
                                    previousSibling = previousSibling.previousSibling;
                                }
                                if (previousSibling && "BR" != previousSibling.tagName) {
                                    $(n.previousSibling).remove();
                                }
                            }
                        }
                    }
                })();
                (function() {
                    var bcofl_checkbox = editor.el.querySelectorAll("li:empty");
                    /** @type {number} */
                    var i = 0;
                    for (; i < bcofl_checkbox.length; i++) {
                        $(bcofl_checkbox[i]).remove();
                    }
                })();
            },
            invisibleSpaces : function(r) {
                return r.replace(/\u200b/g, "").length == r.length ? r : editor.clean.exec(r, check);
            },
            exec : update
        };
    };
    /**
     * @param {!Object} editor
     * @return {?}
     */
    $.FE.MODULES.spaces = function(editor) {
        /**
         * @param {!Object} e
         * @param {number} source
         * @return {undefined}
         */
        function remove(e, source) {
            var element = e.previousSibling;
            var node = e.nextSibling;
            var text = e.textContent;
            var target = e.parentNode;
            if (!editor.html.isPreformatted(target)) {
                if (source) {
                    text = text.replace(/[\f\n\r\t\v ]{2,}/g, " ");
                    if (!(node && "BR" !== node.tagName && !editor.node.isBlock(node) || !(editor.node.isBlock(target) || editor.node.isLink(target) && !target.nextSibling || editor.node.isElement(target)))) {
                        text = text.replace(/[\f\n\r\t\v ]{1,}$/g, "");
                    }
                    if (!(element && "BR" !== element.tagName && !editor.node.isBlock(element) || !(editor.node.isBlock(target) || editor.node.isLink(target) && !target.previousSibling || editor.node.isElement(target)))) {
                        text = text.replace(/^[\f\n\r\t\v ]{1,}/g, "");
                    }
                    if (" " === text && (element && editor.node.isVoid(element) || node && editor.node.isVoid(node))) {
                        /** @type {string} */
                        text = "";
                    }
                }
                if ((!element && editor.node.isBlock(node) || !node && editor.node.isBlock(element)) && editor.node.isBlock(target)) {
                    text = text.replace(/^[\f\n\r\t\v ]{1,}/g, "");
                }
                if (!source) {
                    text = text.replace(new RegExp($.FE.UNICODE_NBSP, "g"), " ");
                }
                /** @type {string} */
                var value = "";
                /** @type {number} */
                var i = 0;
                for (; i < text.length; i++) {
                    if (32 != text.charCodeAt(i) || 0 !== i && 32 != value.charCodeAt(i - 1)) {
                        value = value + text[i];
                    } else {
                        /** @type {string} */
                        value = value + $.FE.UNICODE_NBSP;
                    }
                }
                if (!node || node && editor.node.isBlock(node) || node && node.nodeType == Node.ELEMENT_NODE && editor.win.getComputedStyle(node) && "block" == editor.win.getComputedStyle(node).display) {
                    /** @type {string} */
                    value = value.replace(/ $/, $.FE.UNICODE_NBSP);
                }
                if (!(!element || editor.node.isVoid(element) || editor.node.isBlock(element) || 1 !== (value = value.replace(/^\u00A0([^ $])/, " $1")).length || 160 !== value.charCodeAt(0) || !node || editor.node.isVoid(node) || editor.node.isBlock(node))) {
                    /** @type {string} */
                    value = " ";
                }
                if (!source) {
                    /** @type {string} */
                    value = value.replace(/([^ \u00A0])\u00A0([^ \u00A0])/g, "$1 $2");
                }
                if (e.textContent != value) {
                    /** @type {string} */
                    e.textContent = value;
                }
            }
        }
        /**
         * @param {!Object} el
         * @param {number} a
         * @return {undefined}
         */
        function init(el, a) {
            if (void 0 !== el && el || (el = editor.el), void 0 === a && (a = false), !el.getAttribute || "false" != el.getAttribute("contenteditable")) {
                if (el.nodeType == Node.TEXT_NODE) {
                    remove(el, a);
                } else {
                    if (el.nodeType == Node.ELEMENT_NODE) {
                        var node = editor.doc.createTreeWalker(el, NodeFilter.SHOW_TEXT, editor.node.filter(function(child) {
                            var node = child.parentNode;
                            for (; node && node !== editor.el;) {
                                if ("STYLE" == node.tagName || "IFRAME" == node.tagName) {
                                    return false;
                                }
                                if ("PRE" === node.tagName) {
                                    return false;
                                }
                                node = node.parentNode;
                            }
                            return null != child.textContent.match(/([ \u00A0\f\n\r\t\v]{2,})|(^[ \u00A0\f\n\r\t\v]{1,})|([ \u00A0\f\n\r\t\v]{1,}$)/g) && !editor.node.hasClass(child.parentNode, "fr-marker");
                        }), false);
                        for (; node.nextNode();) {
                            remove(node.currentNode, a);
                        }
                    }
                }
            }
        }
        return {
            normalize : init,
            normalizeAroundCursor : function() {
                /** @type {!Array} */
                var args = [];
                var tags = editor.el.querySelectorAll(".fr-marker");
                /** @type {number} */
                var nextTagIdx = 0;
                for (; nextTagIdx < tags.length; nextTagIdx++) {
                    /** @type {null} */
                    var prev = null;
                    var helperTagCallback = editor.node.blockParent(tags[nextTagIdx]);
                    var next = (prev = helperTagCallback || tags[nextTagIdx]).nextSibling;
                    var x = prev.previousSibling;
                    for (; next && "BR" == next.tagName;) {
                        next = next.nextSibling;
                    }
                    for (; x && "BR" == x.tagName;) {
                        x = x.previousSibling;
                    }
                    if (prev && args.indexOf(prev) < 0) {
                        args.push(prev);
                    }
                    if (x && args.indexOf(x) < 0) {
                        args.push(x);
                    }
                    if (next && args.indexOf(next) < 0) {
                        args.push(next);
                    }
                }
                /** @type {number} */
                var i = 0;
                for (; i < args.length; i++) {
                    init(args[i]);
                }
            }
        };
    };
    /** @type {string} */
    $.FE.UNICODE_NBSP = String.fromCharCode(160);
    /** @type {!Array} */
    $.FE.VOID_ELEMENTS = ["area", "base", "br", "col", "embed", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"];
    /** @type {!Array} */
    $.FE.BLOCK_TAGS = ["address", "article", "aside", "audio", "blockquote", "canvas", "details", "dd", "div", "dl", "dt", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hgroup", "hr", "li", "main", "nav", "noscript", "ol", "output", "p", "pre", "section", "table", "tbody", "td", "tfoot", "th", "thead", "tr", "ul", "video"];
    $.extend($.FE.DEFAULTS, {
        htmlAllowedEmptyTags : ["textarea", "a", "iframe", "object", "video", "style", "script", ".fa", ".fr-emoticon", ".fr-inner", "path", "line"],
        htmlDoNotWrapTags : ["script", "style"],
        htmlSimpleAmpersand : false,
        htmlIgnoreCSSProperties : [],
        htmlExecuteScripts : true
    });
    /**
     * @param {!Object} editor
     * @return {?}
     */
    $.FE.MODULES.html = function(editor) {
        /**
         * @return {?}
         */
        function success() {
            return editor.opts.enter == $.FE.ENTER_P ? "p" : editor.opts.enter == $.FE.ENTER_DIV ? "div" : editor.opts.enter == $.FE.ENTER_BR ? null : void 0;
        }
        /**
         * @param {!Object} el
         * @param {boolean} value
         * @return {?}
         */
        function getStyle(el, value) {
            return !(!el || el === editor.el) && (value ? -1 != ["PRE", "SCRIPT", "STYLE"].indexOf(el.tagName) || getStyle(el.parentNode, value) : -1 != ["PRE", "SCRIPT", "STYLE"].indexOf(el.tagName));
        }
        /**
         * @param {boolean} module
         * @return {?}
         */
        function compile(module) {
            var k;
            /** @type {!Array} */
            var features = [];
            /** @type {!Array} */
            var children = [];
            if (module) {
                var overlapHighwaysBboxes = editor.el.querySelectorAll(".fr-marker");
                /** @type {number} */
                k = 0;
                for (; k < overlapHighwaysBboxes.length; k++) {
                    var node = editor.node.blockParent(overlapHighwaysBboxes[k]) || overlapHighwaysBboxes[k];
                    if (node) {
                        var child = node.nextSibling;
                        var target = node.previousSibling;
                        if (node && children.indexOf(node) < 0 && editor.node.isBlock(node)) {
                            children.push(node);
                        }
                        if (target && editor.node.isBlock(target) && children.indexOf(target) < 0) {
                            children.push(target);
                        }
                        if (child && editor.node.isBlock(child) && children.indexOf(child) < 0) {
                            children.push(child);
                        }
                    }
                }
            } else {
                children = editor.el.querySelectorAll(wrap());
            }
            var element = wrap();
            element = element + ("," + $.FE.VOID_ELEMENTS.join(","));
            /** @type {string} */
            element = element + ", .fr-inner";
            /** @type {string} */
            element = element + ("," + editor.opts.htmlAllowedEmptyTags.join(":not(.fr-marker),") + ":not(.fr-marker)");
            /** @type {number} */
            k = children.length - 1;
            for (; 0 <= k; k--) {
                if (!(children[k].textContent && 0 < children[k].textContent.replace(/\u200B|\n/g, "").length || 0 < children[k].querySelectorAll(element).length)) {
                    var options = editor.node.contents(children[k]);
                    /** @type {boolean} */
                    var c = false;
                    /** @type {number} */
                    var i = 0;
                    for (; i < options.length; i++) {
                        if (options[i].nodeType != Node.COMMENT_NODE && options[i].textContent && 0 < options[i].textContent.replace(/\u200B|\n/g, "").length) {
                            /** @type {boolean} */
                            c = true;
                            break;
                        }
                    }
                    if (!c) {
                        features.push(children[k]);
                    }
                }
            }
            return features;
        }
        /**
         * @return {?}
         */
        function wrap() {
            return $.FE.BLOCK_TAGS.join(", ");
        }
        /**
         * @param {?} n
         * @return {undefined}
         */
        function _init(n) {
            var nodes;
            var found;
            var fn = $.merge([], $.FE.VOID_ELEMENTS);
            fn = $.merge(fn, editor.opts.htmlAllowedEmptyTags);
            fn = void 0 === n ? $.merge(fn, $.FE.BLOCK_TAGS) : $.merge(fn, $.FE.NO_DELETE_TAGS);
            nodes = editor.el.querySelectorAll("*:empty:not(" + fn.join("):not(") + "):not(.fr-marker)");
            do {
                /** @type {boolean} */
                found = false;
                /** @type {number} */
                var i = 0;
                for (; i < nodes.length; i++) {
                    if (!(0 !== nodes[i].attributes.length && void 0 === nodes[i].getAttribute("href"))) {
                        nodes[i].parentNode.removeChild(nodes[i]);
                        /** @type {boolean} */
                        found = true;
                    }
                }
                nodes = editor.el.querySelectorAll("*:empty:not(" + fn.join("):not(") + "):not(.fr-marker)");
            } while (nodes.length && found);
        }
        /**
         * @param {!Object} xml
         * @param {!Object} t
         * @return {undefined}
         */
        function process(xml, t) {
            var tagName = success();
            if (t && (tagName = "div"), tagName) {
                var seqXml = editor.doc.createDocumentFragment();
                /** @type {null} */
                var el = null;
                /** @type {boolean} */
                var styles = false;
                var node = xml.firstChild;
                /** @type {boolean} */
                var s = false;
                for (; node;) {
                    var next_node = node.nextSibling;
                    if (node.nodeType == Node.ELEMENT_NODE && (editor.node.isBlock(node) || 0 <= editor.opts.htmlDoNotWrapTags.indexOf(node.tagName.toLowerCase()) && !editor.node.hasClass(node, "fr-marker"))) {
                        /** @type {null} */
                        el = null;
                        seqXml.appendChild(node.cloneNode(true));
                    } else {
                        if (node.nodeType != Node.ELEMENT_NODE && node.nodeType != Node.TEXT_NODE) {
                            /** @type {null} */
                            el = null;
                            seqXml.appendChild(node.cloneNode(true));
                        } else {
                            if ("BR" == node.tagName) {
                                if (null == el) {
                                    el = editor.doc.createElement(tagName);
                                    /** @type {boolean} */
                                    s = true;
                                    if (t) {
                                        el.setAttribute("class", "fr-temp-div");
                                        el.setAttribute("data-empty", true);
                                    }
                                    el.appendChild(node.cloneNode(true));
                                    seqXml.appendChild(el);
                                } else {
                                    if (false === styles) {
                                        el.appendChild(editor.doc.createElement("br"));
                                        if (t) {
                                            el.setAttribute("class", "fr-temp-div");
                                            el.setAttribute("data-empty", true);
                                        }
                                    }
                                }
                                /** @type {null} */
                                el = null;
                            } else {
                                var lineText = node.textContent;
                                if (node.nodeType !== Node.TEXT_NODE || 0 < lineText.replace(/\n/g, "").replace(/(^ *)|( *$)/g, "").length || lineText.length && lineText.indexOf("\n") < 0) {
                                    if (null == el) {
                                        el = editor.doc.createElement(tagName);
                                        /** @type {boolean} */
                                        s = true;
                                        if (t) {
                                            el.setAttribute("class", "fr-temp-div");
                                        }
                                        seqXml.appendChild(el);
                                        /** @type {boolean} */
                                        styles = false;
                                    }
                                    el.appendChild(node.cloneNode(true));
                                    if (!(styles || editor.node.hasClass(node, "fr-marker") || node.nodeType == Node.TEXT_NODE && 0 === lineText.replace(/ /g, "").length)) {
                                        /** @type {boolean} */
                                        styles = true;
                                    }
                                }
                            }
                        }
                    }
                    node = next_node;
                }
                if (s) {
                    /** @type {string} */
                    xml.innerHTML = "";
                    xml.appendChild(seqXml);
                }
            }
        }
        /**
         * @param {!NodeList} val
         * @param {!Array} data
         * @return {undefined}
         */
        function append(val, data) {
            /** @type {number} */
            var i = val.length - 1;
            for (; 0 <= i; i--) {
                process(val[i], data);
            }
        }
        /**
         * @param {?} data
         * @param {number} firstTime
         * @param {number} radius
         * @param {number} callback
         * @param {!Array} ratio
         * @return {?}
         */
        function resize(data, firstTime, radius, callback, ratio) {
            if (!editor.$wp) {
                return false;
            }
            if (void 0 === data) {
                /** @type {boolean} */
                data = false;
            }
            if (void 0 === firstTime) {
                /** @type {boolean} */
                firstTime = false;
            }
            if (void 0 === radius) {
                /** @type {boolean} */
                radius = false;
            }
            if (void 0 === callback) {
                /** @type {boolean} */
                callback = false;
            }
            if (void 0 === ratio) {
                /** @type {boolean} */
                ratio = false;
            }
            var roundedTop = editor.$wp.scrollTop();
            process(editor.el, data);
            if (callback) {
                append(editor.el.querySelectorAll(".fr-inner"), data);
            }
            if (firstTime) {
                append(editor.el.querySelectorAll("td, th"), data);
            }
            if (radius) {
                append(editor.el.querySelectorAll("blockquote"), data);
            }
            if (ratio) {
                append(editor.el.querySelectorAll("li"), data);
            }
            if (roundedTop != editor.$wp.scrollTop()) {
                editor.$wp.scrollTop(roundedTop);
            }
        }
        /**
         * @param {string} element
         * @return {?}
         */
        function init(element) {
            if (void 0 === element && (element = editor.el), element && 0 <= ["SCRIPT", "STYLE", "PRE"].indexOf(element.tagName)) {
                return false;
            }
            var w = editor.doc.createTreeWalker(element, NodeFilter.SHOW_TEXT, editor.node.filter(function(e) {
                return null != e.textContent.match(/([ \n]{2,})|(^[ \n]{1,})|([ \n]{1,}$)/g);
            }), false);
            for (; w.nextNode();) {
                var el = w.currentNode;
                if (!getStyle(el.parentNode, true)) {
                    var r = editor.node.isBlock(el.parentNode) || editor.node.isElement(el.parentNode);
                    var a = el.textContent.replace(/(?!^)( ){2,}(?!$)/g, " ").replace(/\n/g, " ").replace(/^[ ]{2,}/g, " ").replace(/[ ]{2,}$/g, " ");
                    if (r) {
                        var node = el.previousSibling;
                        var parent = el.nextSibling;
                        if (node && parent && " " == a) {
                            /** @type {string} */
                            a = editor.node.isBlock(node) && editor.node.isBlock(parent) ? "" : " ";
                        } else {
                            if (!node) {
                                a = a.replace(/^ */, "");
                            }
                            if (!parent) {
                                a = a.replace(/ *$/, "");
                            }
                        }
                    }
                    el.textContent = a;
                }
            }
        }
        /**
         * @param {!Object} code
         * @param {string} expected
         * @param {number} name
         * @return {?}
         */
        function test(code, expected, name) {
            /** @type {(Array<string>|null)} */
            var defaults = (new RegExp(expected, "gi")).exec(code);
            return defaults ? defaults[name] : null;
        }
        /**
         * @param {!Object} root
         * @return {?}
         */
        function walk(root) {
            var node = root.doctype;
            /** @type {string} */
            var type = "<!DOCTYPE html>";
            return node && (type = "<!DOCTYPE " + node.name + (node.publicId ? ' PUBLIC "' + node.publicId + '"' : "") + (!node.publicId && node.systemId ? " SYSTEM" : "") + (node.systemId ? ' "' + node.systemId + '"' : "") + ">"), type;
        }
        /**
         * @param {!Object} obj
         * @return {?}
         */
        function update(obj) {
            var target = obj.parentNode;
            if (target && (editor.node.isBlock(target) || editor.node.isElement(target)) && ["TD", "TH"].indexOf(target.tagName) < 0) {
                var node = obj.previousSibling;
                var r = obj.nextSibling;
                for (; node && (node.nodeType == Node.TEXT_NODE && 0 === node.textContent.replace(/\n|\r/g, "").length || editor.node.hasClass(node, "fr-tmp"));) {
                    node = node.previousSibling;
                }
                if (r) {
                    return false;
                }
                if (node && target && "BR" != node.tagName && !editor.node.isBlock(node) && !r && 0 < target.textContent.replace(/\u200B/g, "").length && 0 < node.textContent.length && !editor.node.hasClass(node, "fr-marker")) {
                    if (!(editor.el == target && !r && editor.opts.enter == $.FE.ENTER_BR && editor.browser.msie)) {
                        obj.parentNode.removeChild(obj);
                    }
                }
            } else {
                if (!(!target || editor.node.isBlock(target) || editor.node.isElement(target) || obj.previousSibling || obj.nextSibling || !editor.node.isDeletable(obj.parentNode))) {
                    update(obj.parentNode);
                }
            }
        }
        /**
         * @return {undefined}
         */
        function render() {
            if (!editor.opts.htmlUntouched) {
                _init();
                resize();
                init();
                editor.spaces.normalize(null, true);
                editor.html.fillEmptyBlocks();
                editor.clean.lists();
                editor.clean.tables();
                editor.clean.toHTML5();
                editor.html.cleanBRs();
            }
            editor.selection.restore();
            remove();
            editor.placeholder.refresh();
        }
        /**
         * @return {undefined}
         */
        function remove() {
            if (editor.node.isEmpty(editor.el)) {
                if (null != success()) {
                    if (!(editor.el.querySelector(wrap()) || editor.el.querySelector(editor.opts.htmlDoNotWrapTags.join(":not(.fr-marker),") + ":not(.fr-marker)"))) {
                        if (editor.core.hasFocus()) {
                            editor.$el.html("<" + success() + ">" + $.FE.MARKERS + "<br/></" + success() + ">");
                            editor.selection.restore();
                        } else {
                            editor.$el.html("<" + success() + "><br/></" + success() + ">");
                        }
                    }
                } else {
                    if (!editor.el.querySelector("*:not(.fr-marker):not(br)")) {
                        if (editor.core.hasFocus()) {
                            editor.$el.html($.FE.MARKERS + "<br/>");
                            editor.selection.restore();
                        } else {
                            editor.$el.html("<br/>");
                        }
                    }
                }
            }
        }
        /**
         * @param {!Object} url
         * @param {string} type
         * @return {?}
         */
        function fn(url, type) {
            return test(url, "<" + type + "[^>]*?>([\\w\\W]*)</" + type + ">", 1);
        }
        /**
         * @param {!Object} e
         * @param {string} version
         * @return {?}
         */
        function select(e, version) {
            var $zeroclipboardflash = $("<div " + (test(e, "<" + version + "([^>]*?)>", 1) || "") + ">");
            return editor.node.rawAttributes($zeroclipboardflash.get(0));
        }
        /**
         * @param {!Object} array
         * @return {?}
         */
        function toString(array) {
            return (test(array, "<!DOCTYPE([^>]*?)>", 0) || "<!DOCTYPE html>").replace(/\n/g, " ").replace(/ {2,}/g, " ");
        }
        /**
         * @param {!Object} data
         * @param {number} options
         * @return {undefined}
         */
        function log(data, options) {
            if (editor.opts.htmlExecuteScripts) {
                data.html(options);
            } else {
                /** @type {number} */
                data.get(0).innerHTML = options;
            }
        }
        /**
         * @param {string} r
         * @return {?}
         */
        function getValue(r) {
            var w;
            if ((w = /:not\(([^\)]*)\)/g).test(r)) {
                r = r.replace(w, "     $1 ");
            }
            var shtStart = 100 * (r.match(/(#[^\s\+>~\.\[:]+)/g) || []).length + 10 * (r.match(/(\[[^\]]+\])/g) || []).length + 10 * (r.match(/(\.[^\s\+>~\.\[:]+)/g) || []).length + 10 * (r.match(/(:[\w-]+\([^\)]*\))/gi) || []).length + 10 * (r.match(/(:[^\s\+>~\.\[:]+)/g) || []).length + (r.match(/(::[^\s\+>~\.\[:]+|:first-line|:first-letter|:before|:after)/gi) || []).length;
            return shtStart = shtStart + ((r = (r = r.replace(/[\*\s\+>~]/g, " ")).replace(/[#\.]/g, " ")).match(/([^\s\+>~\.\[:]+)/g) || []).length;
        }
        /**
         * @param {!Object} node
         * @return {undefined}
         */
        function callback(node) {
            if (editor.events.trigger("html.processGet", [node]), node && node.getAttribute && "" === node.getAttribute("class") && node.removeAttribute("class"), node && node.getAttribute && "" === node.getAttribute("style") && node.removeAttribute("style"), node && node.nodeType == Node.ELEMENT_NODE) {
                var layer_i;
                var crossfilterable_layers = node.querySelectorAll('[class=""],[style=""]');
                /** @type {number} */
                layer_i = 0;
                for (; layer_i < crossfilterable_layers.length; layer_i++) {
                    var field = crossfilterable_layers[layer_i];
                    if ("" === field.getAttribute("class")) {
                        field.removeAttribute("class");
                    }
                    if ("" === field.getAttribute("style")) {
                        field.removeAttribute("style");
                    }
                }
                if ("BR" === node.tagName) {
                    update(node);
                } else {
                    var crossfilterable_layers = node.querySelectorAll("br");
                    /** @type {number} */
                    layer_i = 0;
                    for (; layer_i < crossfilterable_layers.length; layer_i++) {
                        update(crossfilterable_layers[layer_i]);
                    }
                }
            }
        }
        /**
         * @param {!Array} subtractor
         * @param {!Array} subtractee
         * @return {?}
         */
        function bySimilarity(subtractor, subtractee) {
            return subtractor[3] - subtractee[3];
        }
        /**
         * @param {number} e
         * @return {?}
         */
        function get(e) {
            var d = editor.doc.createElement("div");
            return d.innerHTML = e, null !== d.querySelector(wrap());
        }
        /**
         * @param {!Array} isZoom
         * @return {?}
         */
        function refresh(isZoom) {
            /** @type {null} */
            var box = null;
            if (void 0 === isZoom && (box = editor.selection.element()), editor.opts.keepFormatOnDelete) {
                return false;
            }
            var atlines;
            var r;
            /** @type {number} */
            var disableHeightInput = box ? (box.textContent.match(/\u200B/g) || []).length - box.querySelectorAll(".fr-marker").length : 0;
            if ((editor.el.textContent.match(/\u200B/g) || []).length - editor.el.querySelectorAll(".fr-marker").length == disableHeightInput) {
                return false;
            }
            do {
                /** @type {boolean} */
                r = false;
                atlines = editor.el.querySelectorAll("*:not(.fr-marker)");
                /** @type {number} */
                var i = 0;
                for (; i < atlines.length; i++) {
                    var a = atlines[i];
                    if (box != a) {
                        var s = a.textContent;
                        if (0 === a.children.length && 1 === s.length && 8203 == s.charCodeAt(0) && "TD" !== a.tagName) {
                            $(a).remove();
                            /** @type {boolean} */
                            r = true;
                        }
                    }
                }
            } while (r);
        }
        return {
            defaultTag : success,
            isPreformatted : getStyle,
            emptyBlocks : compile,
            emptyBlockTagsQuery : function() {
                return $.FE.BLOCK_TAGS.join(":empty, ") + ":empty";
            },
            blockTagsQuery : wrap,
            fillEmptyBlocks : function(element) {
                var result = compile(element);
                /** @type {number} */
                var i = 0;
                for (; i < result.length; i++) {
                    var element = result[i];
                    if (!("false" === element.getAttribute("contenteditable") || element.querySelector(editor.opts.htmlAllowedEmptyTags.join(":not(.fr-marker),") + ":not(.fr-marker)") || editor.node.isVoid(element))) {
                        if ("TABLE" != element.tagName && "TBODY" != element.tagName && "TR" != element.tagName && "UL" != element.tagName && "OL" != element.tagName) {
                            element.appendChild(editor.doc.createElement("br"));
                        }
                    }
                }
                if (editor.browser.msie && editor.opts.enter == $.FE.ENTER_BR) {
                    var lastContentNode = editor.node.contents(editor.el);
                    if (lastContentNode.length && lastContentNode[lastContentNode.length - 1].nodeType == Node.TEXT_NODE) {
                        editor.$el.append("<br>");
                    }
                }
            },
            cleanEmptyTags : _init,
            cleanWhiteTags : refresh,
            cleanBlankSpaces : init,
            blocks : function() {
                return editor.$el.get(0).querySelectorAll(wrap());
            },
            getDoctype : walk,
            set : function(delimiter) {
                var prefixpart;
                var document;
                var publicPieces;
                var value = editor.clean.html((delimiter || "").trim(), [], [], editor.opts.fullPage);
                if (editor.opts.fullPage) {
                    var filename = fn(value, "body") || (0 <= value.indexOf("<body") ? "" : value);
                    var node = select(value, "body");
                    var data = fn(value, "head") || "<title></title>";
                    var p = select(value, "head");
                    var tmp_flow_path = $("<div>").append(data).contents().each(function() {
                        if (this.nodeType == Node.COMMENT_NODE || 0 <= ["BASE", "LINK", "META", "NOSCRIPT", "SCRIPT", "STYLE", "TEMPLATE", "TITLE"].indexOf(this.tagName)) {
                            this.parentNode.removeChild(this);
                        }
                    }).end().html().trim();
                    data = $("<div>").append(data).contents().map(function() {
                        return this.nodeType == Node.COMMENT_NODE ? "\x3c!--" + this.nodeValue + "--\x3e" : 0 <= ["BASE", "LINK", "META", "NOSCRIPT", "SCRIPT", "STYLE", "TEMPLATE", "TITLE"].indexOf(this.tagName) ? this.outerHTML : "";
                    }).toArray().join("");
                    var searchValue = toString(value);
                    var element = select(value, "html");
                    log(editor.$el, tmp_flow_path + "\n" + filename);
                    editor.node.clearAttributes(editor.el);
                    editor.$el.attr(node);
                    editor.$el.addClass("fr-view");
                    editor.$el.attr("spellcheck", editor.opts.spellcheck);
                    editor.$el.attr("dir", editor.opts.direction);
                    log(editor.$head, data);
                    editor.node.clearAttributes(editor.$head.get(0));
                    editor.$head.attr(p);
                    editor.node.clearAttributes(editor.$html.get(0));
                    editor.$html.attr(element);
                    editor.iframe_document.doctype.parentNode.replaceChild((prefixpart = searchValue, document = editor.iframe_document, (publicPieces = prefixpart.match(/<!DOCTYPE ?([^ ]*) ?([^ ]*) ?"?([^"]*)"? ?"?([^"]*)"?>/i)) ? document.implementation.createDocumentType(publicPieces[1], publicPieces[3], publicPieces[4]) : document.implementation.createDocumentType("html")), editor.iframe_document.doctype);
                } else {
                    log(editor.$el, value);
                }
                var p = editor.edit.isDisabled();
                editor.edit.on();
                editor.core.injectStyle(editor.opts.iframeDefaultStyle + editor.opts.iframeStyle);
                render();
                if (!editor.opts.useClasses) {
                    editor.$el.find("[fr-original-class]").each(function() {
                        this.setAttribute("class", this.getAttribute("fr-original-class"));
                        this.removeAttribute("fr-original-class");
                    });
                    editor.$el.find("[fr-original-style]").each(function() {
                        this.setAttribute("style", this.getAttribute("fr-original-style"));
                        this.removeAttribute("fr-original-style");
                    });
                }
                if (p) {
                    editor.edit.off();
                }
                editor.events.trigger("html.set");
            },
            get : function(name, mat) {
                if (!editor.$wp) {
                    return editor.$oel.clone().removeClass("fr-view").removeAttr("contenteditable").get(0).outerHTML;
                }
                /** @type {string} */
                var r = "";
                editor.events.trigger("html.beforeGet");
                var i;
                var j;
                /** @type {!Array} */
                var elms = [];
                var ret = {};
                /** @type {!Array} */
                var result = [];
                var myCells = editor.el.querySelectorAll("input, textarea");
                /** @type {number} */
                i = 0;
                for (; i < myCells.length; i++) {
                    myCells[i].setAttribute("value", myCells[i].value);
                }
                if (!editor.opts.useClasses && !mat) {
                    /** @type {!RegExp} */
                    var wordsReg = new RegExp("^" + editor.opts.htmlIgnoreCSSProperties.join("$|^") + "$", "gi");
                    /** @type {number} */
                    i = 0;
                    for (; i < editor.doc.styleSheets.length; i++) {
                        var rules;
                        /** @type {number} */
                        var magF = 0;
                        try {
                            rules = editor.doc.styleSheets[i].cssRules;
                            if (editor.doc.styleSheets[i].ownerNode && "STYLE" == editor.doc.styleSheets[i].ownerNode.nodeType) {
                                /** @type {number} */
                                magF = 1;
                            }
                        } catch ($) {
                        }
                        if (rules) {
                            /** @type {number} */
                            var i = 0;
                            var rulesCount = rules.length;
                            for (; i < rulesCount; i++) {
                                if (rules[i].selectorText && 0 < rules[i].style.cssText.length) {
                                    var el;
                                    var query = rules[i].selectorText.replace(/body |\.fr-view /g, "").replace(/::/g, ":");
                                    try {
                                        el = editor.el.querySelectorAll(query);
                                    } catch ($) {
                                        /** @type {!Array} */
                                        el = [];
                                    }
                                    /** @type {number} */
                                    j = 0;
                                    for (; j < el.length; j++) {
                                        if (!el[j].getAttribute("fr-original-style") && el[j].getAttribute("style")) {
                                            el[j].setAttribute("fr-original-style", el[j].getAttribute("style"));
                                            elms.push(el[j]);
                                        } else {
                                            if (!el[j].getAttribute("fr-original-style")) {
                                                el[j].setAttribute("fr-original-style", "");
                                                elms.push(el[j]);
                                            }
                                        }
                                        if (!ret[el[j]]) {
                                            ret[el[j]] = {};
                                        }
                                        var x = 1E3 * magF + getValue(rules[i].selectorText);
                                        var sibs = rules[i].style.cssText.split(";");
                                        /** @type {number} */
                                        var sibi = 0;
                                        for (; sibi < sibs.length; sibi++) {
                                            var i = sibs[sibi].trim().split(":")[0];
                                            if (i && !i.match(wordsReg) && (ret[el[j]][i] || (ret[el[j]][i] = 0) <= (el[j].getAttribute("fr-original-style") || "").indexOf(i + ":") && (ret[el[j]][i] = 1E4), x >= ret[el[j]][i] && (ret[el[j]][i] = x, sibs[sibi].trim().length))) {
                                                var outChance = sibs[sibi].trim().split(":");
                                                outChance.splice(0, 1);
                                                result.push([el[j], i.trim(), outChance.join(":").trim(), x]);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    result.sort(bySimilarity);
                    /** @type {number} */
                    i = 0;
                    for (; i < result.length; i++) {
                        var value = result[i];
                        value[0].style[value[1]] = value[2];
                    }
                    /** @type {number} */
                    i = 0;
                    for (; i < elms.length; i++) {
                        if (elms[i].getAttribute("class") && (elms[i].setAttribute("fr-original-class", elms[i].getAttribute("class")), elms[i].removeAttribute("class")), 0 < (elms[i].getAttribute("fr-original-style") || "").trim().length) {
                            var expandItems = elms[i].getAttribute("fr-original-style").split(";");
                            /** @type {number} */
                            j = 0;
                            for (; j < expandItems.length; j++) {
                                if (0 < expandItems[j].indexOf(":")) {
                                    var conditions = expandItems[j].split(":");
                                    var item = conditions[0];
                                    conditions.splice(0, 1);
                                    elms[i].style[item.trim()] = conditions.join(":").trim();
                                }
                            }
                        }
                    }
                }
                if (editor.node.isEmpty(editor.el)) {
                    if (editor.opts.fullPage) {
                        r = walk(editor.iframe_document);
                        /** @type {string} */
                        r = r + ("<html" + editor.node.attributes(editor.$html.get(0)) + ">" + editor.$html.find("head").get(0).outerHTML + "<body></body></html>");
                    }
                } else {
                    if (void 0 === name && (name = false), editor.opts.fullPage) {
                        r = walk(editor.iframe_document);
                        editor.$el.removeClass("fr-view");
                        var A = editor.opts.heightMin;
                        /** @type {null} */
                        editor.opts.heightMin = null;
                        editor.size.refresh();
                        /** @type {string} */
                        r = r + ("<html" + editor.node.attributes(editor.$html.get(0)) + ">" + editor.$html.html() + "</html>");
                        editor.opts.heightMin = A;
                        editor.size.refresh();
                        editor.$el.addClass("fr-view");
                    } else {
                        r = editor.$el.html();
                    }
                }
                if (!editor.opts.useClasses && !mat) {
                    /** @type {number} */
                    i = 0;
                    for (; i < elms.length; i++) {
                        if (elms[i].getAttribute("fr-original-class")) {
                            elms[i].setAttribute("class", elms[i].getAttribute("fr-original-class"));
                            elms[i].removeAttribute("fr-original-class");
                        }
                        if (null != elms[i].getAttribute("fr-original-style") && void 0 !== elms[i].getAttribute("fr-original-style")) {
                            if (0 !== elms[i].getAttribute("fr-original-style").length) {
                                elms[i].setAttribute("style", elms[i].getAttribute("fr-original-style"));
                            } else {
                                elms[i].removeAttribute("style");
                            }
                            elms[i].removeAttribute("fr-original-style");
                        } else {
                            elms[i].removeAttribute("style");
                        }
                    }
                }
                if (editor.opts.fullPage) {
                    r = (r = (r = (r = (r = (r = (r = (r = r.replace(/<style data-fr-style="true">(?:[\w\W]*?)<\/style>/g, "")).replace(/<link([^>]*)data-fr-style="true"([^>]*)>/g, "")).replace(/<style(?:[\w\W]*?)class="firebugResetStyles"(?:[\w\W]*?)>(?:[\w\W]*?)<\/style>/g, "")).replace(/<body((?:[\w\W]*?)) spellcheck="true"((?:[\w\W]*?))>((?:[\w\W]*?))<\/body>/g, "<body$1$2>$3</body>")).replace(/<body((?:[\w\W]*?)) contenteditable="(true|false)"((?:[\w\W]*?))>((?:[\w\W]*?))<\/body>/g, "<body$1$3>$4</body>")).replace(/<body((?:[\w\W]*?)) dir="([\w]*)"((?:[\w\W]*?))>((?:[\w\W]*?))<\/body>/g,
                        "<body$1$3>$4</body>")).replace(/<body((?:[\w\W]*?))class="([\w\W]*?)(fr-rtl|fr-ltr)([\w\W]*?)"((?:[\w\W]*?))>((?:[\w\W]*?))<\/body>/g, '<body$1class="$2$4"$5>$6</body>')).replace(/<body((?:[\w\W]*?)) class=""((?:[\w\W]*?))>((?:[\w\W]*?))<\/body>/g, "<body$1$2>$3</body>");
                }
                if (editor.opts.htmlSimpleAmpersand) {
                    r = r.replace(/&amp;/gi, "&");
                }
                editor.events.trigger("html.afterGet");
                if (!name) {
                    r = r.replace(/<span[^>]*? class\s*=\s*["']?fr-marker["']?[^>]+>\u200b<\/span>/gi, "");
                }
                r = editor.clean.invisibleSpaces(r);
                r = editor.clean.exec(r, callback);
                var q = editor.events.chainTrigger("html.get", r);
                return "string" == typeof q && (r = q), r = r.replace(/<pre(?:[\w\W]*?)>(?:[\w\W]*?)<\/pre>/g, function(commaParam) {
                    return commaParam.replace(/<br>/g, "\n");
                });
            },
            getSelected : function() {
                var sel;
                var el;
                /**
                 * @param {!Element} node
                 * @param {!Node} child
                 * @return {undefined}
                 */
                var wrap = function(node, child) {
                    for (; child && (child.nodeType == Node.TEXT_NODE || !editor.node.isBlock(child)) && !editor.node.isElement(child) && !editor.node.hasClass(child, "fr-inner");) {
                        if (child && child.nodeType != Node.TEXT_NODE) {
                            $(node).wrapInner(editor.node.openTagString(child) + editor.node.closeTagString(child));
                        }
                        child = child.parentNode;
                    }
                    if (child && node.innerHTML == child.innerHTML) {
                        node.innerHTML = child.outerHTML;
                    }
                };
                /** @type {string} */
                var result = "";
                if ("undefined" != typeof editor.win.getSelection) {
                    if (editor.browser.mozilla) {
                        editor.selection.save();
                        if (1 < editor.$el.find('.fr-marker[data-type="false"]').length) {
                            editor.$el.find('.fr-marker[data-type="false"][data-id="0"]').remove();
                            editor.$el.find('.fr-marker[data-type="false"]:last').attr("data-id", "0");
                            editor.$el.find(".fr-marker").not('[data-id="0"]').remove();
                        }
                        editor.selection.restore();
                    }
                    var keywordResults = editor.selection.ranges();
                    /** @type {number} */
                    var i = 0;
                    for (; i < keywordResults.length; i++) {
                        /** @type {!Element} */
                        var element = document.createElement("div");
                        element.appendChild(keywordResults[i].cloneContents());
                        wrap(element, (el = sel = void 0, el = null, editor.win.getSelection ? (sel = editor.win.getSelection()) && sel.rangeCount && (el = sel.getRangeAt(0).commonAncestorContainer).nodeType != Node.ELEMENT_NODE && (el = el.parentNode) : (sel = editor.doc.selection) && "Control" != sel.type && (el = sel.createRange().parentElement()), null != el && (0 <= $.inArray(editor.el, $(el).parents()) || el == editor.el) ? el : null));
                        if (0 < $(element).find(".fr-element").length) {
                            element = editor.el;
                        }
                        /** @type {string} */
                        result = result + element.innerHTML;
                    }
                } else {
                    if ("undefined" != typeof editor.doc.selection && "Text" == editor.doc.selection.type) {
                        result = editor.doc.selection.createRange().htmlText;
                    }
                }
                return result;
            },
            insert : function(x, done, start) {
                var value;
                var p;
                var tmp;
                if (editor.selection.isCollapsed() || editor.selection.remove(), value = done ? x : editor.clean.html(x), x.indexOf('class="fr-marker"') < 0 && (p = value, (tmp = editor.doc.createElement("div")).innerHTML = p, editor.selection.setAtEnd(tmp), value = tmp.innerHTML), editor.node.isEmpty(editor.el) && !editor.opts.keepFormatOnDelete && get(value)) {
                    editor.el.innerHTML = value;
                } else {
                    var div = editor.markers.insert();
                    if (div) {
                        if (editor.node.isLastSibling(div) && $(div).parent().hasClass("fr-deletable")) {
                            $(div).insertAfter($(div).parent());
                        }
                        var noNS = editor.node.blockParent(div);
                        if ((get(value) || start) && (editor.node.deepestParent(div) || noNS && "LI" == noNS.tagName)) {
                            if (noNS && "LI" == noNS.tagName && (value = function(value) {
                                    if (!editor.html.defaultTag()) {
                                        return value;
                                    }
                                    var parent = editor.doc.createElement("div");
                                    /** @type {string} */
                                    parent.innerHTML = value;
                                    var forgottenTemplates = parent.querySelectorAll(":scope > " + editor.html.defaultTag());
                                    /** @type {number} */
                                    var i = forgottenTemplates.length - 1;
                                    for (; 0 <= i; i--) {
                                        var el = forgottenTemplates[i];
                                        if (!editor.node.isBlock(el.previousSibling)) {
                                            if (el.previousSibling && !editor.node.isEmpty(el)) {
                                                $("<br>").insertAfter(el.previousSibling);
                                            }
                                            el.outerHTML = el.innerHTML;
                                        }
                                    }
                                    return parent.innerHTML;
                                }(value)), !(div = editor.markers.split())) {
                                return false;
                            }
                            div.outerHTML = value;
                        } else {
                            div.outerHTML = value;
                        }
                    } else {
                        editor.el.innerHTML = editor.el.innerHTML + value;
                    }
                }
                render();
                editor.keys.positionCaret();
                editor.events.trigger("html.inserted");
            },
            wrap : resize,
            unwrap : function() {
                editor.$el.find("div.fr-temp-div").each(function() {
                    if (this.previousSibling && this.previousSibling.nodeType === Node.TEXT_NODE) {
                        $(this).before("<br>");
                    }
                    if ($(this).attr("data-empty") || !this.nextSibling || editor.node.isBlock(this.nextSibling) && !$(this.nextSibling).hasClass("fr-temp-div")) {
                        $(this).replaceWith($(this).html());
                    } else {
                        $(this).replaceWith($(this).html() + "<br>");
                    }
                });
                editor.$el.find(".fr-temp-div").removeClass("fr-temp-div").filter(function() {
                    return "" === $(this).attr("class");
                }).removeAttr("class");
            },
            escapeEntities : function(text) {
                return text.replace(/</gi, "&lt;").replace(/>/gi, "&gt;").replace(/"/gi, "&quot;").replace(/'/gi, "&#39;");
            },
            checkIfEmpty : remove,
            extractNode : fn,
            extractNodeAttrs : select,
            extractDoctype : toString,
            cleanBRs : function() {
                var crossfilterable_layers = editor.el.getElementsByTagName("br");
                /** @type {number} */
                var layer_i = 0;
                for (; layer_i < crossfilterable_layers.length; layer_i++) {
                    update(crossfilterable_layers[layer_i]);
                }
            },
            _init : function() {
                if (editor.$wp) {
                    /**
                     * @return {undefined}
                     */
                    var onLayerUpdate = function() {
                        refresh();
                        if (editor.placeholder) {
                            setTimeout(editor.placeholder.refresh, 0);
                        }
                    };
                    editor.events.on("mouseup", onLayerUpdate);
                    editor.events.on("keydown", onLayerUpdate);
                    editor.events.on("contentChanged", remove);
                }
            }
        };
    };
    $.extend($.FE.DEFAULTS, {
        height : null,
        heightMax : null,
        heightMin : null,
        width : null
    });
    /**
     * @param {!Object} editor
     * @return {?}
     */
    $.FE.MODULES.size = function(editor) {
        /**
         * @return {undefined}
         */
        function resize() {
            init();
            if (editor.opts.height) {
                editor.$el.css("minHeight", editor.opts.height - editor.helpers.getPX(editor.$el.css("padding-top")) - editor.helpers.getPX(editor.$el.css("padding-bottom")));
            }
            editor.$iframe.height(editor.$el.outerHeight(true));
        }
        /**
         * @return {undefined}
         */
        function init() {
            if (editor.opts.heightMin) {
                editor.$el.css("minHeight", editor.opts.heightMin);
            } else {
                editor.$el.css("minHeight", "");
            }
            if (editor.opts.heightMax) {
                editor.$wp.css("maxHeight", editor.opts.heightMax);
                editor.$wp.css("overflow", "auto");
            } else {
                editor.$wp.css("maxHeight", "");
                editor.$wp.css("overflow", "");
            }
            if (editor.opts.height) {
                editor.$wp.height(editor.opts.height);
                editor.$wp.css("overflow", "auto");
                editor.$el.css("minHeight", editor.opts.height - editor.helpers.getPX(editor.$el.css("padding-top")) - editor.helpers.getPX(editor.$el.css("padding-bottom")));
            } else {
                editor.$wp.css("height", "");
                if (!editor.opts.heightMin) {
                    editor.$el.css("minHeight", "");
                }
                if (!editor.opts.heightMax) {
                    editor.$wp.css("overflow", "");
                }
            }
            if (editor.opts.width) {
                editor.$box.width(editor.opts.width);
            }
        }
        return {
            _init : function() {
                if (!editor.$wp) {
                    return false;
                }
                init();
                if (editor.$iframe) {
                    editor.events.on("keyup keydown", function() {
                        setTimeout(resize, 0);
                    }, true);
                    editor.events.on("commands.after html.set init initialized paste.after", resize);
                }
            },
            syncIframe : resize,
            refresh : init
        };
    };
    $.extend($.FE.DEFAULTS, {
        language : null
    });
    $.FE.LANGUAGE = {};
    /**
     * @param {!Object} data
     * @return {?}
     */
    $.FE.MODULES.language = function(data) {
        var options;
        return {
            _init : function() {
                if ($.FE.LANGUAGE) {
                    options = $.FE.LANGUAGE[data.opts.language];
                }
                if (options && options.direction) {
                    data.opts.direction = options.direction;
                }
            },
            translate : function(key) {
                return options && options.translation[key] && options.translation[key].length ? options.translation[key] : key;
            }
        };
    };
    $.extend($.FE.DEFAULTS, {
        placeholderText : "Type something"
    });
    /**
     * @param {!Object} self
     * @return {?}
     */
    $.FE.MODULES.placeholder = function(self) {
        /**
         * @return {undefined}
         */
        function init() {
            if (!self.$placeholder) {
                self.$placeholder = $('<span class="fr-placeholder"></span>');
                self.$wp.append(self.$placeholder);
            }
            var add = self.opts.iframe ? self.$iframe.prev().outerHeight(true) : self.$el.prev().outerHeight(true);
            /** @type {number} */
            var index = 0;
            /** @type {number} */
            var fieldPanelLength = 0;
            /** @type {number} */
            var maxPrimaryDepth = 0;
            /** @type {number} */
            var dateOrdersChanged = 0;
            /** @type {number} */
            var maxExistIndex = 0;
            /** @type {number} */
            var minimumSpace = 0;
            var chldrn = self.node.contents(self.el);
            var align = $(self.selection.element()).css("text-align");
            if (chldrn.length && chldrn[0].nodeType == Node.ELEMENT_NODE) {
                var element = $(chldrn[0]);
                if ((!self.opts.toolbarInline || 0 < self.$el.prev().length) && self.ready) {
                    index = self.helpers.getPX(element.css("margin-top"));
                    dateOrdersChanged = self.helpers.getPX(element.css("padding-top"));
                    fieldPanelLength = self.helpers.getPX(element.css("margin-left"));
                    maxPrimaryDepth = self.helpers.getPX(element.css("margin-right"));
                    maxExistIndex = self.helpers.getPX(element.css("padding-left"));
                    minimumSpace = self.helpers.getPX(element.css("padding-right"));
                }
                self.$placeholder.css("font-size", element.css("font-size"));
                self.$placeholder.css("line-height", element.css("line-height"));
            } else {
                self.$placeholder.css("font-size", self.$el.css("font-size"));
                self.$placeholder.css("line-height", self.$el.css("line-height"));
            }
            self.$wp.addClass("show-placeholder");
            self.$placeholder.css({
                marginTop : Math.max(self.helpers.getPX(self.$el.css("margin-top")), index) + (add || 0),
                paddingTop : Math.max(self.helpers.getPX(self.$el.css("padding-top")), dateOrdersChanged),
                paddingLeft : Math.max(self.helpers.getPX(self.$el.css("padding-left")), maxExistIndex),
                marginLeft : Math.max(self.helpers.getPX(self.$el.css("margin-left")), fieldPanelLength),
                paddingRight : Math.max(self.helpers.getPX(self.$el.css("padding-right")), minimumSpace),
                marginRight : Math.max(self.helpers.getPX(self.$el.css("margin-right")), maxPrimaryDepth),
                textAlign : align
            }).text(self.language.translate(self.opts.placeholderText || self.$oel.attr("placeholder") || ""));
            self.$placeholder.html(self.$placeholder.text().replace(/\n/g, "<br>"));
        }
        /**
         * @return {undefined}
         */
        function hide() {
            self.$wp.removeClass("show-placeholder");
        }
        /**
         * @return {?}
         */
        function update() {
            if (!self.$wp) {
                return false;
            }
            if (self.core.isEmpty()) {
                init();
            } else {
                hide();
            }
        }
        return {
            _init : function() {
                if (!self.$wp) {
                    return false;
                }
                self.events.on("init input keydown keyup contentChanged initialized", update);
            },
            show : init,
            hide : hide,
            refresh : update,
            isVisible : function() {
                return !self.$wp || self.node.hasClass(self.$wp.get(0), "show-placeholder");
            }
        };
    };
    /**
     * @param {!Object} editor
     * @return {?}
     */
    $.FE.MODULES.edit = function(editor) {
        /**
         * @return {undefined}
         */
        function init() {
            if (editor.browser.mozilla) {
                try {
                    editor.doc.execCommand("enableObjectResizing", false, "false");
                    editor.doc.execCommand("enableInlineTableEditing", false, "false");
                } catch (e) {
                }
            }
            if (editor.browser.msie) {
                try {
                    editor.doc.body.addEventListener("mscontrolselect", function(event) {
                        return event.preventDefault(), false;
                    });
                } catch (e) {
                }
            }
        }
        /**
         * @return {?}
         */
        function select() {
            return selected;
        }
        /** @type {boolean} */
        var selected = false;
        return {
            _init : function() {
                editor.events.on("focus", function() {
                    if (select()) {
                        editor.edit.off();
                    } else {
                        editor.edit.on();
                    }
                });
            },
            on : function() {
                if (editor.$wp) {
                    editor.$el.attr("contenteditable", true);
                    editor.$el.removeClass("fr-disabled").attr("aria-disabled", false);
                    if (editor.$tb) {
                        editor.$tb.removeClass("fr-disabled").removeAttr("aria-disabled");
                    }
                    init();
                } else {
                    if (editor.$el.is("a")) {
                        editor.$el.attr("contenteditable", true);
                    }
                }
                /** @type {boolean} */
                selected = false;
            },
            off : function() {
                editor.events.disableBlur();
                if (editor.$wp) {
                    editor.$el.attr("contenteditable", false);
                    editor.$el.addClass("fr-disabled").attr("aria-disabled", true);
                    if (editor.$tb) {
                        editor.$tb.addClass("fr-disabled").attr("aria-disabled", true);
                    }
                } else {
                    if (editor.$el.is("a")) {
                        editor.$el.attr("contenteditable", false);
                    }
                }
                editor.events.enableBlur();
                /** @type {boolean} */
                selected = true;
            },
            disableDesign : init,
            isDisabled : select
        };
    };
    $.extend($.FE.DEFAULTS, {
        editorClass : null,
        typingTimer : 500,
        iframe : false,
        requestWithCORS : true,
        requestWithCredentials : false,
        requestHeaders : {},
        useClasses : true,
        spellcheck : true,
        iframeDefaultStyle : 'html{margin:0px;height:auto;}body{height:auto;padding:10px;background:transparent;color:#000000;position:relative;z-index: 2;-webkit-user-select:auto;margin:0px;overflow:hidden;min-height:20px;}body:after{content:"";display:block;clear:both;}body::-moz-selection{background:#b5d6fd;color:#000;}body::selection{background:#b5d6fd;color:#000;}',
        iframeStyle : "",
        iframeStyleFiles : [],
        direction : "auto",
        zIndex : 1,
        tabIndex : null,
        disableRightClick : false,
        scrollableContainer : "body",
        keepFormatOnDelete : false,
        theme : null
    });
    /**
     * @param {!Object} editor
     * @return {?}
     */
    $.FE.MODULES.core = function(editor) {
        /**
         * @return {undefined}
         */
        function init() {
            if (editor.$box.addClass("fr-box" + (editor.opts.editorClass ? " " + editor.opts.editorClass : "")), editor.$box.attr("role", "application"), editor.$wp.addClass("fr-wrapper"), editor.opts.iframe || editor.$el.addClass("fr-element fr-view"), editor.opts.iframe) {
                editor.$iframe.addClass("fr-iframe");
                editor.$el.addClass("fr-view");
                /** @type {number} */
                var i = 0;
                for (; i < editor.o_doc.styleSheets.length; i++) {
                    var rules;
                    try {
                        rules = editor.o_doc.styleSheets[i].cssRules;
                    } catch (o) {
                    }
                    if (rules) {
                        /** @type {number} */
                        var i = 0;
                        var rulesCount = rules.length;
                        for (; i < rulesCount; i++) {
                            if (!(!rules[i].selectorText || 0 !== rules[i].selectorText.indexOf(".fr-view") && 0 !== rules[i].selectorText.indexOf(".fr-element"))) {
                                if (0 < rules[i].style.cssText.length) {
                                    if (0 === rules[i].selectorText.indexOf(".fr-view")) {
                                        editor.opts.iframeStyle += rules[i].selectorText.replace(/\.fr-view/g, "body") + "{" + rules[i].style.cssText + "}";
                                    } else {
                                        editor.opts.iframeStyle += rules[i].selectorText.replace(/\.fr-element/g, "body") + "{" + rules[i].style.cssText + "}";
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if ("auto" != editor.opts.direction) {
                editor.$box.removeClass("fr-ltr fr-rtl").addClass("fr-" + editor.opts.direction);
            }
            editor.$el.attr("dir", editor.opts.direction);
            editor.$wp.attr("dir", editor.opts.direction);
            if (1 < editor.opts.zIndex) {
                editor.$box.css("z-index", editor.opts.zIndex);
            }
            if (editor.opts.theme) {
                editor.$box.addClass(editor.opts.theme + "-theme");
            }
            editor.opts.tabIndex = editor.opts.tabIndex || editor.$oel.attr("tabIndex");
            if (editor.opts.tabIndex) {
                editor.$el.attr("tabIndex", editor.opts.tabIndex);
            }
        }
        return {
            _init : function() {
                if ($.FE.INSTANCES.push(editor), editor.drag_support = {
                        filereader : "undefined" != typeof FileReader,
                        formdata : !!editor.win.FormData,
                        progress : "upload" in new XMLHttpRequest
                    }, editor.$wp) {
                    init();
                    editor.html.set(editor._original_html);
                    editor.$el.attr("spellcheck", editor.opts.spellcheck);
                    if (editor.helpers.isMobile()) {
                        editor.$el.attr("autocomplete", editor.opts.spellcheck ? "on" : "off");
                        editor.$el.attr("autocorrect", editor.opts.spellcheck ? "on" : "off");
                        editor.$el.attr("autocapitalize", editor.opts.spellcheck ? "on" : "off");
                    }
                    if (editor.opts.disableRightClick) {
                        editor.events.$on(editor.$el, "contextmenu", function(event) {
                            if (2 == event.button) {
                                return false;
                            }
                        });
                    }
                    try {
                        editor.doc.execCommand("styleWithCSS", false, false);
                    } catch (e) {
                    }
                }
                if ("TEXTAREA" == editor.$oel.get(0).tagName) {
                    editor.events.on("contentChanged", function() {
                        editor.$oel.val(editor.html.get());
                    });
                    editor.events.on("form.submit", function() {
                        editor.$oel.val(editor.html.get());
                    });
                    editor.events.on("form.reset", function() {
                        editor.html.set(editor._original_html);
                    });
                    editor.$oel.val(editor.html.get());
                }
                if (editor.helpers.isIOS()) {
                    editor.events.$on(editor.$doc, "selectionchange", function() {
                        if (!editor.$doc.get(0).hasFocus()) {
                            editor.$win.get(0).focus();
                        }
                    });
                }
                editor.events.trigger("init");
                if (editor.opts.autofocus && !editor.opts.initOnClick && editor.$wp) {
                    editor.events.on("initialized", function() {
                        editor.events.focus(true);
                    });
                }
            },
            destroy : function(item) {
                if ("TEXTAREA" == editor.$oel.get(0).tagName) {
                    editor.$oel.val(item);
                }
                if (editor.$box) {
                    editor.$box.removeAttr("role");
                }
                if (editor.$wp) {
                    if ("TEXTAREA" == editor.$oel.get(0).tagName) {
                        editor.$el.html("");
                        editor.$wp.html("");
                        editor.$box.replaceWith(editor.$oel);
                        editor.$oel.show();
                    } else {
                        editor.$wp.replaceWith(item);
                        editor.$el.html("");
                        editor.$box.removeClass("fr-view fr-ltr fr-box " + (editor.opts.editorClass || ""));
                        if (editor.opts.theme) {
                            editor.$box.addClass(editor.opts.theme + "-theme");
                        }
                    }
                }
                /** @type {null} */
                this.$wp = null;
                /** @type {null} */
                this.$el = null;
                /** @type {null} */
                this.el = null;
                /** @type {null} */
                this.$box = null;
            },
            isEmpty : function() {
                return editor.node.isEmpty(editor.el);
            },
            getXHR : function(url, method) {
                /** @type {!XMLHttpRequest} */
                var xhr = new XMLHttpRequest;
                var i;
                for (i in xhr.open(method, url, true), editor.opts.requestWithCredentials && (xhr.withCredentials = true), editor.opts.requestHeaders) {
                    if (editor.opts.requestHeaders.hasOwnProperty(i)) {
                        xhr.setRequestHeader(i, editor.opts.requestHeaders[i]);
                    }
                }
                return xhr;
            },
            injectStyle : function(text) {
                if (editor.opts.iframe) {
                    editor.$head.find("style[data-fr-style], link[data-fr-style]").remove();
                    editor.$head.append('<style data-fr-style="true">' + text + "</style>");
                    /** @type {number} */
                    var layer_i = 0;
                    for (; layer_i < editor.opts.iframeStyleFiles.length; layer_i++) {
                        var n = $('<link data-fr-style="true" rel="stylesheet" href="' + editor.opts.iframeStyleFiles[layer_i] + '">');
                        n.get(0).addEventListener("load", editor.size.syncIframe);
                        editor.$head.append(n);
                    }
                }
            },
            hasFocus : function() {
                return editor.browser.mozilla && editor.helpers.isMobile() ? editor.selection.inEditor() : editor.node.hasFocus(editor.el) || 0 < editor.$el.find("*:focus").length;
            },
            sameInstance : function(item) {
                if (!item) {
                    return false;
                }
                var e = item.data("instance");
                return !!e && e.id == editor.id;
            }
        };
    };
    /**
     * @param {!Object} editor
     * @return {?}
     */
    $.FE.MODULES.cursorLists = function(editor) {
        /**
         * @param {!Node} target
         * @return {?}
         */
        function get(target) {
            /** @type {!Node} */
            var obj = target;
            for (; "LI" != obj.tagName;) {
                obj = obj.parentNode;
            }
            return obj;
        }
        /**
         * @param {?} node
         * @return {?}
         */
        function select(node) {
            var obj = node;
            for (; !editor.node.isList(obj);) {
                obj = obj.parentNode;
            }
            return obj;
        }
        return {
            _startEnter : function(obj) {
                var elem;
                var target = get(obj);
                var insertBeforeNode = target.nextSibling;
                var prevSibling = target.previousSibling;
                var packageByNameExists = editor.html.defaultTag();
                if (editor.node.isEmpty(target, true) && insertBeforeNode) {
                    /** @type {string} */
                    var query = "";
                    /** @type {string} */
                    var resp = "";
                    var node = obj.parentNode;
                    for (; !editor.node.isList(node) && node.parentNode && "LI" !== node.parentNode.tagName;) {
                        query = editor.node.openTagString(node) + query;
                        resp = resp + editor.node.closeTagString(node);
                        node = node.parentNode;
                    }
                    query = editor.node.openTagString(node) + query;
                    resp = resp + editor.node.closeTagString(node);
                    /** @type {string} */
                    var _ = "";
                    /** @type {string} */
                    _ = node.parentNode && "LI" == node.parentNode.tagName ? resp + "<li>" + $.FE.MARKERS + "<br>" + query : packageByNameExists ? resp + "<" + packageByNameExists + ">" + $.FE.MARKERS + "<br></" + packageByNameExists + ">" + query : resp + $.FE.MARKERS + "<br>" + query;
                    $(target).html('<span id="fr-break"></span>');
                    for (; ["UL", "OL"].indexOf(node.tagName) < 0 || node.parentNode && "LI" === node.parentNode.tagName;) {
                        node = node.parentNode;
                    }
                    var suggestedID = editor.node.openTagString(node) + $(node).html() + editor.node.closeTagString(node);
                    suggestedID = suggestedID.replace(/<span id="fr-break"><\/span>/g, _);
                    $(node).replaceWith(suggestedID);
                    editor.$el.find("li:empty").remove();
                } else {
                    if (prevSibling && insertBeforeNode || !editor.node.isEmpty(target, true)) {
                        /** @type {string} */
                        var name = "<br>";
                        var node = obj.parentNode;
                        for (; node && "LI" != node.tagName;) {
                            name = editor.node.openTagString(node) + name + editor.node.closeTagString(node);
                            node = node.parentNode;
                        }
                        $(target).before("<li>" + name + "</li>");
                        $(obj).remove();
                    } else {
                        if (prevSibling) {
                            elem = select(target);
                            /** @type {string} */
                            var s = $.FE.MARKERS + "<br>";
                            var node = obj.parentNode;
                            for (; node && "LI" != node.tagName;) {
                                s = editor.node.openTagString(node) + s + editor.node.closeTagString(node);
                                node = node.parentNode;
                            }
                            if (elem.parentNode && "LI" == elem.parentNode.tagName) {
                                $(elem.parentNode).after("<li>" + s + "</li>");
                            } else {
                                if (packageByNameExists) {
                                    $(elem).after("<" + packageByNameExists + ">" + s + "</" + packageByNameExists + ">");
                                } else {
                                    $(elem).after(s);
                                }
                            }
                            $(target).remove();
                        } else {
                            if ((elem = select(target)).parentNode && "LI" == elem.parentNode.tagName) {
                                if (insertBeforeNode) {
                                    $(elem.parentNode).before(editor.node.openTagString(target) + $.FE.MARKERS + "<br></li>");
                                } else {
                                    $(elem.parentNode).after(editor.node.openTagString(target) + $.FE.MARKERS + "<br></li>");
                                }
                            } else {
                                if (packageByNameExists) {
                                    $(elem).before("<" + packageByNameExists + ">" + $.FE.MARKERS + "<br></" + packageByNameExists + ">");
                                } else {
                                    $(elem).before($.FE.MARKERS + "<br>");
                                }
                            }
                            $(target).remove();
                        }
                    }
                }
            },
            _middleEnter : function(e) {
                var node = get(e);
                /** @type {string} */
                var i = "";
                /** @type {!Node} */
                var el = e;
                /** @type {string} */
                var v = "";
                /** @type {string} */
                var u = "";
                for (; el != node;) {
                    /** @type {string} */
                    var a = "A" == (el = el.parentNode).tagName && editor.cursor.isAtEnd(e, el) ? "fr-to-remove" : "";
                    v = editor.node.openTagString($(el).clone().addClass(a).get(0)) + v;
                    u = editor.node.closeTagString(el) + u;
                }
                /** @type {string} */
                i = u + i + v + $.FE.MARKERS + $.FE.INVISIBLE_SPACE;
                $(e).replaceWith('<span id="fr-break"></span>');
                var s = editor.node.openTagString(node) + $(node).html() + editor.node.closeTagString(node);
                s = s.replace(/<span id="fr-break"><\/span>/g, i);
                $(node).replaceWith(s);
            },
            _endEnter : function(t) {
                var container = get(t);
                var s = $.FE.MARKERS;
                /** @type {string} */
                var i = "";
                /** @type {!Node} */
                var node = t;
                /** @type {boolean} */
                var element = false;
                for (; node != container;) {
                    /** @type {string} */
                    var a = "A" == (node = node.parentNode).tagName && editor.cursor.isAtEnd(t, node) ? "fr-to-remove" : "";
                    if (!(element || node == container || editor.node.isBlock(node))) {
                        /** @type {boolean} */
                        element = true;
                        i = i + $.FE.INVISIBLE_SPACE;
                    }
                    i = editor.node.openTagString($(node).clone().addClass(a).get(0)) + i;
                    s = s + editor.node.closeTagString(node);
                }
                var val = i + s;
                $(t).remove();
                $(container).after(val);
            },
            _backspace : function(target) {
                var node = get(target);
                var element = node.previousSibling;
                if (element) {
                    element = $(element).find(editor.html.blockTagsQuery()).get(-1) || element;
                    $(target).replaceWith($.FE.MARKERS);
                    var r = editor.node.contents(element);
                    if (r.length && "BR" == r[r.length - 1].tagName) {
                        $(r[r.length - 1]).remove();
                    }
                    $(node).find(editor.html.blockTagsQuery()).not("ol, ul, table").each(function() {
                        if (this.parentNode == node) {
                            $(this).replaceWith($(this).html() + (editor.node.isEmpty(this) ? "" : "<br>"));
                        }
                    });
                    var n;
                    var o = editor.node.contents(node)[0];
                    for (; o && !editor.node.isList(o);) {
                        n = o.nextSibling;
                        $(element).append(o);
                        o = n;
                    }
                    element = node.previousSibling;
                    for (; o;) {
                        n = o.nextSibling;
                        $(element).append(o);
                        o = n;
                    }
                    $(node).remove();
                } else {
                    var el = select(node);
                    if ($(target).replaceWith($.FE.MARKERS), el.parentNode && "LI" == el.parentNode.tagName) {
                        var n = el.previousSibling;
                        if (editor.node.isBlock(n)) {
                            $(node).find(editor.html.blockTagsQuery()).not("ol, ul, table").each(function() {
                                if (this.parentNode == node) {
                                    $(this).replaceWith($(this).html() + (editor.node.isEmpty(this) ? "" : "<br>"));
                                }
                            });
                            $(n).append($(node).html());
                        } else {
                            $(el).before($(node).html());
                        }
                    } else {
                        var l = editor.html.defaultTag();
                        if (l && 0 === $(node).find(editor.html.blockTagsQuery()).length) {
                            $(el).before("<" + l + ">" + $(node).html() + "</" + l + ">");
                        } else {
                            $(el).before($(node).html());
                        }
                    }
                    $(node).remove();
                    editor.html.wrap();
                    if (0 === $(el).find("li").length) {
                        $(el).remove();
                    }
                }
            },
            _del : function(obj) {
                var r;
                var node = get(obj);
                var el = node.nextSibling;
                if (el) {
                    if ((r = editor.node.contents(el)).length && "BR" == r[0].tagName) {
                        $(r[0]).remove();
                    }
                    $(el).find(editor.html.blockTagsQuery()).not("ol, ul, table").each(function() {
                        if (this.parentNode == el) {
                            $(this).replaceWith($(this).html() + (editor.node.isEmpty(this) ? "" : "<br>"));
                        }
                    });
                    var targetRow;
                    /** @type {!Node} */
                    var tmp = obj;
                    var target = editor.node.contents(el)[0];
                    for (; target && !editor.node.isList(target);) {
                        targetRow = target.nextSibling;
                        $(tmp).after(target);
                        tmp = target;
                        target = targetRow;
                    }
                    for (; target;) {
                        targetRow = target.nextSibling;
                        $(node).append(target);
                        target = targetRow;
                    }
                    $(obj).replaceWith($.FE.MARKERS);
                    $(el).remove();
                } else {
                    var child = node;
                    for (; !child.nextSibling && child != editor.el;) {
                        child = child.parentNode;
                    }
                    if (child == editor.el) {
                        return false;
                    }
                    if (child = child.nextSibling, editor.node.isBlock(child)) {
                        if ($.FE.NO_DELETE_TAGS.indexOf(child.tagName) < 0) {
                            $(obj).replaceWith($.FE.MARKERS);
                            if ((r = editor.node.contents(node)).length && "BR" == r[r.length - 1].tagName) {
                                $(r[r.length - 1]).remove();
                            }
                            $(node).append($(child).html());
                            $(child).remove();
                        }
                    } else {
                        if ((r = editor.node.contents(node)).length && "BR" == r[r.length - 1].tagName) {
                            $(r[r.length - 1]).remove();
                        }
                        $(obj).replaceWith($.FE.MARKERS);
                        for (; child && !editor.node.isBlock(child) && "BR" != child.tagName;) {
                            $(node).append($(child));
                            child = child.nextSibling;
                        }
                    }
                }
            }
        };
    };
    /** @type {!Array} */
    $.FE.NO_DELETE_TAGS = ["TH", "TD", "TR", "TABLE", "FORM"];
    /** @type {!Array} */
    $.FE.SIMPLE_ENTER_TAGS = ["TH", "TD", "LI", "DL", "DT", "FORM"];
    /**
     * @param {!Object} editor
     * @return {?}
     */
    $.FE.MODULES.cursor = function(editor) {
        /**
         * @param {!Node} element
         * @return {?}
         */
        function wrap(element) {
            return !!element && (!!editor.node.isBlock(element) || (element.nextSibling && element.nextSibling.nodeType == Node.TEXT_NODE && 0 === element.nextSibling.textContent.replace(/\u200b/g, "").length ? wrap(element.nextSibling) : !(element.nextSibling && (!element.previousSibling || "BR" != element.nextSibling.tagName || element.nextSibling.nextSibling)) && wrap(element.parentNode)));
        }
        /**
         * @param {!Node} target
         * @return {?}
         */
        function find(target) {
            return !!target && (!!editor.node.isBlock(target) || (target.previousSibling && target.previousSibling.nodeType == Node.TEXT_NODE && 0 === target.previousSibling.textContent.replace(/\u200b/g, "").length ? find(target.previousSibling) : !target.previousSibling && (!(target.previousSibling || !editor.node.hasClass(target.parentNode, "fr-inner")) || find(target.parentNode))));
        }
        /**
         * @param {!Node} e
         * @param {?} element
         * @return {?}
         */
        function next(e, element) {
            return !!e && (e != editor.$wp.get(0) && (e.previousSibling && e.previousSibling.nodeType == Node.TEXT_NODE && 0 === e.previousSibling.textContent.replace(/\u200b/g, "").length ? next(e.previousSibling, element) : !e.previousSibling && (e.parentNode == element || next(e.parentNode, element))));
        }
        /**
         * @param {!Node} e
         * @param {?} element
         * @return {?}
         */
        function walk(e, element) {
            return !!e && (e != editor.$wp.get(0) && (e.nextSibling && e.nextSibling.nodeType == Node.TEXT_NODE && 0 === e.nextSibling.textContent.replace(/\u200b/g, "").length ? walk(e.nextSibling, element) : !(e.nextSibling && (!e.previousSibling || "BR" != e.nextSibling.tagName || e.nextSibling.nextSibling)) && (e.parentNode == element || walk(e.parentNode, element))));
        }
        /**
         * @param {!Node} element
         * @return {?}
         */
        function create(element) {
            return 0 < $(element).parentsUntil(editor.$el, "LI").length && 0 === $(element).parentsUntil("LI", "TABLE").length;
        }
        /**
         * @param {string} s
         * @param {boolean} root
         * @return {?}
         */
        function check(s, root) {
            /** @type {!RegExp} */
            var re = new RegExp((root ? "^" : "") + "(([\\uD83C-\\uDBFF\\uDC00-\\uDFFF]+\\u200D)*[\\uD83C-\\uDBFF\\uDC00-\\uDFFF]{2})" + (root ? "" : "$"), "i");
            var res = s.match(re);
            return res ? res[0].length : 1;
        }
        /**
         * @param {!Node} n
         * @return {?}
         */
        function parse(n) {
            var nodes;
            /** @type {!Node} */
            var node = n;
            for (; !node.previousSibling;) {
                if (node = node.parentNode, editor.node.isElement(node)) {
                    return false;
                }
            }
            if (node = node.previousSibling, !editor.node.isBlock(node) && editor.node.isEditable(node)) {
                nodes = editor.node.contents(node);
                for (; node.nodeType != Node.TEXT_NODE && !editor.node.isDeletable(node) && nodes.length && editor.node.isEditable(node);) {
                    node = nodes[nodes.length - 1];
                    nodes = editor.node.contents(node);
                }
                if (node.nodeType == Node.TEXT_NODE) {
                    var str = node.textContent;
                    var length = str.length;
                    if (str.length && "\n" === str[str.length - 1]) {
                        return node.textContent = str.substring(0, length - 2), 0 === node.textContent.length && node.parentNode.removeChild(node), parse(n);
                    }
                    if (editor.opts.tabSpaces && str.length >= editor.opts.tabSpaces) {
                        if (0 === str.substr(str.length - editor.opts.tabSpaces, str.length - 1).replace(/ /g, "").replace(new RegExp($.FE.UNICODE_NBSP, "g"), "").length) {
                            /** @type {number} */
                            length = str.length - editor.opts.tabSpaces + 1;
                        }
                    }
                    node.textContent = str.substring(0, length - check(str));
                    /** @type {boolean} */
                    var i = str.length != node.textContent.length;
                    if (0 === node.textContent.length) {
                        if (i && editor.opts.keepFormatOnDelete) {
                            $(node).after($.FE.INVISIBLE_SPACE + $.FE.MARKERS);
                        } else {
                            if ((2 != node.parentNode.childNodes.length || node.parentNode != n.parentNode) && 1 != node.parentNode.childNodes.length || editor.node.isBlock(node.parentNode) || editor.node.isElement(node.parentNode) || !editor.node.isDeletable(node.parentNode)) {
                                for (; !editor.node.isElement(node.parentNode) && editor.node.isEmpty(node.parentNode);) {
                                    var nodeToRemove = node;
                                    node = node.parentNode;
                                    nodeToRemove.parentNode.removeChild(nodeToRemove);
                                }
                                $(node).after($.FE.MARKERS);
                                if (editor.node.isElement(node.parentNode) && !n.nextSibling && node.previousSibling && "BR" == node.previousSibling.tagName) {
                                    $(n).after("<br>");
                                }
                                node.parentNode.removeChild(node);
                            } else {
                                $(node.parentNode).after($.FE.MARKERS);
                                $(node.parentNode).remove();
                            }
                        }
                    } else {
                        $(node).after($.FE.MARKERS);
                    }
                } else {
                    if (editor.node.isDeletable(node)) {
                        $(node).after($.FE.MARKERS);
                        $(node).remove();
                    } else {
                        if (n.nextSibling && "BR" == n.nextSibling.tagName && editor.node.isVoid(node) && "BR" != node.tagName) {
                            $(n.nextSibling).remove();
                            $(n).replaceWith($.FE.MARKERS);
                        } else {
                            if (false !== editor.events.trigger("node.remove", [$(node)])) {
                                $(node).after($.FE.MARKERS);
                                $(node).remove();
                            }
                        }
                    }
                }
            } else {
                if ($.FE.NO_DELETE_TAGS.indexOf(node.tagName) < 0 && (editor.node.isEditable(node) || editor.node.isDeletable(node))) {
                    if (editor.node.isDeletable(node)) {
                        $(n).replaceWith($.FE.MARKERS);
                        $(node).remove();
                    } else {
                        if (editor.node.isEmpty(node) && !editor.node.isList(node)) {
                            $(node).remove();
                            $(n).replaceWith($.FE.MARKERS);
                        } else {
                            if (editor.node.isList(node)) {
                                node = $(node).find("li:last").get(0);
                            }
                            if ((nodes = editor.node.contents(node)) && "BR" == nodes[nodes.length - 1].tagName) {
                                $(nodes[nodes.length - 1]).remove();
                            }
                            nodes = editor.node.contents(node);
                            for (; nodes && editor.node.isBlock(nodes[nodes.length - 1]);) {
                                node = nodes[nodes.length - 1];
                                nodes = editor.node.contents(node);
                            }
                            $(node).append($.FE.MARKERS);
                            /** @type {!Node} */
                            var target = n;
                            for (; !target.previousSibling;) {
                                target = target.parentNode;
                            }
                            for (; target && "BR" !== target.tagName && !editor.node.isBlock(target);) {
                                var immediate = target;
                                target = target.nextSibling;
                                $(node).append(immediate);
                            }
                            if (target && "BR" == target.tagName) {
                                $(target).remove();
                            }
                            $(n).remove();
                        }
                    }
                } else {
                    if (n.nextSibling && "BR" == n.nextSibling.tagName) {
                        $(n.nextSibling).remove();
                    }
                }
            }
        }
        /**
         * @param {!Node} target
         * @return {undefined}
         */
        function init(target) {
            /** @type {boolean} */
            var t = 0 < $(target).parentsUntil(editor.$el, "BLOCKQUOTE").length;
            var element = editor.node.deepestParent(target, [], !t);
            if (element && "BLOCKQUOTE" == element.tagName) {
                var next = editor.node.deepestParent(target, [$(target).parentsUntil(editor.$el, "BLOCKQUOTE").get(0)]);
                if (next && next.nextSibling) {
                    element = next;
                }
            }
            if (null !== element) {
                var elements;
                var node = element.nextSibling;
                if (editor.node.isBlock(element) && (editor.node.isEditable(element) || editor.node.isDeletable(element)) && node && $.FE.NO_DELETE_TAGS.indexOf(node.tagName) < 0) {
                    if (editor.node.isDeletable(node)) {
                        $(node).remove();
                        $(target).replaceWith($.FE.MARKERS);
                    } else {
                        if (editor.node.isBlock(node) && editor.node.isEditable(node)) {
                            if (editor.node.isList(node)) {
                                if (editor.node.isEmpty(element, true)) {
                                    $(element).remove();
                                    $(node).find("li:first").prepend($.FE.MARKERS);
                                } else {
                                    var a = $(node).find("li:first");
                                    if ("BLOCKQUOTE" == element.tagName && (elements = editor.node.contents(element)).length && editor.node.isBlock(elements[elements.length - 1])) {
                                        element = elements[elements.length - 1];
                                    }
                                    if (0 === a.find("ul, ol").length) {
                                        $(target).replaceWith($.FE.MARKERS);
                                        a.find(editor.html.blockTagsQuery()).not("ol, ul, table").each(function() {
                                            if (this.parentNode == a.get(0)) {
                                                $(this).replaceWith($(this).html() + (editor.node.isEmpty(this) ? "" : "<br>"));
                                            }
                                        });
                                        $(element).append(editor.node.contents(a.get(0)));
                                        a.remove();
                                        if (0 === $(node).find("li").length) {
                                            $(node).remove();
                                        }
                                    }
                                }
                            } else {
                                if ((elements = editor.node.contents(node)).length && "BR" == elements[0].tagName && $(elements[0]).remove(), "BLOCKQUOTE" != node.tagName && "BLOCKQUOTE" == element.tagName) {
                                    elements = editor.node.contents(element);
                                    for (; elements.length && editor.node.isBlock(elements[elements.length - 1]);) {
                                        element = elements[elements.length - 1];
                                        elements = editor.node.contents(element);
                                    }
                                } else {
                                    if ("BLOCKQUOTE" == node.tagName && "BLOCKQUOTE" != element.tagName) {
                                        elements = editor.node.contents(node);
                                        for (; elements.length && editor.node.isBlock(elements[0]);) {
                                            node = elements[0];
                                            elements = editor.node.contents(node);
                                        }
                                    }
                                }
                                $(target).replaceWith($.FE.MARKERS);
                                $(element).append(node.innerHTML);
                                $(node).remove();
                            }
                        } else {
                            $(target).replaceWith($.FE.MARKERS);
                            for (; node && "BR" !== node.tagName && !editor.node.isBlock(node) && editor.node.isEditable(node);) {
                                var east = node;
                                node = node.nextSibling;
                                $(element).append(east);
                            }
                            if (node && "BR" == node.tagName && editor.node.isEditable(node)) {
                                $(node).remove();
                            }
                        }
                    }
                }
            }
        }
        /**
         * @param {!Node} target
         * @return {?}
         */
        function remove(target) {
            var nodes;
            /** @type {!Node} */
            var node = target;
            for (; !node.nextSibling;) {
                if (node = node.parentNode, editor.node.isElement(node)) {
                    return false;
                }
            }
            if ("BR" == (node = node.nextSibling).tagName && editor.node.isEditable(node)) {
                if (node.nextSibling) {
                    if (editor.node.isBlock(node.nextSibling) && editor.node.isEditable(node.nextSibling)) {
                        if (!($.FE.NO_DELETE_TAGS.indexOf(node.nextSibling.tagName) < 0)) {
                            return void $(node).remove();
                        }
                        node = node.nextSibling;
                        $(node.previousSibling).remove();
                    }
                } else {
                    if (wrap(node)) {
                        if (create(target)) {
                            editor.cursorLists._del(target);
                        } else {
                            if (editor.node.deepestParent(node)) {
                                if (!editor.node.isEmpty(editor.node.blockParent(node)) || (editor.node.blockParent(node).nextSibling && $.FE.NO_DELETE_TAGS.indexOf(editor.node.blockParent(node).nextSibling.tagName)) < 0) {
                                    $(node).remove();
                                }
                                init(target);
                            }
                        }
                        return;
                    }
                }
            }
            if (!editor.node.isBlock(node) && editor.node.isEditable(node)) {
                nodes = editor.node.contents(node);
                for (; node.nodeType != Node.TEXT_NODE && nodes.length && !editor.node.isDeletable(node) && editor.node.isEditable(node);) {
                    node = nodes[0];
                    nodes = editor.node.contents(node);
                }
                if (node.nodeType == Node.TEXT_NODE) {
                    $(node).before($.FE.MARKERS);
                    if (node.textContent.length) {
                        node.textContent = node.textContent.substring(check(node.textContent, true), node.textContent.length);
                    }
                } else {
                    if (editor.node.isDeletable(node)) {
                        $(node).before($.FE.MARKERS);
                        $(node).remove();
                    } else {
                        if (false !== editor.events.trigger("node.remove", [$(node)])) {
                            $(node).before($.FE.MARKERS);
                            $(node).remove();
                        }
                    }
                }
                $(target).remove();
            } else {
                if ($.FE.NO_DELETE_TAGS.indexOf(node.tagName) < 0 && (editor.node.isEditable(node) || editor.node.isDeletable(node))) {
                    if (editor.node.isDeletable(node)) {
                        $(target).replaceWith($.FE.MARKERS);
                        $(node).remove();
                    } else {
                        if (editor.node.isList(node)) {
                            if (target.previousSibling) {
                                $(node).find("li:first").prepend(target);
                                editor.cursorLists._backspace(target);
                            } else {
                                $(node).find("li:first").prepend($.FE.MARKERS);
                                $(target).remove();
                            }
                        } else {
                            if ((nodes = editor.node.contents(node)) && "BR" == nodes[0].tagName && $(nodes[0]).remove(), nodes && "BLOCKQUOTE" == node.tagName) {
                                var node = nodes[0];
                                $(target).before($.FE.MARKERS);
                                for (; node && "BR" != node.tagName;) {
                                    var curNode = node;
                                    node = node.nextSibling;
                                    $(target).before(curNode);
                                }
                                if (node && "BR" == node.tagName) {
                                    $(node).remove();
                                }
                            } else {
                                $(target).after($(node).html()).after($.FE.MARKERS);
                                $(node).remove();
                            }
                        }
                    }
                }
            }
        }
        /**
         * @return {undefined}
         */
        function set() {
            var eiFrame = editor.el.querySelectorAll("blockquote:empty");
            /** @type {number} */
            var i = 0;
            for (; i < eiFrame.length; i++) {
                eiFrame[i].parentNode.removeChild(eiFrame[i]);
            }
        }
        /**
         * @param {!Node} item
         * @param {boolean} name
         * @param {boolean} context
         * @return {?}
         */
        function apply(item, name, context) {
            var sniffedDoctype;
            var node = editor.node.deepestParent(item, [], !context);
            if (node && "BLOCKQUOTE" == node.tagName) {
                return walk(item, node) ? ((sniffedDoctype = editor.html.defaultTag()) ? $(node).after("<" + sniffedDoctype + ">" + $.FE.MARKERS + "<br></" + sniffedDoctype + ">") : $(node).after($.FE.MARKERS + "<br>"), $(item).remove()) : callback(item, name, context), false;
            }
            if (null == node) {
                if ((sniffedDoctype = editor.html.defaultTag()) && editor.node.isElement(item.parentNode)) {
                    $(item).replaceWith("<" + sniffedDoctype + ">" + $.FE.MARKERS + "<br></" + sniffedDoctype + ">");
                } else {
                    if (!item.previousSibling || $(item.previousSibling).is("br") || item.nextSibling) {
                        $(item).replaceWith("<br>" + $.FE.MARKERS);
                    } else {
                        $(item).replaceWith("<br>" + $.FE.MARKERS + "<br>");
                    }
                }
            } else {
                /** @type {!Node} */
                var parent = item;
                /** @type {string} */
                var a = "";
                if (!(editor.node.isBlock(node) && !name)) {
                    /** @type {string} */
                    a = "<br/>";
                }
                var r;
                /** @type {string} */
                var prefix = "";
                /** @type {string} */
                var path = "";
                /** @type {string} */
                var plugins = "";
                /** @type {string} */
                var th_field = "";
                if ((sniffedDoctype = editor.html.defaultTag()) && editor.node.isBlock(node)) {
                    /** @type {string} */
                    plugins = "<" + sniffedDoctype + ">";
                    /** @type {string} */
                    th_field = "</" + sniffedDoctype + ">";
                    if (node.tagName == sniffedDoctype.toUpperCase()) {
                        plugins = editor.node.openTagString($(node).clone().removeAttr("id").get(0));
                    }
                }
                do {
                    if (parent = parent.parentNode, !name || parent != node || name && !editor.node.isBlock(node)) {
                        if (prefix = prefix + editor.node.closeTagString(parent), parent == node && editor.node.isBlock(node)) {
                            path = plugins + path;
                        } else {
                            /** @type {string} */
                            var p = "A" == parent.tagName && walk(item, parent) ? "fr-to-remove" : "";
                            path = editor.node.openTagString($(parent).clone().addClass(p).get(0)) + path;
                        }
                    }
                } while (parent != node);
                /** @type {string} */
                a = prefix + a + path + (item.parentNode == node && editor.node.isBlock(node) ? "" : $.FE.INVISIBLE_SPACE) + $.FE.MARKERS;
                if (editor.node.isBlock(node) && !$(node).find("*:last").is("br")) {
                    $(node).append("<br/>");
                }
                $(item).after('<span id="fr-break"></span>');
                $(item).remove();
                if (!(node.nextSibling && !editor.node.isBlock(node.nextSibling) || editor.node.isBlock(node))) {
                    $(node).after("<br>");
                }
                r = (r = !name && editor.node.isBlock(node) ? editor.node.openTagString(node) + $(node).html() + th_field : editor.node.openTagString(node) + $(node).html() + editor.node.closeTagString(node)).replace(/<span id="fr-break"><\/span>/g, a);
                $(node).replaceWith(r);
            }
        }
        /**
         * @param {!Node} e
         * @param {boolean} type
         * @param {boolean} a
         * @return {undefined}
         */
        function callback(e, type, a) {
            var node = editor.node.deepestParent(e, [], !a);
            if (null == node) {
                if (editor.html.defaultTag() && e.parentNode === editor.el) {
                    $(e).replaceWith("<" + editor.html.defaultTag() + ">" + $.FE.MARKERS + "<br></" + editor.html.defaultTag() + ">");
                } else {
                    if (!(e.nextSibling && !editor.node.isBlock(e.nextSibling))) {
                        $(e).after("<br>");
                    }
                    $(e).replaceWith("<br>" + $.FE.MARKERS);
                }
            } else {
                /** @type {!Node} */
                var item = e;
                /** @type {string} */
                var i = "";
                if ("PRE" == node.tagName) {
                    /** @type {boolean} */
                    type = true;
                }
                if (!(editor.node.isBlock(node) && !type)) {
                    /** @type {string} */
                    i = "<br>";
                }
                /** @type {string} */
                var str = "";
                /** @type {string} */
                var a = "";
                do {
                    var parent = item;
                    if (item = item.parentNode, "BLOCKQUOTE" == node.tagName && editor.node.isEmpty(parent) && !editor.node.hasClass(parent, "fr-marker") && 0 < $(parent).find(e).length && $(parent).after(e), ("BLOCKQUOTE" != node.tagName || !walk(e, item) && !next(e, item)) && (!type || item != node || type && !editor.node.isBlock(node))) {
                        str = str + editor.node.closeTagString(item);
                        /** @type {string} */
                        var disabledClass = "A" == item.tagName && walk(e, item) ? "fr-to-remove" : "";
                        a = editor.node.openTagString($(item).clone().addClass(disabledClass).removeAttr("id").get(0)) + a;
                    }
                } while (item != node);
                var HAS_BROKEN_LINEHEIGHT = node == e.parentNode && editor.node.isBlock(node) || e.nextSibling;
                if ("BLOCKQUOTE" == node.tagName) {
                    if (e.previousSibling && editor.node.isBlock(e.previousSibling) && e.nextSibling && "BR" == e.nextSibling.tagName) {
                        $(e.nextSibling).after(e);
                        if (e.nextSibling && "BR" == e.nextSibling.tagName) {
                            $(e.nextSibling).remove();
                        }
                    }
                    var countChars = editor.html.defaultTag();
                    /** @type {string} */
                    i = str + i + (countChars ? "<" + countChars + ">" : "") + $.FE.MARKERS + "<br>" + (countChars ? "</" + countChars + ">" : "") + a;
                } else {
                    /** @type {string} */
                    i = str + i + a + (HAS_BROKEN_LINEHEIGHT ? "" : $.FE.INVISIBLE_SPACE) + $.FE.MARKERS;
                }
                $(e).replaceWith('<span id="fr-break"></span>');
                var t = editor.node.openTagString(node) + $(node).html() + editor.node.closeTagString(node);
                t = t.replace(/<span id="fr-break"><\/span>/g, i);
                $(node).replaceWith(t);
            }
        }
        return {
            enter : function(value) {
                var el = editor.markers.insert();
                if (!el) {
                    return true;
                }
                editor.el.normalize();
                /** @type {boolean} */
                var c = false;
                if (0 < $(el).parentsUntil(editor.$el, "BLOCKQUOTE").length) {
                    /** @type {boolean} */
                    c = !(value = false);
                }
                if ($(el).parentsUntil(editor.$el, "TD, TH").length) {
                    /** @type {boolean} */
                    c = false;
                }
                if (wrap(el)) {
                    if (!create(el) || value || c) {
                        apply(el, value, c);
                    } else {
                        editor.cursorLists._endEnter(el);
                    }
                } else {
                    if (find(el)) {
                        if (!create(el) || value || c) {
                            (function init(el, config, ctx) {
                                var o;
                                var node = editor.node.deepestParent(el, [], !ctx);
                                if (node && "TABLE" == node.tagName) {
                                    return $(node).find("td:first, th:first").prepend(el), init(el, config, ctx);
                                }
                                if (node && "BLOCKQUOTE" == node.tagName) {
                                    if (next(el, node)) {
                                        return (o = editor.html.defaultTag()) ? $(node).before("<" + o + ">" + $.FE.MARKERS + "<br></" + o + ">") : $(node).before($.FE.MARKERS + "<br>"), $(el).remove(), false;
                                    }
                                    if (walk(el, node)) {
                                        apply(el, config, true);
                                    } else {
                                        callback(el, config, true);
                                    }
                                }
                                if (null == node) {
                                    if ((o = editor.html.defaultTag()) && editor.node.isElement(el.parentNode)) {
                                        $(el).replaceWith("<" + o + ">" + $.FE.MARKERS + "<br></" + o + ">");
                                    } else {
                                        $(el).replaceWith("<br>" + $.FE.MARKERS);
                                    }
                                } else {
                                    if (editor.node.isBlock(node)) {
                                        if ("PRE" == node.tagName && (config = true), config) {
                                            $(el).remove();
                                            $(node).prepend("<br>" + $.FE.MARKERS);
                                        } else {
                                            if (editor.node.isEmpty(node, true)) {
                                                return apply(el, config, ctx);
                                            }
                                            if (editor.opts.keepFormatOnDelete) {
                                                /** @type {!Node} */
                                                var child = el;
                                                var tagToSwapWith = $.FE.INVISIBLE_SPACE;
                                                for (; child != node && !editor.node.isElement(child);) {
                                                    child = child.parentNode;
                                                    tagToSwapWith = editor.node.openTagString(child) + tagToSwapWith + editor.node.closeTagString(child);
                                                }
                                                $(node).before(tagToSwapWith);
                                            } else {
                                                $(node).before(editor.node.openTagString($(node).clone().removeAttr("id").get(0)) + "<br>" + editor.node.closeTagString(node));
                                            }
                                        }
                                    } else {
                                        $(node).before("<br>");
                                    }
                                    $(el).remove();
                                }
                            })(el, value, c);
                        } else {
                            editor.cursorLists._startEnter(el);
                        }
                    } else {
                        if (!create(el) || value || c) {
                            callback(el, value, c);
                        } else {
                            editor.cursorLists._middleEnter(el);
                        }
                    }
                }
                editor.$el.find(".fr-to-remove").each(function() {
                    var options = editor.node.contents(this);
                    /** @type {number} */
                    var i = 0;
                    for (; i < options.length; i++) {
                        if (options[i].nodeType == Node.TEXT_NODE) {
                            options[i].textContent = options[i].textContent.replace(/\u200B/g, "");
                        }
                    }
                    $(this).replaceWith(this.innerHTML);
                });
                editor.html.fillEmptyBlocks(true);
                if (!editor.opts.htmlUntouched) {
                    editor.html.cleanEmptyTags();
                    editor.clean.lists();
                }
                editor.spaces.normalizeAroundCursor();
                editor.selection.restore();
            },
            backspace : function() {
                /** @type {boolean} */
                var tokens = false;
                var input = editor.markers.insert();
                if (!input) {
                    return true;
                }
                var parent = input.parentNode;
                for (; parent && !editor.node.isElement(parent);) {
                    if ("false" === parent.getAttribute("contenteditable")) {
                        return $(input).replaceWith($.FE.MARKERS), editor.selection.restore(), false;
                    }
                    if ("true" === parent.getAttribute("contenteditable")) {
                        break;
                    }
                    parent = parent.parentNode;
                }
                editor.el.normalize();
                var target = input.previousSibling;
                if (target) {
                    var str = target.textContent;
                    if (str && str.length && 8203 == str.charCodeAt(str.length - 1)) {
                        if (1 == str.length) {
                            $(target).remove();
                        } else {
                            target.textContent = target.textContent.substr(0, str.length - check(str));
                        }
                    }
                }
                return wrap(input) ? tokens = parse(input) : find(input) ? create(input) && next(input, $(input).parents("li:first").get(0)) ? editor.cursorLists._backspace(input) : function(id) {
                    /** @type {boolean} */
                    var t = 0 < $(id).parentsUntil(editor.$el, "BLOCKQUOTE").length;
                    var element = editor.node.deepestParent(id, [], !t);
                    var p = element;
                    for (; element && !element.previousSibling && "BLOCKQUOTE" != element.tagName && element.parentElement != editor.el && !editor.node.hasClass(element.parentElement, "fr-inner") && $.FE.SIMPLE_ENTER_TAGS.indexOf(element.parentElement.tagName) < 0;) {
                        element = element.parentElement;
                    }
                    if (element && "BLOCKQUOTE" == element.tagName) {
                        var node = editor.node.deepestParent(id, [$(id).parentsUntil(editor.$el, "BLOCKQUOTE").get(0)]);
                        if (node && node.previousSibling) {
                            p = element = node;
                        }
                    }
                    if (null !== element) {
                        var elements;
                        var node = element.previousSibling;
                        if (editor.node.isBlock(element) && editor.node.isEditable(element) && node && $.FE.NO_DELETE_TAGS.indexOf(node.tagName) < 0) {
                            if (editor.node.isDeletable(node)) {
                                $(node).remove();
                                $(id).replaceWith($.FE.MARKERS);
                            } else {
                                if (editor.node.isEditable(node)) {
                                    if (editor.node.isBlock(node)) {
                                        if (editor.node.isEmpty(node) && !editor.node.isList(node)) {
                                            $(node).remove();
                                            $(id).after(editor.opts.keepFormatOnDelete ? $.FE.INVISIBLE_SPACE : "");
                                        } else {
                                            if (editor.node.isList(node) && (node = $(node).find("li:last").get(0)), (elements = editor.node.contents(node)).length && "BR" == elements[elements.length - 1].tagName && $(elements[elements.length - 1]).remove(), "BLOCKQUOTE" == node.tagName && "BLOCKQUOTE" != element.tagName) {
                                                elements = editor.node.contents(node);
                                                for (; elements.length && editor.node.isBlock(elements[elements.length - 1]);) {
                                                    node = elements[elements.length - 1];
                                                    elements = editor.node.contents(node);
                                                }
                                            } else {
                                                if ("BLOCKQUOTE" != node.tagName && "BLOCKQUOTE" == element.tagName) {
                                                    elements = editor.node.contents(element);
                                                    for (; elements.length && editor.node.isBlock(elements[0]);) {
                                                        element = elements[0];
                                                        elements = editor.node.contents(element);
                                                    }
                                                }
                                            }
                                            if (editor.node.isEmpty(element)) {
                                                $(id).remove();
                                                editor.selection.setAtEnd(node, true);
                                            } else {
                                                $(id).replaceWith($.FE.MARKERS);
                                                var s = node.childNodes;
                                                if (editor.node.isBlock(s[s.length - 1])) {
                                                    $(s[s.length - 1]).append(p.innerHTML);
                                                } else {
                                                    $(node).append(p.innerHTML);
                                                }
                                            }
                                            $(p).remove();
                                            if (editor.node.isEmpty(element)) {
                                                $(element).remove();
                                            }
                                        }
                                    } else {
                                        $(id).replaceWith($.FE.MARKERS);
                                        if ("BLOCKQUOTE" == element.tagName && node.nodeType == Node.ELEMENT_NODE) {
                                            $(node).remove();
                                        } else {
                                            $(node).after(editor.node.isEmpty(element) ? "" : $(element).html());
                                            $(element).remove();
                                            if ("BR" == node.tagName) {
                                                $(node).remove();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }(input) : tokens = parse(input), $(input).remove(), set(), editor.html.fillEmptyBlocks(true), editor.opts.htmlUntouched || (editor.html.cleanEmptyTags(), editor.clean.lists(), editor.spaces.normalizeAroundCursor()), editor.selection.restore(), tokens;
            },
            del : function() {
                var target = editor.markers.insert();
                if (!target) {
                    return false;
                }
                if (editor.el.normalize(), wrap(target)) {
                    if (create(target)) {
                        if (0 === $(target).parents("li:first").find("ul, ol").length) {
                            editor.cursorLists._del(target);
                        } else {
                            var _ref = $(target).parents("li:first").find("ul:first, ol:first").find("li:first");
                            (_ref = _ref.find(editor.html.blockTagsQuery()).get(-1) || _ref).prepend(target);
                            editor.cursorLists._backspace(target);
                        }
                    } else {
                        init(target);
                    }
                } else {
                    find(target);
                    remove(target);
                }
                $(target).remove();
                set();
                editor.html.fillEmptyBlocks(true);
                if (!editor.opts.htmlUntouched) {
                    editor.html.cleanEmptyTags();
                    editor.clean.lists();
                }
                editor.spaces.normalizeAroundCursor();
                editor.selection.restore();
            },
            isAtEnd : walk,
            isAtStart : next
        };
    };
    /** @type {number} */
    $.FE.ENTER_P = 0;
    /** @type {number} */
    $.FE.ENTER_DIV = 1;
    /** @type {number} */
    $.FE.ENTER_BR = 2;
    $.FE.KEYCODE = {
        BACKSPACE : 8,
        TAB : 9,
        ENTER : 13,
        SHIFT : 16,
        CTRL : 17,
        ALT : 18,
        ESC : 27,
        SPACE : 32,
        ARROW_LEFT : 37,
        ARROW_UP : 38,
        ARROW_RIGHT : 39,
        ARROW_DOWN : 40,
        DELETE : 46,
        ZERO : 48,
        ONE : 49,
        TWO : 50,
        THREE : 51,
        FOUR : 52,
        FIVE : 53,
        SIX : 54,
        SEVEN : 55,
        EIGHT : 56,
        NINE : 57,
        FF_SEMICOLON : 59,
        FF_EQUALS : 61,
        QUESTION_MARK : 63,
        A : 65,
        B : 66,
        C : 67,
        D : 68,
        E : 69,
        F : 70,
        G : 71,
        H : 72,
        I : 73,
        J : 74,
        K : 75,
        L : 76,
        M : 77,
        N : 78,
        O : 79,
        P : 80,
        Q : 81,
        R : 82,
        S : 83,
        T : 84,
        U : 85,
        V : 86,
        W : 87,
        X : 88,
        Y : 89,
        Z : 90,
        META : 91,
        NUM_ZERO : 96,
        NUM_ONE : 97,
        NUM_TWO : 98,
        NUM_THREE : 99,
        NUM_FOUR : 100,
        NUM_FIVE : 101,
        NUM_SIX : 102,
        NUM_SEVEN : 103,
        NUM_EIGHT : 104,
        NUM_NINE : 105,
        NUM_MULTIPLY : 106,
        NUM_PLUS : 107,
        NUM_MINUS : 109,
        NUM_PERIOD : 110,
        NUM_DIVISION : 111,
        F1 : 112,
        F2 : 113,
        F3 : 114,
        F4 : 115,
        F5 : 116,
        F6 : 117,
        F7 : 118,
        F8 : 119,
        F9 : 120,
        F10 : 121,
        F11 : 122,
        F12 : 123,
        FF_HYPHEN : 173,
        SEMICOLON : 186,
        DASH : 189,
        EQUALS : 187,
        COMMA : 188,
        HYPHEN : 189,
        PERIOD : 190,
        SLASH : 191,
        APOSTROPHE : 192,
        TILDE : 192,
        SINGLE_QUOTE : 222,
        OPEN_SQUARE_BRACKET : 219,
        BACKSLASH : 220,
        CLOSE_SQUARE_BRACKET : 221,
        IME : 229
    };
    $.extend($.FE.DEFAULTS, {
        enter : $.FE.ENTER_P,
        multiLine : true,
        tabSpaces : 0
    });
    /**
     * @param {!Object} editor
     * @return {?}
     */
    $.FE.MODULES.keys = function(editor) {
        /**
         * @return {undefined}
         */
        function parse() {
            if (editor.browser.mozilla && editor.selection.isCollapsed() && !c) {
                var range = editor.selection.ranges(0);
                var node = range.startContainer;
                var pos = range.startOffset;
                if (node && node.nodeType == Node.TEXT_NODE && pos <= node.textContent.length && 0 < pos && 32 == node.textContent.charCodeAt(pos - 1)) {
                    editor.selection.save();
                    editor.spaces.normalize();
                    editor.selection.restore();
                }
            }
        }
        /**
         * @return {undefined}
         */
        function render() {
            if (editor.selection.isFull()) {
                setTimeout(function() {
                    var e = editor.html.defaultTag();
                    if (e) {
                        editor.$el.html("<" + e + ">" + $.FE.MARKERS + "<br/></" + e + ">");
                    } else {
                        editor.$el.html($.FE.MARKERS + "<br/>");
                    }
                    editor.selection.restore();
                    editor.placeholder.refresh();
                    editor.button.bulkRefresh();
                    editor.undo.saveStep();
                }, 0);
            }
        }
        /**
         * @return {undefined}
         */
        function addLayer() {
            /** @type {boolean} */
            c = false;
        }
        /**
         * @return {undefined}
         */
        function handler() {
            /** @type {boolean} */
            c = false;
        }
        /**
         * @return {undefined}
         */
        function apply() {
            var e = editor.html.defaultTag();
            if (e) {
                editor.$el.html("<" + e + ">" + $.FE.MARKERS + "<br/></" + e + ">");
            } else {
                editor.$el.html($.FE.MARKERS + "<br/>");
            }
            editor.selection.restore();
        }
        /**
         * @param {!Object} event
         * @return {?}
         */
        function update(event) {
            var inConfig = editor.selection.element();
            if (inConfig && 0 <= ["INPUT", "TEXTAREA"].indexOf(inConfig.tagName)) {
                return true;
            }
            if (event && remove(event.which)) {
                return true;
            }
            editor.events.disableBlur();
            null;
            var keyCode = event.which;
            if (16 === keyCode) {
                return true;
            }
            if ((TAB_KEY = keyCode) === $.FE.KEYCODE.IME) {
                return c = true;
            }
            /** @type {boolean} */
            c = false;
            var _event;
            var e;
            var $event;
            var g = callback(keyCode) && !trigger(event) && !event.altKey;
            /** @type {boolean} */
            var s = keyCode == $.FE.KEYCODE.BACKSPACE || keyCode == $.FE.KEYCODE.DELETE;
            if ((editor.selection.isFull() && !editor.opts.keepFormatOnDelete && !editor.placeholder.isVisible() || s && editor.placeholder.isVisible() && editor.opts.keepFormatOnDelete) && (g || s) && (apply(), !callback(keyCode))) {
                return event.preventDefault(), true;
            }
            if (keyCode == $.FE.KEYCODE.ENTER) {
                if (event.shiftKey) {
                    ($event = event).preventDefault();
                    $event.stopPropagation();
                    if (editor.opts.multiLine) {
                        if (!editor.selection.isCollapsed()) {
                            editor.selection.remove();
                        }
                        editor.cursor.enter(true);
                    }
                } else {
                    /** @type {!Object} */
                    e = event;
                    if (editor.opts.multiLine) {
                        if (!editor.helpers.isIOS()) {
                            e.preventDefault();
                            e.stopPropagation();
                        }
                        if (!editor.selection.isCollapsed()) {
                            editor.selection.remove();
                        }
                        editor.cursor.enter();
                    } else {
                        e.preventDefault();
                        e.stopPropagation();
                    }
                }
            } else {
                if (keyCode === $.FE.KEYCODE.BACKSPACE && (event.metaKey || event.ctrlKey)) {
                    setTimeout(function() {
                        editor.events.disableBlur();
                        editor.events.focus();
                    }, 0);
                } else {
                    if (keyCode != $.FE.KEYCODE.BACKSPACE || trigger(event) || event.altKey) {
                        if (keyCode != $.FE.KEYCODE.DELETE || trigger(event) || event.altKey || event.shiftKey) {
                            if (keyCode == $.FE.KEYCODE.SPACE) {
                                (function(event) {
                                    var oDom = editor.selection.element();
                                    if (!editor.helpers.isMobile() && oDom && "A" == oDom.tagName) {
                                        event.preventDefault();
                                        event.stopPropagation();
                                        if (!editor.selection.isCollapsed()) {
                                            editor.selection.remove();
                                        }
                                        var el = editor.markers.insert();
                                        if (el) {
                                            var prev = el.previousSibling;
                                            if (!el.nextSibling && el.parentNode && "A" == el.parentNode.tagName) {
                                                el.parentNode.insertAdjacentHTML("afterend", "&nbsp;" + $.FE.MARKERS);
                                                el.parentNode.removeChild(el);
                                            } else {
                                                if (prev && prev.nodeType == Node.TEXT_NODE && 1 == prev.textContent.length && 160 == prev.textContent.charCodeAt(0)) {
                                                    /** @type {string} */
                                                    prev.textContent = prev.textContent + " ";
                                                } else {
                                                    el.insertAdjacentHTML("beforebegin", "&nbsp;");
                                                }
                                                el.outerHTML = $.FE.MARKERS;
                                            }
                                            editor.selection.restore();
                                        }
                                    }
                                })(event);
                            } else {
                                if (keyCode == $.FE.KEYCODE.TAB) {
                                    (function(event) {
                                        if (0 < editor.opts.tabSpaces) {
                                            if (editor.selection.isCollapsed()) {
                                                editor.undo.saveStep();
                                                event.preventDefault();
                                                event.stopPropagation();
                                                /** @type {string} */
                                                var value = "";
                                                /** @type {number} */
                                                var n = 0;
                                                for (; n < editor.opts.tabSpaces; n++) {
                                                    /** @type {string} */
                                                    value = value + "&nbsp;";
                                                }
                                                editor.html.insert(value);
                                                editor.placeholder.refresh();
                                                editor.undo.saveStep();
                                            } else {
                                                event.preventDefault();
                                                event.stopPropagation();
                                                if (event.shiftKey) {
                                                    editor.commands.outdent();
                                                } else {
                                                    editor.commands.indent();
                                                }
                                            }
                                        }
                                    })(event);
                                } else {
                                    if (!(trigger(event) || !callback(event.which) || editor.selection.isCollapsed() || event.ctrlKey)) {
                                        editor.selection.remove();
                                    }
                                }
                            }
                        } else {
                            if (editor.placeholder.isVisible()) {
                                if (!editor.opts.keepFormatOnDelete) {
                                    apply();
                                }
                                event.preventDefault();
                                event.stopPropagation();
                            } else {
                                (_event = event).preventDefault();
                                _event.stopPropagation();
                                if ("" === editor.selection.text()) {
                                    editor.cursor.del();
                                } else {
                                    editor.selection.remove();
                                }
                                editor.placeholder.refresh();
                            }
                        }
                    } else {
                        if (editor.placeholder.isVisible()) {
                            if (!editor.opts.keepFormatOnDelete) {
                                apply();
                            }
                            event.preventDefault();
                            event.stopPropagation();
                        } else {
                            (function(event) {
                                if (editor.selection.isCollapsed()) {
                                    if (editor.cursor.backspace(), editor.helpers.isIOS()) {
                                        var range = editor.selection.ranges(0);
                                        range.deleteContents();
                                        range.insertNode(document.createTextNode("\u200b"));
                                        editor.selection.get().modify("move", "forward", "character");
                                    } else {
                                        event.preventDefault();
                                        event.stopPropagation();
                                    }
                                } else {
                                    event.preventDefault();
                                    event.stopPropagation();
                                    editor.selection.remove();
                                    editor.html.fillEmptyBlocks();
                                }
                                editor.placeholder.refresh();
                            })(event);
                        }
                    }
                }
            }
            editor.events.enableBlur();
        }
        /**
         * @return {?}
         */
        function setup() {
            if (!editor.$wp) {
                return true;
            }
            var height;
            if (editor.opts.height || editor.opts.heightMax) {
                height = editor.position.getBoundingRect().top;
                if (editor.helpers.isIOS() || editor.helpers.isAndroid()) {
                    /** @type {number} */
                    height = height - editor.helpers.scrollTop();
                }
                if (editor.opts.iframe) {
                    height = height + editor.$iframe.offset().top;
                }
                if (height > editor.$wp.offset().top - editor.helpers.scrollTop() + editor.$wp.height() - 20) {
                    editor.$wp.scrollTop(height + editor.$wp.scrollTop() - (editor.$wp.height() + editor.$wp.offset().top) + editor.helpers.scrollTop() + 20);
                }
            } else {
                height = editor.position.getBoundingRect().top;
                if (editor.opts.toolbarBottom) {
                    height = height + editor.opts.toolbarStickyOffset;
                }
                if (editor.helpers.isIOS() || editor.helpers.isAndroid()) {
                    /** @type {number} */
                    height = height - editor.helpers.scrollTop();
                }
                if (editor.opts.iframe) {
                    height = height + editor.$iframe.offset().top;
                    /** @type {number} */
                    height = height - editor.helpers.scrollTop();
                }
                if ((height = height + editor.opts.toolbarStickyOffset) > editor.o_win.innerHeight - 20) {
                    $(editor.o_win).scrollTop(height + editor.helpers.scrollTop() - editor.o_win.innerHeight + 20);
                }
                height = editor.position.getBoundingRect().top;
                if (!editor.opts.toolbarBottom) {
                    /** @type {number} */
                    height = height - editor.opts.toolbarStickyOffset;
                }
                if (editor.helpers.isIOS() || editor.helpers.isAndroid()) {
                    /** @type {number} */
                    height = height - editor.helpers.scrollTop();
                }
                if (editor.opts.iframe) {
                    height = height + editor.$iframe.offset().top;
                    /** @type {number} */
                    height = height - editor.helpers.scrollTop();
                }
                if (height < editor.$tb.height() + 20) {
                    $(editor.o_win).scrollTop(height + editor.helpers.scrollTop() - editor.$tb.height() - 20);
                }
            }
        }
        /**
         * @param {string} e
         * @return {?}
         */
        function init(e) {
            var inConfig = editor.selection.element();
            if (inConfig && 0 <= ["INPUT", "TEXTAREA"].indexOf(inConfig.tagName)) {
                return true;
            }
            if (e && 0 === e.which && TAB_KEY && (e.which = TAB_KEY), editor.helpers.isAndroid() && editor.browser.mozilla) {
                return true;
            }
            if (c) {
                return false;
            }
            if (e && editor.helpers.isIOS() && e.which == $.FE.KEYCODE.ENTER && editor.doc.execCommand("delete"), !editor.selection.isCollapsed()) {
                return true;
            }
            if (e && (e.which === $.FE.KEYCODE.META || e.which == $.FE.KEYCODE.CTRL)) {
                return true;
            }
            if (e && remove(e.which)) {
                return true;
            }
            if (e && !editor.helpers.isIOS() && (e.which == $.FE.KEYCODE.ENTER || e.which == $.FE.KEYCODE.BACKSPACE || 37 <= e.which && e.which <= 40 && !editor.browser.msie)) {
                setup();
            }
            var ant;
            var a = editor.selection.element();
            if (!(!function(surface) {
                    if (!surface) {
                        return false;
                    }
                    var r = surface.innerHTML;
                    return !!((r = r.replace(/<span[^>]*? class\s*=\s*["']?fr-marker["']?[^>]+>\u200b<\/span>/gi, "")) && /\u200B/.test(r) && 0 < r.replace(/\u200B/gi, "").length);
                }(a) || editor.node.hasClass(a, "fr-marker") || "IFRAME" == a.tagName || (ant = a, editor.helpers.isIOS() && 0 !== ((ant.textContent || "").match(/[\u3041-\u3096\u30A0-\u30FF\u4E00-\u9FFF\u3130-\u318F\uAC00-\uD7AF]/gi) || []).length))) {
                editor.selection.save();
                (function(d) {
                    var walker = editor.doc.createTreeWalker(d, NodeFilter.SHOW_TEXT, editor.node.filter(function(nod) {
                        return /\u200B/gi.test(nod.textContent);
                    }), false);
                    for (; walker.nextNode();) {
                        var element = walker.currentNode;
                        element.textContent = element.textContent.replace(/\u200B/gi, "");
                    }
                })(a);
                editor.selection.restore();
            }
        }
        /**
         * @param {!Object} event
         * @return {?}
         */
        function trigger(event) {
            if (-1 != navigator.userAgent.indexOf("Mac OS X")) {
                if (event.metaKey && !event.altKey) {
                    return true;
                }
            } else {
                if (event.ctrlKey && !event.altKey) {
                    return true;
                }
            }
            return false;
        }
        /**
         * @param {?} start
         * @return {?}
         */
        function remove(start) {
            if (start >= $.FE.KEYCODE.ARROW_LEFT && start <= $.FE.KEYCODE.ARROW_DOWN) {
                return true;
            }
        }
        /**
         * @param {number} keyCode
         * @return {?}
         */
        function callback(keyCode) {
            if (keyCode >= $.FE.KEYCODE.ZERO && keyCode <= $.FE.KEYCODE.NINE) {
                return true;
            }
            if (keyCode >= $.FE.KEYCODE.NUM_ZERO && keyCode <= $.FE.KEYCODE.NUM_MULTIPLY) {
                return true;
            }
            if (keyCode >= $.FE.KEYCODE.A && keyCode <= $.FE.KEYCODE.Z) {
                return true;
            }
            if (editor.browser.webkit && 0 === keyCode) {
                return true;
            }
            switch(keyCode) {
                case $.FE.KEYCODE.SPACE:
                case $.FE.KEYCODE.QUESTION_MARK:
                case $.FE.KEYCODE.NUM_PLUS:
                case $.FE.KEYCODE.NUM_MINUS:
                case $.FE.KEYCODE.NUM_PERIOD:
                case $.FE.KEYCODE.NUM_DIVISION:
                case $.FE.KEYCODE.SEMICOLON:
                case $.FE.KEYCODE.FF_SEMICOLON:
                case $.FE.KEYCODE.DASH:
                case $.FE.KEYCODE.EQUALS:
                case $.FE.KEYCODE.FF_EQUALS:
                case $.FE.KEYCODE.COMMA:
                case $.FE.KEYCODE.PERIOD:
                case $.FE.KEYCODE.SLASH:
                case $.FE.KEYCODE.APOSTROPHE:
                case $.FE.KEYCODE.SINGLE_QUOTE:
                case $.FE.KEYCODE.OPEN_SQUARE_BRACKET:
                case $.FE.KEYCODE.BACKSLASH:
                case $.FE.KEYCODE.CLOSE_SQUARE_BRACKET:
                    return true;
                default:
                    return false;
            }
        }
        /**
         * @param {!Object} event
         * @return {?}
         */
        function onKeyDown(event) {
            var keyCode = event.which;
            if (trigger(event) || 37 <= keyCode && keyCode <= 40 || !callback(keyCode) && keyCode != $.FE.KEYCODE.DELETE && keyCode != $.FE.KEYCODE.BACKSPACE && keyCode != $.FE.KEYCODE.ENTER && keyCode != $.FE.KEYCODE.IME) {
                return true;
            }
            if (!_takingTooLongTimeout) {
                gridSubStep = editor.snapshot.get();
                if (!editor.undo.canDo()) {
                    editor.undo.saveStep();
                }
            }
            clearTimeout(_takingTooLongTimeout);
            /** @type {number} */
            _takingTooLongTimeout = setTimeout(function() {
                /** @type {null} */
                _takingTooLongTimeout = null;
                editor.undo.saveStep();
            }, Math.max(250, editor.opts.typingTimer));
        }
        /**
         * @param {!Object} event
         * @return {?}
         */
        function start(event) {
            var code = event.which;
            if (trigger(event) || 37 <= code && code <= 40) {
                return true;
            }
            if (gridSubStep && _takingTooLongTimeout) {
                editor.undo.saveStep(gridSubStep);
                /** @type {null} */
                gridSubStep = null;
            } else {
                if (!(void 0 !== code && 0 !== code || gridSubStep || _takingTooLongTimeout)) {
                    editor.undo.saveStep();
                }
            }
        }
        /**
         * @param {!Node} element
         * @return {?}
         */
        function getValue(element) {
            if (element && "BR" == element.tagName) {
                return false;
            }
            try {
                return 0 === (element.textContent || "").length && element.querySelector && !element.querySelector(":scope > br") || element.childNodes && 1 == element.childNodes.length && element.childNodes[0].getAttribute && ("false" == element.childNodes[0].getAttribute("contenteditable") || editor.node.hasClass(element.childNodes[0], "fr-img-caption"));
            } catch (t) {
                return false;
            }
        }
        /**
         * @param {!Event} e
         * @return {?}
         */
        function insert(e) {
            var options = editor.el.childNodes;
            var n = editor.html.defaultTag();
            return !(!e.target || e.target === editor.el) || (0 === options.length || void(editor.$el.outerHeight() - e.offsetY <= 10 ? getValue(options[options.length - 1]) && (n ? editor.$el.append("<" + n + ">" + $.FE.MARKERS + "<br></" + n + ">") : editor.$el.append($.FE.MARKERS + "<br>"), editor.selection.restore(), setup()) : e.offsetY <= 10 && getValue(options[0]) && (n ? editor.$el.prepend("<" + n + ">" + $.FE.MARKERS + "<br></" + n + ">") : editor.$el.prepend($.FE.MARKERS + "<br>"), editor.selection.restore(),
                setup())));
        }
        /**
         * @return {undefined}
         */
        function done() {
            if (_takingTooLongTimeout) {
                clearTimeout(_takingTooLongTimeout);
            }
        }
        var TAB_KEY;
        var _takingTooLongTimeout;
        var gridSubStep;
        /** @type {boolean} */
        var c = false;
        return {
            _init : function() {
                editor.events.on("keydown", onKeyDown);
                editor.events.on("input", parse);
                editor.events.on("mousedown", handler);
                editor.events.on("keyup input", start);
                editor.events.on("keypress", addLayer);
                editor.events.on("keydown", update);
                editor.events.on("keyup", init);
                editor.events.on("destroy", done);
                editor.events.on("html.inserted", init);
                editor.events.on("cut", render);
                editor.events.on("click", insert);
            },
            ctrlKey : trigger,
            isCharacter : callback,
            isArrow : remove,
            forceUndo : function() {
                if (_takingTooLongTimeout) {
                    clearTimeout(_takingTooLongTimeout);
                    editor.undo.saveStep();
                    /** @type {null} */
                    gridSubStep = null;
                }
            },
            isIME : function() {
                return c;
            },
            isBrowserAction : function(event) {
                var keyCode = event.which;
                return trigger(event) || keyCode == $.FE.KEYCODE.F5;
            },
            positionCaret : setup
        };
    };
    /**
     * @param {!Object} editor
     * @return {?}
     */
    $.FE.MODULES.accessibility = function(editor) {
        /**
         * @param {!Object} e
         * @return {undefined}
         */
        function init(e) {
            if (e && e.length && !editor.$el.find('[contenteditable="true"]').is(":focus")) {
                if (!(e.data("blur-event-set") || e.parents(".fr-popup").length)) {
                    editor.events.$on(e, "blur", function() {
                        var inst = e.parents(".fr-toolbar, .fr-popup").data("instance") || editor;
                        if (inst.events.blurActive()) {
                            inst.events.trigger("blur");
                        }
                        setTimeout(function() {
                            inst.events.enableBlur();
                        }, 100);
                    }, true);
                    e.data("blur-event-set", true);
                }
                (e.parents(".fr-toolbar, .fr-popup").data("instance") || editor).events.disableBlur();
                e.focus();
                /** @type {!Object} */
                editor.shared.$f_el = e;
            }
        }
        /**
         * @param {!Array} value
         * @param {string} reverse
         * @return {?}
         */
        function find(value, reverse) {
            /** @type {string} */
            var method = reverse ? "last" : "first";
            var childProcesses = value.find("button:visible:not(.fr-disabled), .fr-group span.fr-command:visible")[method]();
            if (childProcesses.length) {
                return init(childProcesses), true;
            }
        }
        /**
         * @param {!Object} date
         * @return {?}
         */
        function fn(date) {
            return date.is("input, textarea, select") && get(), editor.events.disableBlur(), date.focus(), true;
        }
        /**
         * @param {!Object} data
         * @param {string} options
         * @return {?}
         */
        function create(data, options) {
            var date = data.find("input, textarea, button, select").filter(":visible").not(":disabled").filter(options ? ":last" : ":first");
            if (date.length) {
                return fn(date);
            }
            if (editor.shared.with_kb) {
                var date = data.find(".fr-active-item:visible:first");
                if (date.length) {
                    return fn(date);
                }
                var dataParsed = data.find("[tabIndex]:visible:first");
                if (dataParsed.length) {
                    return fn(dataParsed);
                }
            }
        }
        /**
         * @return {undefined}
         */
        function get() {
            if (0 === editor.$el.find(".fr-marker").length && editor.core.hasFocus()) {
                editor.selection.save();
            }
        }
        /**
         * @return {?}
         */
        function remove() {
            var $insert_helper = editor.popups.areVisible();
            if ($insert_helper) {
                var docs = $insert_helper.find(".fr-buttons");
                return docs.find("button:focus, .fr-group span:focus").length ? !find($insert_helper.data("instance").$tb) : !find(docs);
            }
            return !find(editor.$tb);
        }
        /**
         * @return {?}
         */
        function normalize() {
            /** @type {null} */
            var e = null;
            return editor.shared.$f_el.is(".fr-dropdown.fr-active") ? e = editor.shared.$f_el : editor.shared.$f_el.closest(".fr-dropdown-menu").prev().is(".fr-dropdown.fr-active") && (e = editor.shared.$f_el.closest(".fr-dropdown-menu").prev()), e;
        }
        /**
         * @param {?} e
         * @param {boolean} t
         * @param {boolean} val
         * @return {?}
         */
        function next(e, t, val) {
            if (editor.shared.$f_el) {
                var y = normalize();
                if (y) {
                    editor.button.click(y);
                    editor.shared.$f_el = y;
                }
                var images = e.find("button:visible:not(.fr-disabled), .fr-group span.fr-command:visible");
                var key = images.index(editor.shared.$f_el);
                if (0 === key && !val || key == images.length - 1 && val) {
                    var WHITE;
                    if (t) {
                        if (e.parent().is(".fr-popup")) {
                            /** @type {boolean} */
                            WHITE = !create(e.parent().children().not(".fr-buttons"), !val);
                        }
                        if (false === WHITE) {
                            /** @type {null} */
                            editor.shared.$f_el = null;
                        }
                    }
                    if (!(t && false === WHITE)) {
                        find(e, !val);
                    }
                } else {
                    init($(images.get(key + (val ? 1 : -1))));
                }
                return false;
            }
        }
        /**
         * @param {?} e
         * @param {boolean} input
         * @return {?}
         */
        function c(e, input) {
            return next(e, input, true);
        }
        /**
         * @param {?} e
         * @param {boolean} name
         * @return {?}
         */
        function f(e, name) {
            return next(e, name);
        }
        /**
         * @param {boolean} pkg
         * @return {?}
         */
        function run(pkg) {
            if (editor.shared.$f_el) {
                var c;
                if (editor.shared.$f_el.is(".fr-dropdown.fr-active")) {
                    return init(c = pkg ? editor.shared.$f_el.next().find(".fr-command:not(.fr-disabled)").first() : editor.shared.$f_el.next().find(".fr-command:not(.fr-disabled)").last()), false;
                }
                if (editor.shared.$f_el.is("a.fr-command")) {
                    return (c = pkg ? editor.shared.$f_el.closest("li").nextAll(":visible:first").find(".fr-command:not(.fr-disabled)").first() : editor.shared.$f_el.closest("li").prevAll(":visible:first").find(".fr-command:not(.fr-disabled)").first()).length || (c = pkg ? editor.shared.$f_el.closest(".fr-dropdown-menu").find(".fr-command:not(.fr-disabled)").first() : editor.shared.$f_el.closest(".fr-dropdown-menu").find(".fr-command:not(.fr-disabled)").last()), init(c), false;
                }
            }
        }
        /**
         * @return {?}
         */
        function update() {
            if (editor.shared.$f_el) {
                if (editor.shared.$f_el.hasClass("fr-dropdown")) {
                    editor.button.click(editor.shared.$f_el);
                } else {
                    if (editor.shared.$f_el.is("button.fr-back")) {
                        if (editor.opts.toolbarInline) {
                            editor.events.disableBlur();
                            editor.events.focus();
                        }
                        var id = editor.popups.areVisible(editor);
                        if (id) {
                            /** @type {boolean} */
                            editor.shared.with_kb = false;
                        }
                        editor.button.click(editor.shared.$f_el);
                        render(id);
                    } else {
                        if (editor.events.disableBlur(), editor.button.click(editor.shared.$f_el), editor.shared.$f_el.attr("data-popup")) {
                            var instance = editor.popups.areVisible(editor);
                            if (instance) {
                                instance.data("popup-button", editor.shared.$f_el);
                            }
                        } else {
                            if (editor.shared.$f_el.attr("data-modal")) {
                                var instance = editor.modals.areVisible(editor);
                                if (instance) {
                                    instance.data("modal-button", editor.shared.$f_el);
                                }
                            }
                        }
                        /** @type {null} */
                        editor.shared.$f_el = null;
                    }
                }
                return false;
            }
        }
        /**
         * @return {undefined}
         */
        function back() {
            if (editor.shared.$f_el) {
                editor.events.disableBlur();
                editor.shared.$f_el.blur();
                /** @type {null} */
                editor.shared.$f_el = null;
            }
            if (false !== editor.events.trigger("toolbar.focusEditor")) {
                editor.events.disableBlur();
                editor.$el.focus();
                editor.events.focus();
            }
        }
        /**
         * @param {string} key
         * @return {undefined}
         */
        function setup(key) {
            if (key && key.length) {
                editor.events.$on(key, "keydown", function(level) {
                    if (!$(level.target).is("a.fr-command, button.fr-command, .fr-group span.fr-command")) {
                        return true;
                    }
                    var inst = key.parents(".fr-popup").data("instance") || key.data("instance") || editor;
                    /** @type {boolean} */
                    editor.shared.with_kb = true;
                    var capped = inst.accessibility.exec(level, key);
                    return editor.shared.with_kb = false, capped;
                }, true);
                editor.events.$on(key, "mouseenter", "[tabIndex]", function(event) {
                    var self = key.parents(".fr-popup").data("instance") || key.data("instance") || editor;
                    if (!i) {
                        return event.stopPropagation(), void event.preventDefault();
                    }
                    var $ignored = $(event.currentTarget);
                    if (self.shared.$f_el && self.shared.$f_el.not($ignored)) {
                        self.accessibility.focusEditor();
                    }
                }, true);
            }
        }
        /**
         * @param {!Object} $
         * @return {undefined}
         */
        function render($) {
            var t = $.data("popup-button");
            if (t) {
                setTimeout(function() {
                    init(t);
                    $.data("popup-button", null);
                }, 0);
            }
        }
        /**
         * @param {!Array} key
         * @return {undefined}
         */
        function toggle(key) {
            var cache_result = editor.popups.areVisible(key);
            if (cache_result) {
                cache_result.data("popup-button", null);
            }
        }
        /**
         * @param {!Event} e
         * @return {?}
         */
        function start(e) {
            var t = -1 != navigator.userAgent.indexOf("Mac OS X") ? e.metaKey : e.ctrlKey;
            if (e.which == $.FE.KEYCODE.F10 && !t && !e.shiftKey && e.altKey) {
                /** @type {boolean} */
                editor.shared.with_kb = true;
                var editorElem = editor.popups.areVisible(editor);
                /** @type {boolean} */
                var button = false;
                return editorElem && (button = create(editorElem.children().not(".fr-buttons"))), button || remove(), editor.shared.with_kb = false, e.preventDefault(), e.stopPropagation(), false;
            }
            return true;
        }
        /** @type {boolean} */
        var i = true;
        return {
            _init : function() {
                if (editor.$wp) {
                    editor.events.on("keydown", start, true);
                } else {
                    editor.events.$on(editor.$win, "keydown", start, true);
                }
                editor.events.on("mousedown", function(event) {
                    toggle(editor);
                    if (editor.shared.$f_el) {
                        editor.accessibility.restoreSelection();
                        event.stopPropagation();
                        editor.events.disableBlur();
                        /** @type {null} */
                        editor.shared.$f_el = null;
                    }
                }, true);
                editor.events.on("blur", function() {
                    /** @type {null} */
                    editor.shared.$f_el = null;
                    toggle(editor);
                }, true);
            },
            registerPopup : function(n) {
                var e;
                var d;
                var input = editor.popups.get(n);
                var c = (e = n, d = editor.popups.get(e), {
                    _tiKeydown : function(event) {
                        var self = d.data("instance") || editor;
                        if (false === self.events.trigger("popup.tab", [event])) {
                            return false;
                        }
                        var key = event.which;
                        var r = d.find(":focus:first");
                        if ($.FE.KEYCODE.TAB == key) {
                            event.preventDefault();
                            var headers = d.children().not(".fr-buttons");
                            var bcofl_checkbox = headers.find("input, textarea, button, select").filter(":visible").not(".fr-no-touch input, .fr-no-touch textarea, .fr-no-touch button, .fr-no-touch select, :disabled").toArray();
                            var i = bcofl_checkbox.indexOf(this) + (event.shiftKey ? -1 : 1);
                            if (0 <= i && i < bcofl_checkbox.length) {
                                return self.events.disableBlur(), $(bcofl_checkbox[i]).focus(), event.stopPropagation(), false;
                            }
                            var message = d.find(".fr-buttons");
                            if (message.length && find(message, !!event.shiftKey)) {
                                return event.stopPropagation(), false;
                            }
                            if (create(headers)) {
                                return event.stopPropagation(), false;
                            }
                        } else {
                            if ($.FE.KEYCODE.ENTER != key || !event.target || "TEXTAREA" === event.target.tagName) {
                                return $.FE.KEYCODE.ESC == key ? (event.preventDefault(), event.stopPropagation(), self.accessibility.restoreSelection(), self.popups.isVisible(e) && d.find(".fr-back:visible").length ? (self.opts.toolbarInline && (self.events.disableBlur(), self.events.focus()), self.button.exec(d.find(".fr-back:visible:first")), render(d)) : self.popups.isVisible(e) && d.find(".fr-dismiss:visible").length ? self.button.exec(d.find(".fr-dismiss:visible:first")) : (self.popups.hide(e), self.opts.toolbarInline &&
                                self.toolbar.showInline(null, true), render(d)), false) : $.FE.KEYCODE.SPACE == key && (r.is(".fr-submit") || r.is(".fr-dismiss")) ? (event.preventDefault(), event.stopPropagation(), self.events.disableBlur(), self.button.exec(r), true) : self.keys.isBrowserAction(event) ? void event.stopPropagation() : r.is("input[type=text], textarea") ? void event.stopPropagation() : $.FE.KEYCODE.SPACE == key && (r.is(".fr-link-attr") || r.is("input[type=file]")) ? void event.stopPropagation() :
                                    (event.stopPropagation(), event.preventDefault(), false);
                            }
                            /** @type {null} */
                            var l = null;
                            if (0 < d.find(".fr-submit:visible").length) {
                                l = d.find(".fr-submit:visible:first");
                            } else {
                                if (d.find(".fr-dismiss:visible").length) {
                                    l = d.find(".fr-dismiss:visible:first");
                                }
                            }
                            if (l) {
                                event.preventDefault();
                                event.stopPropagation();
                                self.events.disableBlur();
                                self.button.exec(l);
                            }
                        }
                    },
                    _tiMouseenter : function() {
                        var item = d.data("instance") || editor;
                        toggle(item);
                    }
                });
                setup(input.find(".fr-buttons"));
                editor.events.$on(input, "mouseenter", "tabIndex", c._tiMouseenter, true);
                editor.events.$on(input.children().not(".fr-buttons"), "keydown", "[tabIndex]", c._tiKeydown, true);
                editor.popups.onHide(n, function() {
                    (input.data("instance") || editor).accessibility.restoreSelection();
                });
                editor.popups.onShow(n, function() {
                    /** @type {boolean} */
                    i = false;
                    setTimeout(function() {
                        /** @type {boolean} */
                        i = true;
                    }, 0);
                });
            },
            registerToolbar : setup,
            focusToolbarElement : init,
            focusToolbar : find,
            focusContent : create,
            focusPopup : function($gallery) {
                var video = $gallery.children().not(".fr-buttons");
                if (!video.data("mouseenter-event-set")) {
                    editor.events.$on(video, "mouseenter", "[tabIndex]", function(event) {
                        var inst = $gallery.data("instance") || editor;
                        if (!i) {
                            return event.stopPropagation(), void event.preventDefault();
                        }
                        var n = video.find(":focus:first");
                        if (n.length && !n.is("input, button, textarea, select")) {
                            inst.events.disableBlur();
                            n.blur();
                            inst.events.disableBlur();
                            inst.events.focus();
                        }
                    });
                    video.data("mouseenter-event-set", true);
                }
                if (!create(video) && editor.shared.with_kb) {
                    find($gallery.find(".fr-buttons"));
                }
            },
            focusModal : function(elem) {
                if (!editor.core.hasFocus()) {
                    editor.events.disableBlur();
                    editor.events.focus();
                }
                editor.accessibility.saveSelection();
                editor.events.disableBlur();
                editor.$el.blur();
                editor.selection.clear();
                editor.events.disableBlur();
                if (editor.shared.with_kb) {
                    elem.find(".fr-command[tabIndex], [tabIndex]").first().focus();
                } else {
                    elem.find("[tabIndex]:first").focus();
                }
            },
            focusEditor : back,
            focusPopupButton : render,
            focusModalButton : function(elem) {
                var t = elem.data("modal-button");
                if (t) {
                    setTimeout(function() {
                        init(t);
                        elem.data("modal-button", null);
                    }, 0);
                }
            },
            hasFocus : function() {
                return null != editor.shared.$f_el;
            },
            exec : function(event, value) {
                var shiftDown = -1 != navigator.userAgent.indexOf("Mac OS X") ? event.metaKey : event.ctrlKey;
                var key = event.which;
                /** @type {boolean} */
                var result = false;
                return key != $.FE.KEYCODE.TAB || shiftDown || event.shiftKey || event.altKey ? key != $.FE.KEYCODE.ARROW_RIGHT || shiftDown || event.shiftKey || event.altKey ? key != $.FE.KEYCODE.TAB || shiftDown || !event.shiftKey || event.altKey ? key != $.FE.KEYCODE.ARROW_LEFT || shiftDown || event.shiftKey || event.altKey ? key != $.FE.KEYCODE.ARROW_UP || shiftDown || event.shiftKey || event.altKey ? key != $.FE.KEYCODE.ARROW_DOWN || shiftDown || event.shiftKey || event.altKey ? key != $.FE.KEYCODE.ENTER &&
                key != $.FE.KEYCODE.SPACE || shiftDown || event.shiftKey || event.altKey ? key != $.FE.KEYCODE.ESC || shiftDown || event.shiftKey || event.altKey ? key != $.FE.KEYCODE.F10 || shiftDown || event.shiftKey || !event.altKey || (result = remove()) : result = function(entityProto) {
                    if (editor.shared.$f_el) {
                        var t = normalize();
                        return t ? (editor.button.click(t), init(t)) : entityProto.parent().find(".fr-back:visible").length ? (editor.shared.with_kb = false, editor.opts.toolbarInline && (editor.events.disableBlur(), editor.events.focus()), editor.button.exec(entityProto.parent().find(".fr-back:visible:first")), render(entityProto.parent())) : editor.shared.$f_el.is("button, .fr-group span") && (entityProto.parent().is(".fr-popup") ? (editor.accessibility.restoreSelection(), editor.shared.$f_el = null, false !==
                        editor.events.trigger("toolbar.esc") && (editor.popups.hide(entityProto.parent()), editor.opts.toolbarInline && editor.toolbar.showInline(null, true), render(entityProto.parent()))) : back()), false;
                    }
                }(value) : result = update() : result = editor.shared.$f_el && editor.shared.$f_el.is(".fr-dropdown:not(.fr-active)") ? update() : run(true) : result = run() : result = f(value) : result = f(value, true) : result = c(value) : result = c(value, true), editor.shared.$f_el || result !== undefined || (result = true), !result && editor.keys.isBrowserAction(event) && (result = true), !!result || (event.preventDefault(), event.stopPropagation(), false);
            },
            saveSelection : get,
            restoreSelection : function() {
                if (editor.$el.find(".fr-marker").length) {
                    editor.events.disableBlur();
                    editor.selection.restore();
                    editor.events.enableBlur();
                }
            }
        };
    };
    /**
     * @param {!Object} editor
     * @return {?}
     */
    $.FE.MODULES.format = function(editor) {
        /**
         * @param {!Object} value
         * @param {!Object} action
         * @return {?}
         */
        function format(value, action) {
            /** @type {string} */
            var txt = "<" + value;
            var actionProperty;
            for (actionProperty in action) {
                if (action.hasOwnProperty(actionProperty)) {
                    /** @type {string} */
                    txt = txt + (" " + actionProperty + '="' + action[actionProperty] + '"');
                }
            }
            return txt = txt + ">";
        }
        /**
         * @param {!Object} data
         * @param {!Array} value
         * @return {?}
         */
        function handler(data, value) {
            /** @type {!Object} */
            var test = data;
            var key;
            for (key in value) {
                if (value.hasOwnProperty(key)) {
                    test = test + ("id" == key ? "#" + value[key] : "class" == key ? "." + value[key] : "[" + key + '="' + value[key] + '"]');
                }
            }
            return test;
        }
        /**
         * @param {!Object} el
         * @param {?} expr
         * @return {?}
         */
        function matches(el, expr) {
            return !(!el || el.nodeType != Node.ELEMENT_NODE) && (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, expr);
        }
        /**
         * @param {!Node} node
         * @param {!Object} name
         * @param {!Array} index
         * @return {?}
         */
        function add(node, name, index) {
            if (node) {
                for (; node.nodeType === Node.COMMENT_NODE;) {
                    node = node.nextSibling;
                }
                if (node) {
                    if (editor.node.isBlock(node) && "HR" !== node.tagName) {
                        return add(node.firstChild, name, index), false;
                    }
                    var $el = $(format(name, index)).insertBefore(node);
                    /** @type {!Node} */
                    var elem = node;
                    for (; elem && !$(elem).is(".fr-marker") && 0 === $(elem).find(".fr-marker").length && "UL" != elem.tagName && "OL" != elem.tagName;) {
                        var em = elem;
                        elem = elem.nextSibling;
                        $el.append(em);
                    }
                    if (elem) {
                        if ($(elem).find(".fr-marker").length || "UL" == elem.tagName || "OL" == elem.tagName) {
                            add(elem.firstChild, name, index);
                        }
                    } else {
                        var target = $el.get(0).parentNode;
                        for (; target && !target.nextSibling && !editor.node.isElement(target);) {
                            target = target.parentNode;
                        }
                        if (target) {
                            var node = target.nextSibling;
                            if (node) {
                                if (editor.node.isBlock(node)) {
                                    if ("HR" === node.tagName) {
                                        add(node.nextSibling, name, index);
                                    } else {
                                        add(node.firstChild, name, index);
                                    }
                                } else {
                                    add(node, name, index);
                                }
                            }
                        }
                    }
                    if ($el.is(":empty")) {
                        $el.remove();
                    }
                }
            }
        }
        /**
         * @param {!Object} key
         * @param {?} options
         * @return {undefined}
         */
        function render(key, options) {
            var j;
            if (void 0 === options && (options = {}), options.style && delete options.style, editor.selection.isCollapsed()) {
                editor.markers.insert();
                editor.$el.find(".fr-marker").replaceWith(format(key, options) + $.FE.INVISIBLE_SPACE + $.FE.MARKERS + ("</" + key + ">"));
                editor.selection.restore();
            } else {
                var selector;
                editor.selection.save();
                add(editor.$el.find('.fr-marker[data-type="true"]').get(0).nextSibling, key, options);
                do {
                    selector = editor.$el.find(handler(key, options) + " > " + handler(key, options));
                    /** @type {number} */
                    j = 0;
                    for (; j < selector.length; j++) {
                        selector[j].outerHTML = selector[j].innerHTML;
                    }
                } while (selector.length);
                editor.el.normalize();
                var crowdC2 = editor.el.querySelectorAll(".fr-marker");
                /** @type {number} */
                j = 0;
                for (; j < crowdC2.length; j++) {
                    var i = $(crowdC2[j]);
                    if (true === i.data("type")) {
                        if (matches(i.get(0).nextSibling, handler(key, options))) {
                            i.next().prepend(i);
                        }
                    } else {
                        if (matches(i.get(0).previousSibling, handler(key, options))) {
                            i.prev().append(i);
                        }
                    }
                }
                editor.selection.restore();
            }
        }
        /**
         * @param {!Object} obj
         * @param {?} node
         * @param {!Array} prop
         * @param {boolean} r
         * @return {?}
         */
        function callback(obj, node, prop, r) {
            if (!r) {
                /** @type {boolean} */
                var o = false;
                if (true === obj.data("type")) {
                    for (; editor.node.isFirstSibling(obj.get(0)) && !obj.parent().is(editor.$el) && !obj.parent().is("ol") && !obj.parent().is("ul");) {
                        obj.parent().before(obj);
                        /** @type {boolean} */
                        o = true;
                    }
                } else {
                    if (false === obj.data("type")) {
                        for (; editor.node.isLastSibling(obj.get(0)) && !obj.parent().is(editor.$el) && !obj.parent().is("ol") && !obj.parent().is("ul");) {
                            obj.parent().after(obj);
                            /** @type {boolean} */
                            o = true;
                        }
                    }
                }
                if (o) {
                    return true;
                }
            }
            if (obj.parents(node).length || void 0 === node) {
                /** @type {string} */
                var value = "";
                /** @type {string} */
                var a = "";
                var element = obj.parent();
                if (element.is(editor.$el) || editor.node.isBlock(element.get(0))) {
                    return false;
                }
                for (; !editor.node.isBlock(element.parent().get(0)) && (void 0 === node || void 0 !== node && !matches(element.get(0), handler(node, prop)));) {
                    value = value + editor.node.closeTagString(element.get(0));
                    a = editor.node.openTagString(element.get(0)) + a;
                    element = element.parent();
                }
                var p = obj.get(0).outerHTML;
                obj.replaceWith('<span id="mark"></span>');
                var d = element.html().replace(/<span id="mark"><\/span>/, value + editor.node.closeTagString(element.get(0)) + a + p + value + editor.node.openTagString(element.get(0)) + a);
                return element.replaceWith(editor.node.openTagString(element.get(0)) + d + editor.node.closeTagString(element.get(0))), true;
            }
            return false;
        }
        /**
         * @param {?} key
         * @param {?} object
         * @return {undefined}
         */
        function remove(key, object) {
            if (void 0 === object) {
                object = {};
            }
            if (object.style) {
                delete object.style;
            }
            var x_rect = editor.selection.isCollapsed();
            editor.selection.save();
            /** @type {boolean} */
            var o = true;
            for (; o;) {
                /** @type {boolean} */
                o = false;
                var bcofl_checkbox = editor.$el.find(".fr-marker");
                /** @type {number} */
                var i = 0;
                for (; i < bcofl_checkbox.length; i++) {
                    var clone = $(bcofl_checkbox[i]);
                    /** @type {null} */
                    var tagToSwapWith = null;
                    if (clone.attr("data-cloned") || x_rect || (tagToSwapWith = clone.clone().removeClass("fr-marker").addClass("fr-clone"), true === clone.data("type") ? clone.attr("data-cloned", true).after(tagToSwapWith) : clone.attr("data-cloned", true).before(tagToSwapWith)), callback(clone, key, object, x_rect)) {
                        /** @type {boolean} */
                        o = true;
                        break;
                    }
                }
            }
            !function render(t, result, element, callback) {
                var bodyChildNodes = editor.node.contents(t.get(0));
                /** @type {number} */
                var i = 0;
                for (; i < bodyChildNodes.length; i++) {
                    var node = bodyChildNodes[i];
                    if (editor.node.hasClass(node, "fr-marker")) {
                        /** @type {number} */
                        result = (result + 1) % 2;
                    } else {
                        if (result) {
                            if (0 < $(node).find(".fr-marker").length) {
                                result = render($(node), result, element, callback);
                            } else {
                                var forgottenTemplates = $(node).find(element || "*:not(a):not(br)");
                                /** @type {number} */
                                var i = forgottenTemplates.length - 1;
                                for (; 0 <= i; i--) {
                                    var el = forgottenTemplates[i];
                                    if (editor.node.isBlock(el) || editor.node.isVoid(el) || void 0 !== element && !matches(el, handler(element, callback))) {
                                        if (editor.node.isBlock(el) && void 0 === element && "TABLE" != node.tagName) {
                                            editor.node.clearAttributes(el);
                                        }
                                    } else {
                                        if (!editor.node.hasClass(el, "fr-clone")) {
                                            el.outerHTML = el.innerHTML;
                                        }
                                    }
                                }
                                if (void 0 === element && node.nodeType == Node.ELEMENT_NODE && !editor.node.isVoid(node) || matches(node, handler(element, callback))) {
                                    $(node).replaceWith(node.innerHTML);
                                } else {
                                    if (void 0 === element && node.nodeType == Node.ELEMENT_NODE && editor.node.isBlock(node) && "TABLE" != node.tagName) {
                                        editor.node.clearAttributes(node);
                                    }
                                }
                            }
                        } else {
                            if (0 < $(node).find(".fr-marker").length) {
                                result = render($(node), result, element, callback);
                            }
                        }
                    }
                }
                return result;
            }(editor.$el, 0, key, object);
            if (!x_rect) {
                editor.$el.find(".fr-marker").remove();
                editor.$el.find(".fr-clone").removeClass("fr-clone").addClass("fr-marker");
            }
            if (x_rect) {
                editor.$el.find(".fr-marker").before($.FE.INVISIBLE_SPACE).after($.FE.INVISIBLE_SPACE);
            }
            editor.html.cleanEmptyTags();
            editor.el.normalize();
            editor.selection.restore();
        }
        /**
         * @param {string} f
         * @param {string} i
         * @return {undefined}
         */
        function init(f, i) {
            var colIndex;
            var $img;
            var html;
            var i;
            var $this;
            /** @type {null} */
            var node = null;
            if (editor.selection.isCollapsed()) {
                editor.markers.insert();
                var value = ($img = editor.$el.find(".fr-marker")).parent();
                if (editor.node.openTagString(value.get(0)) == '<span style="' + f + ": " + value.css(f) + ';">') {
                    if (editor.node.isEmpty(value.get(0))) {
                        node = $('<span style="' + f + ": " + i + ';">' + $.FE.INVISIBLE_SPACE + $.FE.MARKERS + "</span>");
                        value.replaceWith(node);
                    } else {
                        var properties = {};
                        /** @type {string} */
                        properties["style*"] = f + ":";
                        callback($img, "span", properties, true);
                        $img = editor.$el.find(".fr-marker");
                        if (i) {
                            node = $('<span style="' + f + ": " + i + ';">' + $.FE.INVISIBLE_SPACE + $.FE.MARKERS + "</span>");
                            $img.replaceWith(node);
                        } else {
                            $img.replaceWith($.FE.INVISIBLE_SPACE + $.FE.MARKERS);
                        }
                    }
                    editor.html.cleanEmptyTags();
                } else {
                    if (editor.node.isEmpty(value.get(0)) && value.is("span")) {
                        $img.replaceWith($.FE.MARKERS);
                        value.css(f, i);
                    } else {
                        node = $('<span style="' + f + ": " + i + ';">' + $.FE.INVISIBLE_SPACE + $.FE.MARKERS + "</span>");
                        $img.replaceWith(node);
                    }
                }
                if (node) {
                    create(node, f, i);
                }
            } else {
                if (editor.selection.save(), null == i || "color" == f && 0 < editor.$el.find(".fr-marker").parents("u, a").length) {
                    var row = editor.$el.find(".fr-marker");
                    /** @type {number} */
                    colIndex = 0;
                    for (; colIndex < row.length; colIndex++) {
                        if (true === ($img = $(row[colIndex])).data("type")) {
                            for (; editor.node.isFirstSibling($img.get(0)) && !$img.parent().is(editor.$el) && !editor.node.isElement($img.parent().get(0)) && !editor.node.isBlock($img.parent().get(0));) {
                                $img.parent().before($img);
                            }
                        } else {
                            for (; editor.node.isLastSibling($img.get(0)) && !$img.parent().is(editor.$el) && !editor.node.isElement($img.parent().get(0)) && !editor.node.isBlock($img.parent().get(0));) {
                                $img.parent().after($img);
                            }
                        }
                    }
                }
                var instrNode = editor.$el.find('.fr-marker[data-type="true"]').get(0).nextSibling;
                var m = {
                    "class" : "fr-unprocessed"
                };
                if (i) {
                    /** @type {string} */
                    m.style = f + ": " + i + ";";
                }
                add(instrNode, "span", m);
                editor.$el.find(".fr-marker + .fr-unprocessed").each(function() {
                    $(this).prepend($(this).prev());
                });
                editor.$el.find(".fr-unprocessed + .fr-marker").each(function() {
                    $(this).prev().append(this);
                });
                if ((i || "").match(/\dem$/)) {
                    editor.$el.find("span.fr-unprocessed").removeClass("fr-unprocessed");
                }
                for (; 0 < editor.$el.find("span.fr-unprocessed").length;) {
                    if ((node = editor.$el.find("span.fr-unprocessed:first").removeClass("fr-unprocessed")).parent().get(0).normalize(), node.parent().is("span") && 1 == node.parent().get(0).childNodes.length) {
                        node.parent().css(f, i);
                        var current = node;
                        node = node.parent();
                        current.replaceWith(current.html());
                    }
                    var rowValues = node.find("span");
                    /** @type {number} */
                    colIndex = rowValues.length - 1;
                    for (; 0 <= colIndex; colIndex--) {
                        html = rowValues[colIndex];
                        /** @type {string} */
                        i = f;
                        $this = void 0;
                        ($this = $(html)).css(i, "");
                        if ("" === $this.attr("style")) {
                            $this.replaceWith($this.html());
                        }
                    }
                    create(node, f, i);
                }
            }
            !function() {
                var e;
                for (; 0 < editor.$el.find(".fr-split:empty").length;) {
                    editor.$el.find(".fr-split:empty").remove();
                }
                editor.$el.find(".fr-split").removeClass("fr-split");
                editor.$el.find('[style=""]').removeAttr("style");
                editor.$el.find('[class=""]').removeAttr("class");
                editor.html.cleanEmptyTags();
                $(editor.$el.find("span").get().reverse()).each(function() {
                    if (!(this.attributes && 0 !== this.attributes.length)) {
                        $(this).replaceWith(this.innerHTML);
                    }
                });
                editor.el.normalize();
                var $canvases = editor.$el.find("span[style] + span[style]");
                /** @type {number} */
                e = 0;
                for (; e < $canvases.length; e++) {
                    var $scrollerElement = $($canvases[e]);
                    var timeOverlay = $($canvases[e]).prev();
                    if ($scrollerElement.get(0).previousSibling == timeOverlay.get(0) && editor.node.openTagString($scrollerElement.get(0)) == editor.node.openTagString(timeOverlay.get(0))) {
                        $scrollerElement.prepend(timeOverlay.html());
                        timeOverlay.remove();
                    }
                }
                editor.$el.find("span[style] span[style]").each(function() {
                    if (0 <= $(this).attr("style").indexOf("font-size")) {
                        var sparklineElement = $(this).parents("span[style]");
                        if (0 <= sparklineElement.attr("style").indexOf("background-color")) {
                            $(this).attr("style", $(this).attr("style") + ";" + sparklineElement.attr("style"));
                            callback($(this), "span[style]", {}, false);
                        }
                    }
                });
                editor.el.normalize();
                editor.selection.restore();
            }();
        }
        /**
         * @param {!Object} element
         * @param {string} canvas
         * @param {string} value
         * @return {undefined}
         */
        function create(element, canvas, value) {
            var name;
            var check;
            var type;
            var data = element.parentsUntil(editor.$el, "span[style]");
            /** @type {!Array} */
            var result = [];
            /** @type {number} */
            name = data.length - 1;
            for (; 0 <= name; name--) {
                check = data[name];
                /** @type {string} */
                type = canvas;
                if (!(0 === $(check).attr("style").indexOf(type + ":") || 0 <= $(check).attr("style").indexOf(";" + type + ":") || 0 <= $(check).attr("style").indexOf("; " + type + ":"))) {
                    result.push(data[name]);
                }
            }
            if ((data = data.not(result)).length) {
                /** @type {string} */
                var output = "";
                /** @type {string} */
                var line = "";
                /** @type {string} */
                var s = "";
                /** @type {string} */
                var i = "";
                var node = element.get(0);
                for (; node = node.parentNode, $(node).addClass("fr-split"), output = output + editor.node.closeTagString(node), line = editor.node.openTagString($(node).clone().addClass("fr-split").get(0)) + line, data.get(0) != node && (s = s + editor.node.closeTagString(node), i = editor.node.openTagString($(node).clone().addClass("fr-split").get(0)) + i), data.get(0) != node;) {
                }
                /** @type {string} */
                var text = output + editor.node.openTagString($(data.get(0)).clone().css(canvas, value || "").get(0)) + i + element.css(canvas, "").get(0).outerHTML + s + "</span>" + line;
                element.replaceWith('<span id="fr-break"></span>');
                var html = data.get(0).outerHTML;
                $(data.get(0)).replaceWith(html.replace(/<span id="fr-break"><\/span>/g, text));
            }
        }
        /**
         * @param {string} type
         * @param {?} selector
         * @return {?}
         */
        function next(type, selector) {
            if (void 0 === selector) {
                selector = {};
            }
            if (selector.style) {
                delete selector.style;
            }
            var range = editor.selection.ranges(0);
            var start = range.startContainer;
            if (start.nodeType == Node.ELEMENT_NODE && 0 < start.childNodes.length && start.childNodes[range.startOffset] && (start = start.childNodes[range.startOffset]), !range.collapsed && start.nodeType == Node.TEXT_NODE && range.startOffset == (start.textContent || "").length) {
                for (; !editor.node.isBlock(start.parentNode) && !start.nextSibling;) {
                    start = start.parentNode;
                }
                if (start.nextSibling) {
                    start = start.nextSibling;
                }
            }
            var node = start;
            for (; node && node.nodeType == Node.ELEMENT_NODE && !matches(node, handler(type, selector));) {
                node = node.firstChild;
            }
            if (node && node.nodeType == Node.ELEMENT_NODE && matches(node, handler(type, selector))) {
                return true;
            }
            var el = start;
            if (el && el.nodeType != Node.ELEMENT_NODE) {
                el = el.parentNode;
            }
            for (; el && el.nodeType == Node.ELEMENT_NODE && el != editor.el && !matches(el, handler(type, selector));) {
                el = el.parentNode;
            }
            return !(!el || el.nodeType != Node.ELEMENT_NODE || el == editor.el || !matches(el, handler(type, selector)));
        }
        return {
            is : next,
            toggle : function(elem, callback) {
                if (next(elem, callback)) {
                    remove(elem, callback);
                } else {
                    render(elem, callback);
                }
            },
            apply : render,
            remove : remove,
            applyStyle : init,
            removeStyle : function(obj) {
                init(obj, null);
            }
        };
    };
    $.extend($.FE.DEFAULTS, {
        indentMargin : 20
    });
    $.FE.COMMANDS = {
        bold : {
            title : "Bold",
            toggle : true,
            refresh : function($btn) {
                var disabled = this.format.is("strong");
                $btn.toggleClass("fr-active", disabled).attr("aria-pressed", disabled);
            }
        },
        italic : {
            title : "Italic",
            toggle : true,
            refresh : function($btn) {
                var disabled = this.format.is("em");
                $btn.toggleClass("fr-active", disabled).attr("aria-pressed", disabled);
            }
        },
        underline : {
            title : "Underline",
            toggle : true,
            refresh : function($btn) {
                var disabled = this.format.is("u");
                $btn.toggleClass("fr-active", disabled).attr("aria-pressed", disabled);
            }
        },
        strikeThrough : {
            title : "Strikethrough",
            toggle : true,
            refresh : function($btn) {
                var disabled = this.format.is("s");
                $btn.toggleClass("fr-active", disabled).attr("aria-pressed", disabled);
            }
        },
        subscript : {
            title : "Subscript",
            toggle : true,
            refresh : function($btn) {
                var disabled = this.format.is("sub");
                $btn.toggleClass("fr-active", disabled).attr("aria-pressed", disabled);
            }
        },
        superscript : {
            title : "Superscript",
            toggle : true,
            refresh : function($btn) {
                var disabled = this.format.is("sup");
                $btn.toggleClass("fr-active", disabled).attr("aria-pressed", disabled);
            }
        },
        outdent : {
            title : "Decrease Indent"
        },
        indent : {
            title : "Increase Indent"
        },
        undo : {
            title : "Undo",
            undo : false,
            forcedRefresh : true,
            disabled : true
        },
        redo : {
            title : "Redo",
            undo : false,
            forcedRefresh : true,
            disabled : true
        },
        insertHR : {
            title : "Insert Horizontal Line"
        },
        clearFormatting : {
            title : "Clear Formatting"
        },
        selectAll : {
            title : "Select All",
            undo : false
        }
    };
    /**
     * @param {string} command
     * @param {?} update
     * @return {undefined}
     */
    $.FE.RegisterCommand = function(command, update) {
        $.FE.COMMANDS[command] = update;
    };
    /**
     * @param {!Object} editor
     * @return {?}
     */
    $.FE.MODULES.commands = function(editor) {
        /**
         * @param {string} val
         * @return {?}
         */
        function _styleLiWithBlocks(val) {
            return editor.html.defaultTag() && (val = "<" + editor.html.defaultTag() + ">" + val + "</" + editor.html.defaultTag() + ">"), val;
        }
        /**
         * @param {!Object} index
         * @param {!Function} callback
         * @return {undefined}
         */
        function remove(index, callback) {
            if (false !== editor.events.trigger("commands.before", $.merge([index], callback || []))) {
                var onEngineLoad = $.FE.COMMANDS[index] && $.FE.COMMANDS[index].callback || tags[index];
                /** @type {boolean} */
                var doFocus = true;
                /** @type {boolean} */
                var o = false;
                if ($.FE.COMMANDS[index]) {
                    if ("undefined" != typeof $.FE.COMMANDS[index].focus) {
                        doFocus = $.FE.COMMANDS[index].focus;
                    }
                    if ("undefined" != typeof $.FE.COMMANDS[index].accessibilityFocus) {
                        o = $.FE.COMMANDS[index].accessibilityFocus;
                    }
                }
                if (!editor.core.hasFocus() && doFocus && !editor.popups.areVisible() || !editor.core.hasFocus() && o && editor.accessibility.hasFocus()) {
                    editor.events.focus(true);
                }
                if ($.FE.COMMANDS[index] && false !== $.FE.COMMANDS[index].undo) {
                    if (editor.$el.find(".fr-marker").length) {
                        editor.events.disableBlur();
                        editor.selection.restore();
                    }
                    editor.undo.saveStep();
                }
                if (onEngineLoad) {
                    onEngineLoad.apply(editor, $.merge([index], callback || []));
                }
                editor.events.trigger("commands.after", $.merge([index], callback || []));
                if ($.FE.COMMANDS[index] && false !== $.FE.COMMANDS[index].undo) {
                    editor.undo.saveStep();
                }
            }
        }
        /**
         * @param {string} name
         * @param {string} type
         * @return {undefined}
         */
        function execCommand(name, type) {
            editor.format.toggle(type);
        }
        /**
         * @param {number} y
         * @return {undefined}
         */
        function init(y) {
            editor.selection.save();
            editor.html.wrap(true, true, true, true);
            editor.selection.restore();
            var stars = editor.selection.blocks();
            /** @type {number} */
            var i = 0;
            for (; i < stars.length; i++) {
                if ("LI" != stars[i].tagName && "LI" != stars[i].parentNode.tagName) {
                    var target = $(stars[i]);
                    /** @type {string} */
                    var marginFluid = "rtl" == editor.opts.direction || "rtl" == target.css("direction") ? "margin-right" : "margin-left";
                    var yi = editor.helpers.getPX(target.css(marginFluid));
                    if (target.width() < 2 * editor.opts.indentMargin && 0 < y) {
                        continue;
                    }
                    target.css(marginFluid, Math.max(yi + y * editor.opts.indentMargin, 0) || "");
                    target.removeClass("fr-temp-div");
                }
            }
            editor.selection.save();
            editor.html.unwrap();
            editor.selection.restore();
        }
        /**
         * @param {!Object} element
         * @return {?}
         */
        function filter(element) {
            return function() {
                remove(element);
            };
        }
        var tags = {
            bold : function() {
                execCommand("bold", "strong");
            },
            subscript : function() {
                if (editor.format.is("sup")) {
                    editor.format.remove("sup");
                }
                execCommand("subscript", "sub");
            },
            superscript : function() {
                if (editor.format.is("sub")) {
                    editor.format.remove("sub");
                }
                execCommand("superscript", "sup");
            },
            italic : function() {
                execCommand("italic", "em");
            },
            strikeThrough : function() {
                execCommand("strikeThrough", "s");
            },
            underline : function() {
                execCommand("underline", "u");
            },
            undo : function() {
                editor.undo.run();
            },
            redo : function() {
                editor.undo.redo();
            },
            indent : function() {
                init(1);
            },
            outdent : function() {
                init(-1);
            },
            show : function() {
                if (editor.opts.toolbarInline) {
                    editor.toolbar.showInline(null, true);
                }
            },
            insertHR : function() {
                editor.selection.remove();
                /** @type {string} */
                var i = "";
                if (editor.core.isEmpty()) {
                    i = _styleLiWithBlocks(i = "<br>");
                }
                editor.html.insert('<hr id="fr-just">' + i);
                var t;
                var n = editor.$el.find("hr#fr-just");
                if (n.removeAttr("id"), 0 === n.next().length) {
                    var r = editor.html.defaultTag();
                    if (r) {
                        n.after($("<" + r + ">").append("<br>"));
                    } else {
                        n.after("<br>");
                    }
                }
                if (n.prev().is("hr")) {
                    t = editor.selection.setAfter(n.get(0), false);
                } else {
                    if (n.next().is("hr")) {
                        t = editor.selection.setBefore(n.get(0), false);
                    } else {
                        if (!editor.selection.setAfter(n.get(0), false)) {
                            editor.selection.setBefore(n.get(0), false);
                        }
                    }
                }
                if (!(t || void 0 === t)) {
                    i = _styleLiWithBlocks(i = $.FE.MARKERS + "<br>");
                    n.after(i);
                }
                editor.selection.restore();
            },
            clearFormatting : function() {
                editor.format.remove();
            },
            selectAll : function() {
                editor.doc.execCommand("selectAll", false, false);
            }
        };
        var ret = {};
        var i;
        for (i in tags) {
            if (tags.hasOwnProperty(i)) {
                ret[i] = filter(i);
            }
        }
        return $.extend(ret, {
            exec : remove,
            _init : function() {
                editor.events.on("keydown", function(event) {
                    var oDom = editor.selection.element();
                    if (oDom && "HR" == oDom.tagName && !editor.keys.isArrow(event.which)) {
                        return event.preventDefault(), false;
                    }
                });
                editor.events.on("keyup", function(event) {
                    var node = editor.selection.element();
                    if (node && "HR" == node.tagName) {
                        if (event.which == $.FE.KEYCODE.ARROW_LEFT || event.which == $.FE.KEYCODE.ARROW_UP) {
                            if (node.previousSibling) {
                                return editor.node.isBlock(node.previousSibling) ? editor.selection.setAtEnd(node.previousSibling) : $(node).before($.FE.MARKERS), editor.selection.restore(), false;
                            }
                        } else {
                            if ((event.which == $.FE.KEYCODE.ARROW_RIGHT || event.which == $.FE.KEYCODE.ARROW_DOWN) && node.nextSibling) {
                                return editor.node.isBlock(node.nextSibling) ? editor.selection.setAtStart(node.nextSibling) : $(node).after($.FE.MARKERS), editor.selection.restore(), false;
                            }
                        }
                    }
                });
                editor.events.on("mousedown", function(event) {
                    if (event.target && "HR" == event.target.tagName) {
                        return event.preventDefault(), event.stopPropagation(), false;
                    }
                });
                editor.events.on("mouseup", function() {
                    var node = editor.selection.element();
                    if (node == editor.selection.endElement() && node && "HR" == node.tagName) {
                        if (node.nextSibling) {
                            if (editor.node.isBlock(node.nextSibling)) {
                                editor.selection.setAtStart(node.nextSibling);
                            } else {
                                $(node).after($.FE.MARKERS);
                            }
                        }
                        editor.selection.restore();
                    }
                });
            }
        });
    };
    /**
     * @param {!Object} value
     * @return {?}
     */
    $.FE.MODULES.data = function(value) {
        /**
         * @param {string} name
         * @return {?}
         */
        function bind(name) {
            return name;
        }
        /**
         * @param {number} trendId
         * @return {?}
         */
        function load(trendId) {
            var lineText = trendId.toString();
            /** @type {number} */
            var w = 0;
            /** @type {number} */
            var index = 0;
            for (; index < lineText.length; index++) {
                /** @type {number} */
                w = w + parseInt(lineText.charAt(index), 10);
            }
            return 10 < w ? w % 9 + 1 : w;
        }
        /**
         * @param {number} error
         * @param {number} output
         * @param {number} n
         * @return {?}
         */
        function next(error, output, n) {
            /** @type {number} */
            var diffVector = Math.abs(n);
            for (; 0 < diffVector--;) {
                /** @type {number} */
                error = error - output;
            }
            return n < 0 && (error = error + 123), error;
        }
        /**
         * @param {!Object} elem
         * @return {?}
         */
        function fn(elem) {
            return !(!elem || "block" === elem.css("display") || (elem.remove(), 0));
        }
        /**
         * @param {boolean} text
         * @return {?}
         */
        function toggle(text) {
            return text && 0 === value.$box.find(text).length;
        }
        /**
         * @return {?}
         */
        function _init() {
            if (10 < e && (value[bind($("0ppecjvc=="))](), setTimeout(function() {
                    /** @type {null} */
                    $.FE = null;
                }, 10)), !value.$box) {
                return false;
            }
            value.$wp.prepend($(bind($(mon))));
            row = value.$wp.find("> div:first");
            elem = row.find("> a");
            if ("rtl" == value.opts.direction) {
                row.css("left", "auto").css("right", 0).attr("direction", "rtl");
            }
            e++;
        }
        /**
         * @param {!Object} type
         * @return {?}
         */
        function init(type) {
            /** @type {!Array} */
            var variables = [$("9qqG-7amjlwq=="), $("KA3B3C2A6D1D5H5H1A3=="), $("3B9B3B5F3C4G3E3=="), $("QzbzvxyB2yA-9m=="), $("ji1kacwmgG5bc=="), $("nmA-13aogi1A3c1jd==")];
            /** @type {number} */
            var i = 0;
            for (; i < variables.length; i++) {
                if (String.prototype.endsWith || (String.prototype.endsWith = function(needle, end) {
                        return (end === undefined || end > this.length) && (end = this.length), this.substring(end - needle.length, end) === needle;
                    }), type.endsWith(variables[i])) {
                    return true;
                }
            }
            return false;
        }
        /** @type {string} */
        var mon = "NCKB1zwtPA9tqzajXC2c2A7B-16VD3spzJ1C9C3D5oOF2OB1NB1LD7VA5QF4TE3gytXB2A4C-8VA2AC4E1D3GB2EB2KC3KD1MF1juuSB1A8C6yfbmd1B2a1A5qdsdB2tivbC3CB1KC1CH1eLA2sTF1B4I4H-7B-21UB6b1F5bzzzyAB4JC3MG2hjdKC1JE6C1E1cj1pD-16pUE5B4prra2B5ZB3D3C3pxj1EA6A3rnJA2C-7I-7JD9D1E1wYH1F3sTB5TA2G4H4ZA22qZA5BB3mjcvcCC3JB1xillavC-21VE6PC5SI4YC5C8mb1A3WC3BD2B5aoDA2qqAE3A5D-17fOD1D5RD4WC10tE6OAZC3nF-7b1C4A4D3qCF2fgmapcromlHA2QA6a1E1D3e1A6C2bie2F4iddnIA7B2mvnwcIB5OA1DB2OLQA3PB10WC7WC5d1E3uI-7b1D5D6b1E4D2arlAA4EA1F-11srxI-7MB1D7PF1E5B4adB-21YD5vrZH3D3xAC4E1A2GF2CF2J-7yNC2JE1MI2hH-7QB1C6B5B-9bA-7XB13a1B5VievwpKB4LA3NF-10H-9I-8hhaC-16nqPG4wsleTD5zqYF3h1G2B7B4yvGE2Pi1H-7C-21OE6B1uLD1kI4WC1E7C5g1D-8fue1C8C6c1D4D3Hpi1CC4kvGC2E1legallyXB4axVA11rsA4A-9nkdtlmzBA2GD3A13A6CB1dabE1lezrUE6RD5TB4A-7f1C8c1B5d1D4D3tyfCD5C2D2==";
        var state = function() {
            /** @type {number} */
            var e = 0;
            /** @type {string} */
            var id = document.domain;
            /** @type {!Array<string>} */
            var charListNotLatin = id.split(".");
            /** @type {string} */
            var s = "_gd" + (new Date).getTime();
            for (; e < charListNotLatin.length - 1 && -1 == document.cookie.indexOf(s + "=" + s);) {
                /** @type {string} */
                id = charListNotLatin.slice(-1 - ++e).join(".");
                /** @type {string} */
                document.cookie = s + "=" + s + ";domain=" + id + ";";
            }
            return document.cookie = s + "=;expires=Thu, 01 Jan 1970 00:00:01 GMT;domain=" + id + ";", (id || "").replace(/(^\.*)|(\.*$)/g, "");
        }();
        var row;
        var elem;
        var $ = bind(function(record) {
            if (!record) {
                return record;
            }
            /** @type {string} */
            var msg = "";
            var i = bind("charCodeAt");
            var f = bind("fromCharCode");
            /** @type {number} */
            var o = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".indexOf(record[0]);
            /** @type {number} */
            var z = 1;
            for (; z < record.length - 2; z++) {
                var a = load(++o);
                var e = record[i](z);
                /** @type {string} */
                var def = "";
                for (; /[0-9-]/.test(record[z + 1]);) {
                    def = def + record[++z];
                }
                e = next(e, a, def = parseInt(def, 10) || 0);
                /** @type {number} */
                e = e ^ o - 1 & 31;
                msg = msg + String[f](e);
            }
            return msg;
        });
        /** @type {number} */
        var e = 0;
        return {
            _init : function() {
                var field = value.o_win.FEK;
                try {
                    field = field || localStorage && localStorage.FEK;
                } catch (v) {
                }
                field = value.opts.key || field || [""];
                var mon = $(bind("ziRA1E3B9pA5B-11D-11xg1A3ZB5D1D4B-11ED2EG2pdeoC1clIH4wB-22yQD5uF4YE3E3A9=="));
                if ("string" == typeof field) {
                    /** @type {!Array} */
                    field = [field];
                }
                var d;
                var item;
                var notProcessed;
                /** @type {boolean} */
                var srcThumb = !(value.ul = true);
                /** @type {number} */
                var a = 0;
                /** @type {number} */
                var j = 0;
                for (; j < field.length; j++) {
                    var data = (item = field[j], 3 === (notProcessed = ($(item) || "").split("|")).length ? notProcessed : [null, null, $(item) || ""]);
                    var buffer = data[2];
                    if (buffer === $(bind($("mcVRDoB1BGILD7YFe1BTXBA7B6=="))) || 0 <= buffer.indexOf(state, buffer.length - state.length) || init(state)) {
                        if (!(null === (d = data[1]) || new Date(d) < new Date($("OB1F1A4D3I1A15A11D3E6B5=="))) || init(state)) {
                            /** @type {boolean} */
                            value.ul = false;
                            break;
                        }
                        /** @type {boolean} */
                        srcThumb = true;
                        /** @type {string} */
                        mon = "RCZB17botVG4A-8yzia1C4A5DG3CD2cFB4qflmCE4I2FB1SC7F6PE4WE3RD6e2A4c1D3d1E2E3ehxdGE3CE2IB2LC1HG2LE1QA3QC7B-13cC-9epmkjc1B4e1C4pgjgvkOC5E1eNE1HB2LD2B-13WD5tvabUA5a1A4f1A2G3C2A-21cihKE3FE2DB2cccJE1iC-7G-7tD-17tVD6A-9qC-7QC7a1E4B4je1E3E2G2ecmsAA1xH-8HB11C1D1lgzQA3dTB8od1D4XE3ohb1B4E4D3mbLA10NA7C-21d1genodKC11PD9PE5tA-8UI3ZC5XB5B-11qXF2F-7wtwjAG3NA1IB1OD1HC1RD4QJ4evUF2D5XG2G4XA8pqocH1F3G2J2hcpHC4D1MD4C1MB8PD5klcQD1A8A6e2A3ed1E2A24A7HC5C3qA-9tiA-61dcC3MD1LE1D4SA3A9ZZXSE4g1C3Pa2C5ufbcGI3I2B4skLF2CA1vxB-22wgUC4kdH-8cVB5iwe1A2D3H3G-7DD5JC2ED2OH2JB10D3C2xHE1KA29PB11wdC-11C4cixb2C7a1C4YYE3B2A15uB-21wpCA1MF1NuC-21dyzD6pPG4I-7pmjc1A4yte1F3B-22yvCC3VbC-7qC-22qNE2hC1vH-8zad1RF6WF3DpI-7C8A-16hpf1F3D2ylalB-13BB2lpA-63IB3uOF6D5G4gabC-21UD2A3PH4ZA20B11b2C6ED4A2H3I1A15DB4KD2laC-8LA5B8B7==";
                        a = data[0] || -1;
                    }
                }
                /** @type {!Image} */
                var testImg = new Image;
                if (true === value.ul) {
                    _init();
                    /** @type {string} */
                    testImg.src = srcThumb ? bind($(mon)) + "e=" + a : bind($(mon)) + "u";
                }
                if (true === value.ul) {
                    value.events.on("contentChanged", function() {
                        if (fn(row) || fn(elem) || toggle(row) || toggle(elem)) {
                            _init();
                        }
                    });
                }
                value.events.on("destroy", function() {
                    if (row && row.length) {
                        row.remove();
                    }
                }, true);
            }
        };
    };
    $.extend($.FE.DEFAULTS, {
        pastePlain : false,
        pasteDeniedTags : ["colgroup", "col", "meta"],
        pasteDeniedAttrs : ["class", "id", "style"],
        pasteAllowedStyleProps : [".*"],
        pasteAllowLocalImages : false
    });
    /**
     * @param {!Object} editor
     * @return {?}
     */
    $.FE.MODULES.paste = function(editor) {
        /**
         * @param {?} value
         * @param {?} deviceId
         * @return {undefined}
         */
        function filter(value, deviceId) {
            try {
                editor.win.localStorage.setItem("fr-copied-html", value);
                editor.win.localStorage.setItem("fr-copied-text", deviceId);
            } catch (n) {
            }
        }
        /**
         * @param {!Object} e
         * @return {undefined}
         */
        function render(e) {
            var state = editor.html.getSelected();
            filter(state, $("<div>").html(state).text());
            if ("cut" == e.type) {
                editor.undo.saveStep();
                setTimeout(function() {
                    editor.selection.save();
                    editor.html.wrap();
                    editor.selection.restore();
                    editor.events.focus();
                    editor.undo.saveStep();
                }, 0);
            }
        }
        /**
         * @param {!Object} e
         * @return {?}
         */
        function start(e) {
            if (i) {
                return false;
            }
            if (e.originalEvent && (e = e.originalEvent), false === editor.events.trigger("paste.before", [e])) {
                return e.preventDefault(), false;
            }
            if (editor.$win.scrollTop(), e && e.clipboardData && e.clipboardData.getData) {
                /** @type {string} */
                var id = "";
                var type = e.clipboardData.types;
                if (editor.helpers.isArray(type)) {
                    /** @type {number} */
                    var j = 0;
                    for (; j < type.length; j++) {
                        /** @type {string} */
                        id = id + (type[j] + ";");
                    }
                } else {
                    id = type;
                }
                if (data = "", /text\/rtf/.test(id) && (alias = e.clipboardData.getData("text/rtf")), /text\/html/.test(id) && !editor.browser.safari ? data = e.clipboardData.getData("text/html") : /text\/rtf/.test(id) && editor.browser.safari ? data = alias : /public.rtf/.test(id) && editor.browser.safari && (data = e.clipboardData.getData("text/rtf")), "" !== data) {
                    return update(), e.preventDefault && (e.stopPropagation(), e.preventDefault()), false;
                }
                /** @type {null} */
                data = null;
            }
            return function() {
                editor.selection.save();
                editor.events.disableBlur();
                /** @type {null} */
                data = null;
                if (o) {
                    o.html("");
                    if (editor.browser.edge && editor.opts.iframe) {
                        editor.$el.append(o);
                    }
                } else {
                    o = $('<div contenteditable="true" style="position: fixed; top: 0; left: -9999px; height: 100%; width: 0; word-break: break-all; overflow:hidden; z-index: 2147483647; line-height: 140%; -moz-user-select: text; -webkit-user-select: text; -ms-user-select: text; user-select: text;" tabIndex="-1"></div>');
                    if (editor.browser.safari || editor.browser.chrome) {
                        o.css("top", editor.$sc.scrollTop());
                        editor.$el.after(o);
                    } else {
                        if (editor.browser.edge && editor.opts.iframe) {
                            editor.$el.append(o);
                        } else {
                            editor.$box.after(o);
                        }
                    }
                    editor.events.on("destroy", function() {
                        o.remove();
                    });
                }
                o.focus();
                editor.win.setTimeout(update, 1);
            }(), false;
        }
        /**
         * @param {!Object} e
         * @return {?}
         */
        function callback(e) {
            if (e.originalEvent && (e = e.originalEvent), e && e.dataTransfer && e.dataTransfer.getData) {
                /** @type {string} */
                var id = "";
                var type = e.dataTransfer.types;
                if (editor.helpers.isArray(type)) {
                    /** @type {number} */
                    var j = 0;
                    for (; j < type.length; j++) {
                        /** @type {string} */
                        id = id + (type[j] + ";");
                    }
                } else {
                    id = type;
                }
                if (data = "", /text\/rtf/.test(id) && (alias = e.dataTransfer.getData("text/rtf")), /text\/html/.test(id) ? data = e.dataTransfer.getData("text/html") : /text\/rtf/.test(id) && editor.browser.safari ? data = alias : /text\/plain/.test(id) && !this.browser.mozilla && (data = editor.html.escapeEntities(e.dataTransfer.getData("text/plain")).replace(/\n/g, "<br>")), "" !== data) {
                    editor.keys.forceUndo();
                    gridSubStep = editor.snapshot.get();
                    editor.selection.save();
                    editor.$el.find(".fr-marker").removeClass("fr-marker").addClass("fr-marker-helper");
                    var this_area = editor.markers.insertAtPoint(e);
                    if (editor.$el.find(".fr-marker").removeClass("fr-marker").addClass("fr-marker-placeholder"), editor.$el.find(".fr-marker-helper").addClass("fr-marker").removeClass("fr-marker-helper"), editor.selection.restore(), editor.selection.remove(), editor.$el.find(".fr-marker-placeholder").addClass("fr-marker").removeClass("fr-marker-placeholder"), false !== this_area) {
                        var nextAnchorSelector = editor.el.querySelector(".fr-marker");
                        return $(nextAnchorSelector).replaceWith($.FE.MARKERS), editor.selection.restore(), update(), e.preventDefault && (e.stopPropagation(), e.preventDefault()), false;
                    }
                } else {
                    /** @type {null} */
                    data = null;
                }
            }
        }
        /**
         * @return {undefined}
         */
        function update() {
            if (editor.browser.edge && editor.opts.iframe) {
                editor.$box.after(o);
            }
            if (!gridSubStep) {
                editor.keys.forceUndo();
                gridSubStep = editor.snapshot.get();
            }
            if (!data) {
                data = o.get(0).innerHTML;
                editor.selection.restore();
                editor.events.enableBlur();
            }
            var namespace = data.match(/(class="?Mso|class='?Mso|class="?Xl|class='?Xl|class=Xl|style="[^"]*\bmso\-|style='[^']*\bmso\-|w:WordDocument)/gi);
            var opts = editor.events.chainTrigger("paste.beforeCleanup", data);
            if (opts && "string" == typeof opts) {
                /** @type {string} */
                data = opts;
            }
            if (!namespace || namespace && false !== editor.events.trigger("paste.wordPaste", [data])) {
                init(data, namespace);
            }
        }
        /**
         * @param {number} max
         * @return {?}
         */
        function fetch(max) {
            /** @type {string} */
            var script = "";
            /** @type {number} */
            var inc = 0;
            for (; inc++ < max;) {
                /** @type {string} */
                script = script + "&nbsp;";
            }
            return script;
        }
        /**
         * @param {string} value
         * @param {?} namespace
         * @param {!Array} index
         * @return {undefined}
         */
        function init(value, namespace, index) {
            var name;
            /** @type {null} */
            var children = null;
            /** @type {null} */
            var item = null;
            if (0 <= value.toLowerCase().indexOf("<body")) {
                /** @type {string} */
                var base = "";
                if (0 <= value.indexOf("<style")) {
                    base = value.replace(/[.\s\S\w\W<>]*(<style[^>]*>[\s]*[.\s\S\w\W<>]*[\s]*<\/style>)[.\s\S\w\W<>]*/gi, "$1");
                }
                value = (value = base + value.replace(/[.\s\S\w\W<>]*<body[^>]*>[\s]*([.\s\S\w\W<>]*)[\s]*<\/body>[.\s\S\w\W<>]*/gi, "$1")).replace(/ \n/g, " ").replace(/\n /g, " ").replace(/([^>])\n([^<])/g, "$1 $2");
            }
            /** @type {boolean} */
            var i = false;
            if (0 <= value.indexOf('id="docs-internal-guid')) {
                value = value.replace(/^[\w\W\s\S]* id="docs-internal-guid[^>]*>([\w\W\s\S]*)<\/b>[\w\W\s\S]*$/g, "$1");
                /** @type {boolean} */
                i = true;
            }
            /** @type {boolean} */
            var use = false;
            if (!namespace && ((use = function(newValue) {
                    /** @type {null} */
                    var band_id = null;
                    try {
                        band_id = editor.win.localStorage.getItem("fr-copied-text");
                    } catch (n) {
                    }
                    return !(!band_id || $("<div>").html(newValue).text().replace(/\u00A0/gi, " ").replace(/\r|\n/gi, "") != band_id.replace(/\u00A0/gi, " ").replace(/\r|\n/gi, ""));
                }(value)) && (value = editor.win.localStorage.getItem("fr-copied-html")), !use)) {
                var d = editor.opts.htmlAllowedStyleProps;
                editor.opts.htmlAllowedStyleProps = editor.opts.pasteAllowedStyleProps;
                /** @type {boolean} */
                editor.opts.htmlAllowComments = false;
                value = (value = (value = value.replace(/<span class="Apple-tab-span">\s*<\/span>/g, fetch(editor.opts.tabSpaces || 4))).replace(/<span class="Apple-tab-span" style="white-space:pre">(\t*)<\/span>/g, function(canCreateDiscussions, inRevIdx) {
                    return fetch(inRevIdx.length * (editor.opts.tabSpaces || 4));
                })).replace(/\t/g, fetch(editor.opts.tabSpaces || 4));
                value = editor.clean.html(value, editor.opts.pasteDeniedTags, editor.opts.pasteDeniedAttrs);
                editor.opts.htmlAllowedStyleProps = d;
                /** @type {boolean} */
                editor.opts.htmlAllowComments = true;
                value = (value = (value = build(value)).replace(/\r/g, "")).replace(/^ */g, "").replace(/ *$/g, "");
            }
            if (!(!namespace || editor.wordPaste && index)) {
                if (0 === (value = value.replace(/^\n*/g, "").replace(/^ /g, "")).indexOf("<colgroup>")) {
                    /** @type {string} */
                    value = "<table>" + value + "</table>";
                }
                value = build(value = function(str) {
                    var i;
                    str = (str = (str = (str = (str = (str = (str = (str = (str = (str = (str = (str = (str = (str = (str = str.replace(/<p(.*?)class="?'?MsoListParagraph"?'? ([\s\S]*?)>([\s\S]*?)<\/p>/gi, "<ul><li>$3</li></ul>")).replace(/<p(.*?)class="?'?NumberedText"?'? ([\s\S]*?)>([\s\S]*?)<\/p>/gi, "<ol><li>$3</li></ol>")).replace(/<p(.*?)class="?'?MsoListParagraphCxSpFirst"?'?([\s\S]*?)(level\d)?([\s\S]*?)>([\s\S]*?)<\/p>/gi, "<ul><li$3>$5</li>")).replace(/<p(.*?)class="?'?NumberedTextCxSpFirst"?'?([\s\S]*?)(level\d)?([\s\S]*?)>([\s\S]*?)<\/p>/gi,
                        "<ol><li$3>$5</li>")).replace(/<p(.*?)class="?'?MsoListParagraphCxSpMiddle"?'?([\s\S]*?)(level\d)?([\s\S]*?)>([\s\S]*?)<\/p>/gi, "<li$3>$5</li>")).replace(/<p(.*?)class="?'?NumberedTextCxSpMiddle"?'?([\s\S]*?)(level\d)?([\s\S]*?)>([\s\S]*?)<\/p>/gi, "<li$3>$5</li>")).replace(/<p(.*?)class="?'?MsoListBullet"?'?([\s\S]*?)(level\d)?([\s\S]*?)>([\s\S]*?)<\/p>/gi, "<li$3>$5</li>")).replace(/<p(.*?)class="?'?MsoListParagraphCxSpLast"?'?([\s\S]*?)(level\d)?([\s\S]*?)>([\s\S]*?)<\/p>/gi, "<li$3>$5</li></ul>")).replace(/<p(.*?)class="?'?NumberedTextCxSpLast"?'?([\s\S]*?)(level\d)?([\s\S]*?)>([\s\S]*?)<\/p>/gi,
                        "<li$3>$5</li></ol>")).replace(/<span([^<]*?)style="?'?mso-list:Ignore"?'?([\s\S]*?)>([\s\S]*?)<span/gi, "<span><span")).replace(/\x3c!--\[if !supportLists\]--\x3e([\s\S]*?)\x3c!--\[endif\]--\x3e/gi, "")).replace(/<!\[if !supportLists\]>([\s\S]*?)<!\[endif\]>/gi, "")).replace(/(\n|\r| class=(")?Mso[a-zA-Z0-9]+(")?)/gi, " ")).replace(/\x3c!--[\s\S]*?--\x3e/gi, "")).replace(/<(\/)*(meta|link|span|\\?xml:|st1:|o:|font)(.*?)>/gi, "");
                    var beforeReplace;
                    /** @type {!Array} */
                    var badTags = ["style", "script", "applet", "embed", "noframes", "noscript"];
                    /** @type {number} */
                    i = 0;
                    for (; i < badTags.length; i++) {
                        /** @type {!RegExp} */
                        var descReplaceReg = new RegExp("<" + badTags[i] + ".*?" + badTags[i] + "(.*?)>", "gi");
                        str = str.replace(descReplaceReg, "");
                    }
                    str = (str = (str = str.replace(/&nbsp;/gi, " ")).replace(/<td([^>]*)><\/td>/g, "<td$1><br></td>")).replace(/<th([^>]*)><\/th>/g, "<th$1><br></th>");
                    for (; (str = (beforeReplace = str).replace(/<[^\/>][^>]*><\/[^>]+>/gi, "")) != beforeReplace;) {
                    }
                    str = (str = str.replace(/<lilevel([^1])([^>]*)>/gi, '<li data-indent="true"$2>')).replace(/<lilevel1([^>]*)>/gi, "<li$1>");
                    str = (str = (str = editor.clean.html(str, editor.opts.pasteDeniedTags, editor.opts.pasteDeniedAttrs)).replace(/<a>(.[^<]+)<\/a>/gi, "$1")).replace(/<br> */g, "<br>");
                    var div = editor.o_doc.createElement("div");
                    /** @type {!Object} */
                    div.innerHTML = str;
                    var edgearray = div.querySelectorAll("li[data-indent]");
                    /** @type {number} */
                    i = 0;
                    for (; i < edgearray.length; i++) {
                        var e = edgearray[i];
                        var tmp = e.previousElementSibling;
                        if (tmp && "LI" == tmp.tagName) {
                            var elem = tmp.querySelector(":scope > ul, :scope > ol");
                            if (!elem) {
                                /** @type {!Element} */
                                elem = document.createElement("ul");
                                tmp.appendChild(elem);
                            }
                            elem.appendChild(e);
                        } else {
                            e.removeAttribute("data-indent");
                        }
                    }
                    return editor.html.cleanBlankSpaces(div), str = div.innerHTML;
                }(value));
            }
            if (editor.opts.pastePlain && !use) {
                value = function(e) {
                    var i;
                    /** @type {null} */
                    var el = null;
                    var message = editor.doc.createElement("div");
                    /** @type {string} */
                    message.innerHTML = e;
                    var elements = message.querySelectorAll("p, div, h1, h2, h3, h4, h5, h6, pre, blockquote");
                    /** @type {number} */
                    i = 0;
                    for (; i < elements.length; i++) {
                        /** @type {string} */
                        (el = elements[i]).outerHTML = "<" + (editor.html.defaultTag() || "DIV") + ">" + el.innerHTML + "</" + (editor.html.defaultTag() || "DIV") + ">";
                    }
                    /** @type {number} */
                    i = (elements = message.querySelectorAll("*:not(" + "p, div, h1, h2, h3, h4, h5, h6, pre, blockquote, ul, ol, li, table, tbody, thead, tr, td, br, img".split(",").join("):not(") + ")")).length - 1;
                    for (; 0 <= i; i--) {
                        (el = elements[i]).outerHTML = el.innerHTML;
                    }
                    /**
                     * @param {!Node} node
                     * @return {undefined}
                     */
                    var f = function(node) {
                        var all = editor.node.contents(node);
                        /** @type {number} */
                        var i = 0;
                        for (; i < all.length; i++) {
                            if (all[i].nodeType != Node.TEXT_NODE && all[i].nodeType != Node.ELEMENT_NODE) {
                                all[i].parentNode.removeChild(all[i]);
                            } else {
                                f(all[i]);
                            }
                        }
                    };
                    return f(message), message.innerHTML;
                }(value);
            }
            var str = editor.events.chainTrigger("paste.afterCleanup", value);
            if ("string" == typeof str && (value = str), "" !== value) {
                var item = editor.o_doc.createElement("div");
                if (0 <= (item.innerHTML = value).indexOf("<body>")) {
                    editor.html.cleanBlankSpaces(item);
                    editor.spaces.normalize(item, true);
                } else {
                    editor.spaces.normalize(item);
                }
                var line = item.getElementsByTagName("span");
                /** @type {number} */
                name = line.length - 1;
                for (; 0 <= name; name--) {
                    var el = line[name];
                    if (0 === el.attributes.length) {
                        el.outerHTML = el.innerHTML;
                    }
                }
                var element = editor.selection.element();
                /** @type {boolean} */
                var elementMetaId = false;
                if (element && $(element).parentsUntil(editor.el, "ul, ol").length && (elementMetaId = true), elementMetaId) {
                    var obj = item.children;
                    if (1 == obj.length && 0 <= ["OL", "UL"].indexOf(obj[0].tagName)) {
                        obj[0].outerHTML = obj[0].innerHTML;
                    }
                }
                if (!i) {
                    var b = item.getElementsByTagName("br");
                    /** @type {number} */
                    name = b.length - 1;
                    for (; 0 <= name; name--) {
                        var br = b[name];
                        if (editor.node.isBlock(br.previousSibling)) {
                            br.parentNode.removeChild(br);
                        }
                    }
                }
                if (editor.opts.enter == $.FE.ENTER_BR) {
                    /** @type {number} */
                    name = (children = item.querySelectorAll("p, div")).length - 1;
                    for (; 0 <= name; name--) {
                        if (0 === (item = children[name]).attributes.length) {
                            /** @type {string} */
                            item.outerHTML = item.innerHTML + (item.nextSibling && !editor.node.isEmpty(item) ? "<br>" : "");
                        }
                    }
                } else {
                    if (editor.opts.enter == $.FE.ENTER_DIV) {
                        /** @type {number} */
                        name = (children = item.getElementsByTagName("p")).length - 1;
                        for (; 0 <= name; name--) {
                            if (0 === (item = children[name]).attributes.length) {
                                /** @type {string} */
                                item.outerHTML = "<div>" + item.innerHTML + "</div>";
                            }
                        }
                    } else {
                        if (editor.opts.enter == $.FE.ENTER_P && 1 == item.childNodes.length && "P" == item.childNodes[0].tagName && 0 === item.childNodes[0].attributes.length) {
                            item.childNodes[0].outerHTML = item.childNodes[0].innerHTML;
                        }
                    }
                }
                value = item.innerHTML;
                if (use) {
                    value = function(argument) {
                        var i;
                        var div = editor.o_doc.createElement("div");
                        /** @type {string} */
                        div.innerHTML = argument;
                        var eiFrame = div.querySelectorAll("*:empty:not(td):not(th):not(tr):not(iframe):not(svg):not(" + $.FE.VOID_ELEMENTS.join("):not(") + "):not(" + editor.opts.htmlAllowedEmptyTags.join("):not(") + ")");
                        for (; eiFrame.length;) {
                            /** @type {number} */
                            i = 0;
                            for (; i < eiFrame.length; i++) {
                                eiFrame[i].parentNode.removeChild(eiFrame[i]);
                            }
                            eiFrame = div.querySelectorAll("*:empty:not(td):not(th):not(tr):not(iframe):not(svg):not(" + $.FE.VOID_ELEMENTS.join("):not(") + "):not(" + editor.opts.htmlAllowedEmptyTags.join("):not(") + ")");
                        }
                        return div.innerHTML;
                    }(value);
                }
                editor.html.insert(value, true);
            }
            editor.events.trigger("paste.after");
            editor.undo.saveStep(gridSubStep);
            /** @type {null} */
            gridSubStep = null;
            editor.undo.saveStep();
        }
        /**
         * @param {!Array} r
         * @return {?}
         */
        function add(r) {
            /** @type {number} */
            var i = r.length - 1;
            for (; 0 <= i; i--) {
                if (r[i].attributes && r[i].attributes.length) {
                    r.splice(i, 1);
                }
            }
            return r;
        }
        /**
         * @param {string} name
         * @return {?}
         */
        function build(name) {
            var i;
            var n = editor.o_doc.createElement("div");
            /** @type {string} */
            n.innerHTML = name;
            var result = add(Array.prototype.slice.call(n.querySelectorAll(":scope > div:not([style]), td > div:not([style]), th > div:not([style]), li > div:not([style])")));
            for (; result.length;) {
                var el = result[result.length - 1];
                if (editor.html.defaultTag() && "div" != editor.html.defaultTag()) {
                    if (el.querySelector(editor.html.blockTagsQuery())) {
                        el.outerHTML = el.innerHTML;
                    } else {
                        /** @type {string} */
                        el.outerHTML = "<" + editor.html.defaultTag() + ">" + el.innerHTML + "</" + editor.html.defaultTag() + ">";
                    }
                } else {
                    var bChilds = el.querySelectorAll("*");
                    if (!bChilds.length || "BR" !== bChilds[bChilds.length - 1].tagName && 0 === el.innerText.length) {
                        /** @type {string} */
                        el.outerHTML = el.innerHTML + "<br>";
                    } else {
                        el.outerHTML = el.innerHTML;
                    }
                }
                result = add(Array.prototype.slice.call(n.querySelectorAll(":scope > div:not([style]), td > div:not([style]), th > div:not([style]), li > div:not([style])")));
            }
            result = add(Array.prototype.slice.call(n.querySelectorAll("div:not([style])")));
            for (; result.length;) {
                /** @type {number} */
                i = 0;
                for (; i < result.length; i++) {
                    var e = result[i];
                    var s = e.innerHTML.replace(/\u0009/gi, "").trim();
                    e.outerHTML = s;
                }
                result = add(Array.prototype.slice.call(n.querySelectorAll("div:not([style])")));
            }
            return n.innerHTML;
        }
        /**
         * @return {undefined}
         */
        function paste() {
            editor.el.removeEventListener("copy", render);
            editor.el.removeEventListener("cut", render);
            editor.el.removeEventListener("paste", start);
        }
        var data;
        var alias;
        var o;
        var gridSubStep;
        /** @type {boolean} */
        var i = false;
        return {
            _init : function() {
                editor.el.addEventListener("copy", render);
                editor.el.addEventListener("cut", render);
                editor.el.addEventListener("paste", start, {
                    capture : true
                });
                editor.events.on("drop", callback);
                if (editor.browser.msie && editor.browser.version < 11) {
                    editor.events.on("mouseup", function(event) {
                        if (2 == event.button) {
                            setTimeout(function() {
                                /** @type {boolean} */
                                i = false;
                            }, 50);
                            /** @type {boolean} */
                            i = true;
                        }
                    }, true);
                    editor.events.on("beforepaste", start);
                }
                editor.events.on("destroy", paste);
            },
            cleanEmptyTagsAndDivs : build,
            getRtfClipboard : function() {
                return alias;
            },
            saveCopiedText : filter,
            clean : init
        };
    };
    $.extend($.FE.DEFAULTS, {
        shortcutsEnabled : [],
        shortcutsHint : true
    });
    $.FE.SHORTCUTS_MAP = {};
    /**
     * @param {number} callback
     * @param {number} name
     * @param {string} data
     * @param {string} c
     * @param {boolean} g
     * @param {!Object} i
     * @return {undefined}
     */
    $.FE.RegisterShortcut = function(callback, name, data, c, g, i) {
        $.FE.SHORTCUTS_MAP[(g ? "^" : "") + (i ? "@" : "") + callback] = {
            cmd : name,
            val : data,
            letter : c,
            shift : g,
            option : i
        };
        $.FE.DEFAULTS.shortcutsEnabled.push(name);
    };
    $.FE.RegisterShortcut($.FE.KEYCODE.E, "show", null, "E", false, false);
    $.FE.RegisterShortcut($.FE.KEYCODE.B, "bold", null, "B", false, false);
    $.FE.RegisterShortcut($.FE.KEYCODE.I, "italic", null, "I", false, false);
    $.FE.RegisterShortcut($.FE.KEYCODE.U, "underline", null, "U", false, false);
    $.FE.RegisterShortcut($.FE.KEYCODE.S, "strikeThrough", null, "S", false, false);
    $.FE.RegisterShortcut($.FE.KEYCODE.CLOSE_SQUARE_BRACKET, "indent", null, "]", false, false);
    $.FE.RegisterShortcut($.FE.KEYCODE.OPEN_SQUARE_BRACKET, "outdent", null, "[", false, false);
    $.FE.RegisterShortcut($.FE.KEYCODE.Z, "undo", null, "Z", false, false);
    $.FE.RegisterShortcut($.FE.KEYCODE.Z, "redo", null, "Z", true, false);
    $.FE.RegisterShortcut($.FE.KEYCODE.Y, "redo", null, "Y", false, false);
    /**
     * @param {!Object} editor
     * @return {?}
     */
    $.FE.MODULES.shortcuts = function(editor) {
        /**
         * @param {!Event} e
         * @return {?}
         */
        function handler(e) {
            if (!editor.core.hasFocus()) {
                return true;
            }
            var c = e.which;
            var rebuilds = -1 != navigator.userAgent.indexOf("Mac OS X") ? e.metaKey : e.ctrlKey;
            if ("keyup" == e.type && iMachine && c != $.FE.KEYCODE.META) {
                return iMachine = false;
            }
            if ("keydown" == e.type) {
                /** @type {boolean} */
                iMachine = false;
            }
            /** @type {string} */
            var i = (e.shiftKey ? "^" : "") + (e.altKey ? "@" : "") + c;
            if (rebuilds && $.FE.SHORTCUTS_MAP[i]) {
                var command = $.FE.SHORTCUTS_MAP[i].cmd;
                if (command && 0 <= editor.opts.shortcutsEnabled.indexOf(command)) {
                    var event;
                    var data = $.FE.SHORTCUTS_MAP[i].val;
                    if (command && !data ? event = editor.$tb.find('.fr-command[data-cmd="' + command + '"]') : command && data && (event = editor.$tb.find('.fr-command[data-cmd="' + command + '"][data-param1="' + data + '"]')), event.length) {
                        return e.preventDefault(), e.stopPropagation(), event.parents(".fr-toolbar").data("instance", editor), "keydown" == e.type && (editor.button.exec(event), iMachine = true), false;
                    }
                    if (command && (editor.commands[command] || $.FE.COMMANDS[command] && $.FE.COMMANDS[command].callback)) {
                        return e.preventDefault(), e.stopPropagation(), "keydown" == e.type && ((editor.commands[command] || $.FE.COMMANDS[command].callback)(), iMachine = true), false;
                    }
                }
            }
        }
        /** @type {null} */
        var eventsToCatch = null;
        /** @type {boolean} */
        var iMachine = false;
        return {
            _init : function() {
                editor.events.on("keydown", handler, true);
                editor.events.on("keyup", handler, true);
            },
            get : function(i) {
                if (!editor.opts.shortcutsHint) {
                    return null;
                }
                if (!eventsToCatch) {
                    var i;
                    for (i in eventsToCatch = {}, $.FE.SHORTCUTS_MAP) {
                        if ($.FE.SHORTCUTS_MAP.hasOwnProperty(i) && 0 <= editor.opts.shortcutsEnabled.indexOf($.FE.SHORTCUTS_MAP[i].cmd)) {
                            eventsToCatch[$.FE.SHORTCUTS_MAP[i].cmd + "." + ($.FE.SHORTCUTS_MAP[i].val || "")] = {
                                shift : $.FE.SHORTCUTS_MAP[i].shift,
                                option : $.FE.SHORTCUTS_MAP[i].option,
                                letter : $.FE.SHORTCUTS_MAP[i].letter
                            };
                        }
                    }
                }
                var evt = eventsToCatch[i];
                return evt ? (editor.helpers.isMac() ? String.fromCharCode(8984) : "Ctrl+") + (evt.shift ? editor.helpers.isMac() ? String.fromCharCode(8679) : "Shift+" : "") + (evt.option ? editor.helpers.isMac() ? String.fromCharCode(8997) : "Alt+" : "") + evt.letter : null;
            }
        };
    };
    /**
     * @param {!Object} editor
     * @return {?}
     */
    $.FE.MODULES.snapshot = function(editor) {
        /**
         * @param {!Object} element
         * @return {?}
         */
        function add(element) {
            var elements = element.parentNode.childNodes;
            /** @type {number} */
            var xhrID = 0;
            /** @type {null} */
            var node = null;
            /** @type {number} */
            var j = 0;
            for (; j < elements.length; j++) {
                if (node) {
                    /** @type {boolean} */
                    var i = elements[j].nodeType === Node.TEXT_NODE && "" === elements[j].textContent;
                    /** @type {boolean} */
                    var xx = node.nodeType === Node.TEXT_NODE && elements[j].nodeType === Node.TEXT_NODE;
                    if (!(i || xx)) {
                        xhrID++;
                    }
                }
                if (elements[j] == element) {
                    return xhrID;
                }
                node = elements[j];
            }
        }
        /**
         * @param {number} el
         * @return {?}
         */
        function wrap(el) {
            /** @type {!Array} */
            var result = [];
            if (!el.parentNode) {
                return [];
            }
            for (; !editor.node.isElement(el);) {
                result.push(add(el));
                el = el.parentNode;
            }
            return result.reverse();
        }
        /**
         * @param {!Node} n
         * @param {number} acc
         * @return {?}
         */
        function check(n, acc) {
            for (; n && n.nodeType === Node.TEXT_NODE;) {
                var prev = n.previousSibling;
                if (prev && prev.nodeType == Node.TEXT_NODE) {
                    acc = acc + prev.textContent.length;
                }
                n = prev;
            }
            return acc;
        }
        /**
         * @param {!NodeList} offsets
         * @return {?}
         */
        function createElement(offsets) {
            var node = editor.el;
            /** @type {number} */
            var i = 0;
            for (; i < offsets.length; i++) {
                node = node.childNodes[offsets[i]];
            }
            return node;
        }
        /**
         * @param {!Selection} selection
         * @param {?} results
         * @return {undefined}
         */
        function select(selection, results) {
            try {
                var rp = createElement(results.scLoc);
                var count = results.scOffset;
                var elem = createElement(results.ecLoc);
                var end = results.ecOffset;
                var range = editor.doc.createRange();
                range.setStart(rp, count);
                range.setEnd(elem, end);
                selection.addRange(range);
            } catch (s) {
            }
        }
        return {
            get : function() {
                var options;
                var data = {};
                if (editor.events.trigger("snapshot.before"), data.html = (editor.$wp ? editor.$el.html() : editor.$oel.get(0).outerHTML).replace(/ style=""/g, ""), data.ranges = [], editor.$wp && editor.selection.inEditor() && editor.core.hasFocus()) {
                    var reqs = editor.selection.ranges();
                    /** @type {number} */
                    var i = 0;
                    for (; i < reqs.length; i++) {
                        data.ranges.push({
                            scLoc : wrap((options = reqs[i]).startContainer),
                            scOffset : check(options.startContainer, options.startOffset),
                            ecLoc : wrap(options.endContainer),
                            ecOffset : check(options.endContainer, options.endOffset)
                        });
                    }
                }
                return editor.events.trigger("snapshot.after", [data]), data;
            },
            restore : function(v) {
                if (editor.$el.html() != v.html) {
                    if (editor.opts.htmlExecuteScripts) {
                        editor.$el.html(v.html);
                    } else {
                        editor.el.innerHTML = v.html;
                    }
                }
                var selection = editor.selection.get();
                editor.selection.clear();
                editor.events.focus(true);
                /** @type {number} */
                var i = 0;
                for (; i < v.ranges.length; i++) {
                    select(selection, v.ranges[i]);
                }
            },
            equal : function(data, query) {
                return data.html == query.html && (!editor.core.hasFocus() || JSON.stringify(data.ranges) == JSON.stringify(query.ranges));
            }
        };
    };
    /**
     * @param {!Object} self
     * @return {?}
     */
    $.FE.MODULES.undo = function(self) {
        /**
         * @param {!Object} e
         * @return {undefined}
         */
        function _checkCharNumber(e) {
            var k = e.which;
            if (self.keys.ctrlKey(e)) {
                if (90 == k && e.shiftKey) {
                    e.preventDefault();
                }
                if (90 == k) {
                    e.preventDefault();
                }
            }
        }
        /**
         * @return {?}
         */
        function rec() {
            if (!self.undo_stack || self.undoing) {
                return false;
            }
            for (; self.undo_stack.length > self.undo_index;) {
                self.undo_stack.pop();
            }
        }
        /**
         * @return {undefined}
         */
        function done() {
            /** @type {number} */
            self.undo_index = 0;
            /** @type {!Array} */
            self.undo_stack = [];
        }
        /**
         * @return {undefined}
         */
        function mycallback() {
            /** @type {!Array} */
            self.undo_stack = [];
        }
        /** @type {null} */
        var html = null;
        return {
            _init : function() {
                done();
                self.events.on("initialized", function() {
                    html = (self.$wp ? self.$el.html() : self.$oel.get(0).outerHTML).replace(/ style=""/g, "");
                });
                self.events.on("blur", function() {
                    if (!self.el.querySelector(".fr-dragging")) {
                        self.undo.saveStep();
                    }
                });
                self.events.on("keydown", _checkCharNumber);
                self.events.on("destroy", mycallback);
            },
            run : function() {
                if (1 < self.undo_index) {
                    /** @type {boolean} */
                    self.undoing = true;
                    var r = self.undo_stack[--self.undo_index - 1];
                    clearTimeout(self._content_changed_timer);
                    self.snapshot.restore(r);
                    html = r.html;
                    self.popups.hideAll();
                    self.toolbar.enable();
                    self.events.trigger("contentChanged");
                    self.events.trigger("commands.undo");
                    /** @type {boolean} */
                    self.undoing = false;
                }
            },
            redo : function() {
                if (self.undo_index < self.undo_stack.length) {
                    /** @type {boolean} */
                    self.undoing = true;
                    var r = self.undo_stack[self.undo_index++];
                    clearTimeout(self._content_changed_timer);
                    self.snapshot.restore(r);
                    html = r.html;
                    self.popups.hideAll();
                    self.toolbar.enable();
                    self.events.trigger("contentChanged");
                    self.events.trigger("commands.redo");
                    /** @type {boolean} */
                    self.undoing = false;
                }
            },
            canDo : function() {
                return !(0 === self.undo_stack.length || self.undo_index <= 1);
            },
            canRedo : function() {
                return self.undo_index != self.undo_stack.length;
            },
            dropRedo : rec,
            reset : done,
            saveStep : function(step) {
                if (!self.undo_stack || self.undoing || self.el.querySelector(".fr-marker")) {
                    return false;
                }
                if (void 0 === step) {
                    step = self.snapshot.get();
                    if (!(self.undo_stack[self.undo_index - 1] && self.snapshot.equal(self.undo_stack[self.undo_index - 1], step))) {
                        rec();
                        self.undo_stack.push(step);
                        self.undo_index++;
                        if (step.html != html) {
                            self.events.trigger("contentChanged");
                            html = step.html;
                        }
                    }
                } else {
                    rec();
                    if (0 < self.undo_index) {
                        /** @type {!Array} */
                        self.undo_stack[self.undo_index - 1] = step;
                    } else {
                        self.undo_stack.push(step);
                        self.undo_index++;
                    }
                }
            }
        };
    };
    $.FE.ICON_TEMPLATES = {
        font_awesome : '<i class="fa fa-[NAME]" aria-hidden="true"></i>',
        font_awesome_5 : '<i class="fas fa-[FA5NAME]" aria-hidden="true"></i>',
        font_awesome_5r : '<i class="far fa-[FA5NAME]" aria-hidden="true"></i>',
        font_awesome_5l : '<i class="fal fa-[FA5NAME]" aria-hidden="true"></i>',
        text : '<span style="text-align: center;">[NAME]</span>',
        image : "<img src=[SRC] alt=[ALT] />",
        svg : '<svg viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">[PATH]</svg>'
    };
    $.FE.ICONS = {
        bold : {
            NAME : "bold"
        },
        italic : {
            NAME : "italic"
        },
        underline : {
            NAME : "underline"
        },
        strikeThrough : {
            NAME : "strikethrough"
        },
        subscript : {
            NAME : "subscript"
        },
        superscript : {
            NAME : "superscript"
        },
        color : {
            NAME : "tint"
        },
        outdent : {
            NAME : "outdent"
        },
        indent : {
            NAME : "indent"
        },
        undo : {
            NAME : "rotate-left",
            FA5NAME : "undo"
        },
        redo : {
            NAME : "rotate-right",
            FA5NAME : "redo"
        },
        insertHR : {
            NAME : "minus"
        },
        clearFormatting : {
            NAME : "eraser"
        },
        selectAll : {
            NAME : "mouse-pointer"
        }
    };
    /**
     * @param {?} url
     * @param {?} eTag
     * @return {undefined}
     */
    $.FE.DefineIconTemplate = function(url, eTag) {
        $.FE.ICON_TEMPLATES[url] = eTag;
    };
    /**
     * @param {?} part
     * @param {?} value
     * @return {undefined}
     */
    $.FE.DefineIcon = function(part, value) {
        $.FE.ICONS[part] = value;
    };
    $.extend($.FE.DEFAULTS, {
        iconsTemplate : "font_awesome"
    });
    /**
     * @param {!Object} state
     * @return {?}
     */
    $.FE.MODULES.icon = function(state) {
        return {
            create : function(part) {
                /** @type {null} */
                var deepQuery = null;
                var $scope = $.FE.ICONS[part];
                if (void 0 !== $scope) {
                    var id = $scope.template || $.FE.ICON_DEFAULT_TEMPLATE || state.opts.iconsTemplate;
                    if (!$scope.FA5NAME) {
                        $scope.FA5NAME = $scope.NAME;
                    }
                    if (id && (id = $.FE.ICON_TEMPLATES[id])) {
                        deepQuery = id.replace(/\[([a-zA-Z0-9]*)\]/g, function(canCreateDiscussions, email) {
                            return "NAME" == email ? $scope[email] || part : $scope[email];
                        });
                    }
                }
                return deepQuery || part;
            },
            getTemplate : function(skinName) {
                var undefined = $.FE.ICONS[skinName];
                var i = state.opts.iconsTemplate;
                return void 0 !== undefined ? i = undefined.template || $.FE.ICON_DEFAULT_TEMPLATE || state.opts.iconsTemplate : i;
            }
        };
    };
    $.extend($.FE.DEFAULTS, {
        tooltips : true
    });
    /**
     * @param {!Object} editor
     * @return {?}
     */
    $.FE.MODULES.tooltip = function(editor) {
        /**
         * @return {?}
         */
        function init() {
            if (editor.helpers.isMobile()) {
                return false;
            }
            if (editor.$tooltip) {
                editor.$tooltip.removeClass("fr-visible").css("left", "-3000px").css("position", "fixed");
            }
        }
        /**
         * @param {!Object} target
         * @param {!Object} type
         * @return {?}
         */
        function render(target, type) {
            if (editor.helpers.isMobile()) {
                return false;
            }
            if (target.data("title") || target.data("title", target.attr("title")), !target.data("title")) {
                return false;
            }
            if (!editor.$tooltip) {
                if (editor.opts.tooltips && !editor.helpers.isMobile()) {
                    if (editor.shared.$tooltip) {
                        editor.$tooltip = editor.shared.$tooltip;
                    } else {
                        editor.shared.$tooltip = $('<div class="fr-tooltip"></div>');
                        editor.$tooltip = editor.shared.$tooltip;
                        if (editor.opts.theme) {
                            editor.$tooltip.addClass(editor.opts.theme + "-theme");
                        }
                        $(editor.o_doc).find("body:first").append(editor.$tooltip);
                    }
                    editor.events.on("shared.destroy", function() {
                        editor.$tooltip.html("").removeData().remove();
                        /** @type {null} */
                        editor.$tooltip = null;
                    }, true);
                }
            }
            target.removeAttr("title");
            editor.$tooltip.text(editor.language.translate(target.data("title")));
            editor.$tooltip.addClass("fr-visible");
            var meterPos = target.offset().left + (target.outerWidth() - editor.$tooltip.outerWidth()) / 2;
            if (meterPos < 0) {
                /** @type {number} */
                meterPos = 0;
            }
            if (meterPos + editor.$tooltip.outerWidth() > $(editor.o_win).width()) {
                /** @type {number} */
                meterPos = $(editor.o_win).width() - editor.$tooltip.outerWidth();
            }
            if (void 0 === type) {
                type = editor.opts.toolbarBottom;
            }
            var i = type ? target.offset().top - editor.$tooltip.height() : target.offset().top + target.outerHeight();
            editor.$tooltip.css("position", "");
            editor.$tooltip.css("left", meterPos);
            editor.$tooltip.css("top", Math.ceil(i));
            if ("static" != $(editor.o_doc).find("body:first").css("position")) {
                editor.$tooltip.css("margin-left", -$(editor.o_doc).find("body:first").offset().left);
                editor.$tooltip.css("margin-top", -$(editor.o_doc).find("body:first").offset().top);
            } else {
                editor.$tooltip.css("margin-left", "");
                editor.$tooltip.css("margin-top", "");
            }
        }
        return {
            hide : init,
            to : render,
            bind : function(event, method, object) {
                if (editor.opts.tooltips && !editor.helpers.isMobile()) {
                    editor.events.$on(event, "mouseenter", method, function(event) {
                        if (!(editor.node.hasClass(event.currentTarget, "fr-disabled") || editor.edit.isDisabled())) {
                            render($(event.currentTarget), object);
                        }
                    }, true);
                    editor.events.$on(event, "mouseleave " + editor._mousedown + " " + editor._mouseup, method, function() {
                        init();
                    }, true);
                }
            }
        };
    };
    /**
     * @param {!Object} editor
     * @return {?}
     */
    $.FE.MODULES.button = function(editor) {
        /**
         * @param {!Array} files
         * @param {string} type
         * @param {boolean} uuid
         * @return {?}
         */
        function fn(files, type, uuid) {
            var x = $();
            /** @type {number} */
            var i = 0;
            for (; i < files.length; i++) {
                var f = $(files[i]);
                if (f.is(type) && (x = x.add(f)), uuid && f.is(".fr-dropdown")) {
                    var app = f.next().find(type);
                    x = x.add(app);
                }
            }
            return x;
        }
        /**
         * @param {string} type
         * @param {boolean} i
         * @return {?}
         */
        function remove(type, i) {
            var key;
            var results = $();
            if (!type) {
                return results;
            }
            for (key in results = (results = results.add(fn(result, type, i))).add(fn(sel, type, i)), editor.shared.popups) {
                if (editor.shared.popups.hasOwnProperty(key)) {
                    var o = editor.shared.popups[key].children().find(type);
                    results = results.add(o);
                }
            }
            for (key in editor.shared.modals) {
                if (editor.shared.modals.hasOwnProperty(key)) {
                    var i = editor.shared.modals[key].$modal.find(type);
                    results = results.add(i);
                }
            }
            return results;
        }
        /**
         * @param {!Object} options
         * @return {undefined}
         */
        function hide(options) {
            options.addClass("fr-blink");
            setTimeout(function() {
                options.removeClass("fr-blink");
            }, 500);
            var output = options.data("cmd");
            /** @type {!Array} */
            var open = [];
            for (; void 0 !== options.data("param" + (open.length + 1));) {
                open.push(options.data("param" + (open.length + 1)));
            }
            var $btn = remove(".fr-dropdown.fr-active");
            if ($btn.length) {
                $btn.removeClass("fr-active").attr("aria-expanded", false).next().attr("aria-hidden", true);
                $btn.parent(".fr-toolbar:not(.fr-inline)").css("zIndex", "");
            }
            options.parents(".fr-popup, .fr-toolbar").data("instance").commands.exec(output, open);
        }
        /**
         * @param {!Object} options
         * @return {undefined}
         */
        function init(options) {
            var self = options.parents(".fr-popup, .fr-toolbar").data("instance");
            if (0 !== options.parents(".fr-popup").length || options.data("popup") || self.popups.hideAll(), self.popups.areVisible() && !self.popups.areVisible(self)) {
                /** @type {number} */
                var i = 0;
                for (; i < $.FE.INSTANCES.length; i++) {
                    if ($.FE.INSTANCES[i] != self && $.FE.INSTANCES[i].popups && $.FE.INSTANCES[i].popups.areVisible()) {
                        $.FE.INSTANCES[i].$el.find(".fr-marker").remove();
                    }
                }
                self.popups.hideAll();
            }
            if (editor.node.hasClass(options.get(0), "fr-dropdown")) {
                (function(elem) {
                    var widget = elem.next();
                    var n = editor.node.hasClass(elem.get(0), "fr-active");
                    var $btn = remove(".fr-dropdown.fr-active").not(elem);
                    var app = elem.parents(".fr-toolbar, .fr-popup").data("instance") || editor;
                    if (app.helpers.isIOS() && !app.el.querySelector(".fr-marker") && (app.selection.save(), app.selection.clear(), app.selection.restore()), !n) {
                        var command = elem.data("cmd");
                        widget.find(".fr-command").removeClass("fr-active").attr("aria-selected", false);
                        if ($.FE.COMMANDS[command] && $.FE.COMMANDS[command].refreshOnShow) {
                            $.FE.COMMANDS[command].refreshOnShow.apply(app, [elem, widget]);
                        }
                        widget.css("left", elem.offset().left - elem.parent().offset().left - ("rtl" == editor.opts.direction ? widget.width() - elem.outerWidth() : 0));
                        widget.addClass("test-height");
                        var a = widget.outerHeight();
                        widget.removeClass("test-height");
                        widget.css("top", "").css("bottom", "");
                        if (!editor.opts.toolbarBottom && widget.offset().top + elem.outerHeight() + a < $(editor.o_doc).height()) {
                            widget.css("top", elem.position().top + elem.outerHeight());
                        } else {
                            widget.css("bottom", elem.parents(".fr-popup, .fr-toolbar").first().height() - elem.position().top);
                        }
                    }
                    elem.addClass("fr-blink").toggleClass("fr-active");
                    if (elem.hasClass("fr-active")) {
                        widget.attr("aria-hidden", false);
                        elem.attr("aria-expanded", true);
                    } else {
                        widget.attr("aria-hidden", true);
                        elem.attr("aria-expanded", false);
                    }
                    setTimeout(function() {
                        elem.removeClass("fr-blink");
                    }, 300);
                    widget.css("margin-left", "");
                    if (widget.offset().left + widget.outerWidth() > editor.$sc.offset().left + editor.$sc.width()) {
                        widget.css("margin-left", -(widget.offset().left + widget.outerWidth() - editor.$sc.offset().left - editor.$sc.width()));
                    }
                    if (widget.offset().left < editor.$sc.offset().left && "rtl" == editor.opts.direction) {
                        widget.css("margin-left", editor.$sc.offset().left);
                    }
                    $btn.removeClass("fr-active").attr("aria-expanded", false).next().attr("aria-hidden", true);
                    $btn.parent(".fr-toolbar:not(.fr-inline)").css("zIndex", "");
                    if (!(0 !== elem.parents(".fr-popup").length || editor.opts.toolbarInline)) {
                        if (editor.node.hasClass(elem.get(0), "fr-active")) {
                            editor.$tb.css("zIndex", (editor.opts.zIndex || 1) + 4);
                        } else {
                            editor.$tb.css("zIndex", "");
                        }
                    }
                    var forEachValues = widget.find("a.fr-command.fr-active:first");
                    if (!editor.helpers.isMobile()) {
                        if (forEachValues.length) {
                            editor.accessibility.focusToolbarElement(forEachValues);
                        } else {
                            editor.accessibility.focusToolbarElement(elem);
                        }
                    }
                })(options);
            } else {
                hide(options);
                if ($.FE.COMMANDS[options.data("cmd")] && false !== $.FE.COMMANDS[options.data("cmd")].refreshAfterCallback) {
                    self.button.bulkRefresh();
                }
            }
        }
        /**
         * @param {!Event} event
         * @return {undefined}
         */
        function action(event) {
            init($(event.currentTarget));
        }
        /**
         * @param {!Object} link
         * @return {undefined}
         */
        function close(link) {
            var $btn = link.find(".fr-dropdown.fr-active");
            if ($btn.length) {
                $btn.removeClass("fr-active").attr("aria-expanded", false).next().attr("aria-hidden", true);
                $btn.parent(".fr-toolbar:not(.fr-inline)").css("zIndex", "");
            }
        }
        /**
         * @param {!Event} event
         * @return {undefined}
         */
        function listener(event) {
            event.preventDefault();
            event.stopPropagation();
        }
        /**
         * @param {!Event} e
         * @return {?}
         */
        function _edit(e) {
            if (e.stopPropagation(), !editor.helpers.isMobile()) {
                return false;
            }
        }
        /**
         * @param {string} name
         * @param {!Object} self
         * @param {boolean} ranges
         * @return {?}
         */
        function render(name, self, ranges) {
            if (editor.helpers.isMobile() && false === self.showOnMobile) {
                return "";
            }
            var rot;
            var a = self.displaySelection;
            if ("function" == typeof a && (a = a(editor)), a) {
                var x = "function" == typeof self.defaultSelection ? self.defaultSelection(editor) : self.defaultSelection;
                /** @type {string} */
                rot = '<span style="width:' + (self.displaySelectionWidth || 100) + 'px">' + editor.language.translate(x || self.title) + "</span>";
            } else {
                rot = editor.icon.create(self.icon || name);
                /** @type {string} */
                rot = rot + ('<span class="fr-sr-only">' + (editor.language.translate(self.title) || "") + "</span>");
            }
            /** @type {string} */
            var port = self.popup ? ' data-popup="true"' : "";
            /** @type {string} */
            var url = self.modal ? ' data-modal="true"' : "";
            var xfpHeader = editor.shortcuts.get(name + ".");
            /** @type {string} */
            xfpHeader = xfpHeader ? " (" + xfpHeader + ")" : "";
            /** @type {string} */
            var d = name + "-" + editor.id;
            /** @type {string} */
            var items = "dropdown-menu-" + d;
            /** @type {string} */
            var ret = '<button id="' + d + '"type="button" tabIndex="-1" role="button"' + (self.toggle ? ' aria-pressed="false"' : "") + ("dropdown" == self.type ? ' aria-controls="' + items + '" aria-expanded="false" aria-haspopup="true"' : "") + (self.disabled ? ' aria-disabled="true"' : "") + ' title="' + (editor.language.translate(self.title) || "") + xfpHeader + '" class="fr-command fr-btn' + ("dropdown" == self.type ? " fr-dropdown" : "") + " fr-btn-" + editor.icon.getTemplate(self.icon) + (self.displaySelection ?
                " fr-selection" : "") + (self.back ? " fr-back" : "") + (self.disabled ? " fr-disabled" : "") + (ranges ? "" : " fr-hidden") + '" data-cmd="' + name + '"' + port + url + ">" + rot + "</button>";
            if ("dropdown" == self.type) {
                /** @type {string} */
                var sql = '<div id="' + items + '" class="fr-dropdown-menu" role="listbox" aria-labelledby="' + d + '" aria-hidden="true"><div class="fr-dropdown-wrapper" role="presentation"><div class="fr-dropdown-content" role="presentation">';
                /** @type {string} */
                sql = sql + function(radioName, o) {
                    /** @type {string} */
                    var b = "";
                    if (o.html) {
                        if ("function" == typeof o.html) {
                            /** @type {string} */
                            b = b + o.html.call(editor);
                        } else {
                            /** @type {string} */
                            b = b + o.html;
                        }
                    } else {
                        var a = o.options;
                        var i;
                        for (i in "function" == typeof a && (a = a()), b = b + '<ul class="fr-dropdown-list" role="presentation">', a) {
                            if (a.hasOwnProperty(i)) {
                                var xfpHeader = editor.shortcuts.get(radioName + "." + i);
                                /** @type {string} */
                                xfpHeader = xfpHeader ? '<span class="fr-shortcut">' + xfpHeader + "</span>" : "";
                                /** @type {string} */
                                b = b + ('<li role="presentation"><a class="fr-command" tabIndex="-1" role="option" data-cmd="' + radioName + '" data-param1="' + i + '" title="' + a[i] + '">' + editor.language.translate(a[i]) + "</a></li>");
                            }
                        }
                        /** @type {string} */
                        b = b + "</ul>";
                    }
                    return b;
                }(name, self);
                /** @type {string} */
                ret = ret + (sql = sql + "</div></div></div>");
            }
            return ret;
        }
        /**
         * @param {!Array} selector
         * @return {?}
         */
        function _init(selector) {
            var that = editor.$tb && editor.$tb.data("instance") || editor;
            if (false === editor.events.trigger("buttons.refresh")) {
                return true;
            }
            setTimeout(function() {
                var e = that.selection.inEditor() && that.core.hasFocus();
                /** @type {number} */
                var j = 0;
                for (; j < selector.length; j++) {
                    var $btn = $(selector[j]);
                    var command = $btn.data("cmd");
                    if (0 === $btn.parents(".fr-popup").length) {
                        if (e || $.FE.COMMANDS[command] && $.FE.COMMANDS[command].forcedRefresh) {
                            that.button.refresh($btn);
                        } else {
                            if (!editor.node.hasClass($btn.get(0), "fr-dropdown")) {
                                $btn.removeClass("fr-active");
                                if ($btn.attr("aria-pressed")) {
                                    $btn.attr("aria-pressed", false);
                                }
                            }
                        }
                    } else {
                        if ($btn.parents(".fr-popup").is(":visible")) {
                            that.button.refresh($btn);
                        }
                    }
                }
            }, 0);
        }
        /**
         * @return {undefined}
         */
        function _hide() {
            _init(result);
            _init(sel);
        }
        /**
         * @return {undefined}
         */
        function addedToQueue() {
            /** @type {!Array} */
            result = [];
            /** @type {!Array} */
            sel = [];
        }
        /**
         * @return {undefined}
         */
        function resolve() {
            clearTimeout(_takingTooLongTimeout);
            /** @type {number} */
            _takingTooLongTimeout = setTimeout(_hide, 50);
        }
        /** @type {!Array} */
        var result = [];
        if (editor.opts.toolbarInline || editor.opts.toolbarContainer) {
            if (!editor.shared.buttons) {
                /** @type {!Array} */
                editor.shared.buttons = [];
            }
            result = editor.shared.buttons;
        }
        /** @type {!Array} */
        var sel = [];
        if (!editor.shared.popup_buttons) {
            /** @type {!Array} */
            editor.shared.popup_buttons = [];
        }
        sel = editor.shared.popup_buttons;
        /** @type {null} */
        var _takingTooLongTimeout = null;
        return {
            _init : function() {
                if (editor.opts.toolbarInline) {
                    editor.events.on("toolbar.show", _hide);
                } else {
                    editor.events.on("mouseup", resolve);
                    editor.events.on("keyup", resolve);
                    editor.events.on("blur", resolve);
                    editor.events.on("focus", resolve);
                    editor.events.on("contentChanged", resolve);
                    if (editor.helpers.isMobile()) {
                        editor.events.$on(editor.$doc, "selectionchange", _hide);
                    }
                }
                editor.events.on("shared.destroy", addedToQueue);
            },
            buildList : function(elements, links) {
                /** @type {string} */
                var html = "";
                /** @type {number} */
                var i = 0;
                for (; i < elements.length; i++) {
                    var path = elements[i];
                    var obj = $.FE.COMMANDS[path];
                    if (!(obj && "undefined" != typeof obj.plugin && editor.opts.pluginsEnabled.indexOf(obj.plugin) < 0)) {
                        if (obj) {
                            /** @type {string} */
                            html = html + render(path, obj, void 0 === links || 0 <= links.indexOf(path));
                        } else {
                            if ("|" == path) {
                                /** @type {string} */
                                html = html + '<div class="fr-separator fr-vs" role="separator" aria-orientation="vertical"></div>';
                            } else {
                                if ("-" == path) {
                                    /** @type {string} */
                                    html = html + '<div class="fr-separator fr-hs" role="separator" aria-orientation="horizontal"></div>';
                                }
                            }
                        }
                    }
                }
                return html;
            },
            bindCommands : function(node, eventName) {
                editor.events.bindClick(node, ".fr-command:not(.fr-disabled)", action);
                editor.events.$on(node, editor._mousedown + " " + editor._mouseup + " " + editor._move, ".fr-dropdown-menu", listener, true);
                editor.events.$on(node, editor._mousedown + " " + editor._mouseup + " " + editor._move, ".fr-dropdown-menu .fr-dropdown-wrapper", _edit, true);
                var doc = node.get(0).ownerDocument;
                var channel = "defaultView" in doc ? doc.defaultView : doc.parentWindow;
                /**
                 * @param {!Object} e
                 * @return {undefined}
                 */
                var onKeyDown = function(e) {
                    if (!e || e.type == editor._mouseup && e.target != $("html").get(0) || "keydown" == e.type && (editor.keys.isCharacter(e.which) && !editor.keys.ctrlKey(e) || e.which == $.FE.KEYCODE.ESC)) {
                        close(node);
                    }
                };
                editor.events.$on($(channel), editor._mouseup + " resize keydown", onKeyDown, true);
                if (editor.opts.iframe) {
                    editor.events.$on(editor.$win, editor._mouseup, onKeyDown, true);
                }
                if (editor.node.hasClass(node.get(0), "fr-popup")) {
                    $.merge(sel, node.find(".fr-btn").toArray());
                } else {
                    $.merge(result, node.find(".fr-btn").toArray());
                }
                editor.tooltip.bind(node, ".fr-btn, .fr-title", eventName);
            },
            refresh : function($btn) {
                var originalEvent;
                var range = $btn.parents(".fr-popup, .fr-toolbar").data("instance") || editor;
                var i = $btn.data("cmd");
                if (editor.node.hasClass($btn.get(0), "fr-dropdown")) {
                    originalEvent = $btn.next();
                } else {
                    $btn.removeClass("fr-active");
                    if ($btn.attr("aria-pressed")) {
                        $btn.attr("aria-pressed", false);
                    }
                }
                if ($.FE.COMMANDS[i] && $.FE.COMMANDS[i].refresh) {
                    $.FE.COMMANDS[i].refresh.apply(range, [$btn, originalEvent]);
                } else {
                    if (editor.refresh[i]) {
                        range.refresh[i]($btn, originalEvent);
                    }
                }
            },
            bulkRefresh : _hide,
            exec : hide,
            click : init,
            hideActiveDropdowns : close,
            getButtons : remove
        };
    };
    /**
     * @param {!Object} editor
     * @return {?}
     */
    $.FE.MODULES.modals = function(editor) {
        /**
         * @return {undefined}
         */
        function close() {
            var i;
            for (i in data) {
                var view = data[i];
                if (view && view.$modal) {
                    view.$modal.removeData().remove();
                }
            }
            if ($overlay) {
                $overlay.removeData().remove();
            }
            data = {};
        }
        /**
         * @param {string} text
         * @param {boolean} css
         * @return {undefined}
         */
        function hide(text, css) {
            if (data[text]) {
                var $modal = data[text].$modal;
                var inst = $modal.data("instance") || editor;
                inst.events.enableBlur();
                $modal.hide();
                $overlay.hide();
                $(inst.o_doc).find("body:first").removeClass("prevent-scroll fr-mobile");
                $modal.removeClass("fr-active");
                if (!css) {
                    inst.accessibility.restoreSelection();
                    inst.events.trigger("modals.hide");
                }
            }
        }
        /**
         * @param {!Object} value
         * @return {?}
         */
        function check(value) {
            var a;
            if ("string" == typeof value) {
                if (!data[value]) {
                    return;
                }
                a = data[value].$modal;
            } else {
                /** @type {!Object} */
                a = value;
            }
            return a && editor.node.hasClass(a, "fr-active") && editor.core.sameInstance(a) || false;
        }
        if (!editor.shared.modals) {
            editor.shared.modals = {};
        }
        var $overlay;
        var data = editor.shared.modals;
        return {
            _init : function() {
                editor.events.on("shared.destroy", close, true);
            },
            get : function(i) {
                return data[i];
            },
            create : function(val, e, g) {
                if (editor.shared.$overlay || (editor.shared.$overlay = $('<div class="fr-overlay">').appendTo("body:first")), $overlay = editor.shared.$overlay, editor.opts.theme && $overlay.addClass(editor.opts.theme + "-theme"), !data[val]) {
                    var $modal = (h = e, removeGraphic = g, photo = '<div tabIndex="-1" class="fr-modal' + (editor.opts.theme ? " " + editor.opts.theme + "-theme" : "") + '"><div class="fr-modal-wrapper">', photo = photo + ('<div class="fr-modal-head">' + h + '<i title="' + editor.language.translate("Cancel") + '" class="fa fa-times fr-modal-close"></i></div>'), photo = photo + ('<div tabIndex="-1" class="fr-modal-body">' + removeGraphic + "</div>"), $(photo = photo + "</div></div>"));
                    data[val] = {
                        $modal : $modal,
                        $head : $modal.find(".fr-modal-head"),
                        $body : $modal.find(".fr-modal-body")
                    };
                    if (!editor.helpers.isMobile()) {
                        $modal.addClass("fr-desktop");
                    }
                    $modal.appendTo("body:first");
                    editor.events.$on($modal, "click", ".fr-modal-close", function() {
                        hide(val);
                    }, true);
                    data[val].$body.css("margin-top", data[val].$head.outerHeight());
                    editor.events.$on($modal, "keydown", function(event) {
                        var keyCode = event.which;
                        return keyCode == $.FE.KEYCODE.ESC ? (hide(val), editor.accessibility.focusModalButton($modal), false) : !(!$(event.currentTarget).is("input[type=text], textarea") && keyCode != $.FE.KEYCODE.ARROW_UP && keyCode != $.FE.KEYCODE.ARROW_DOWN && !editor.keys.isBrowserAction(event) && (event.preventDefault(), event.stopPropagation(), 1));
                    }, true);
                    hide(val, true);
                }
                var h;
                var removeGraphic;
                var photo;
                return data[val];
            },
            show : function(e) {
                if (data[e]) {
                    var $modal = data[e].$modal;
                    $modal.data("instance", editor);
                    $modal.show();
                    $overlay.show();
                    $(editor.o_doc).find("body:first").addClass("prevent-scroll");
                    if (editor.helpers.isMobile()) {
                        $(editor.o_doc).find("body:first").addClass("fr-mobile");
                    }
                    $modal.addClass("fr-active");
                    editor.accessibility.focusModal($modal);
                }
            },
            hide : hide,
            resize : function(version) {
                if (data[version]) {
                    var self = data[version];
                    var $el = self.$modal;
                    var $body = self.$body;
                    var o = $(editor.o_win).height();
                    var middleEl = $el.find(".fr-modal-wrapper");
                    /** @type {number} */
                    var currentHeight = o - middleEl.outerHeight(true) + (middleEl.height() - ($body.outerHeight(true) - $body.height()));
                    /** @type {string} */
                    var height = "auto";
                    if (currentHeight < $body.get(0).scrollHeight) {
                        /** @type {number} */
                        height = currentHeight;
                    }
                    $body.height(height);
                }
            },
            isVisible : check,
            areVisible : function(obj) {
                var p;
                for (p in data) {
                    if (data.hasOwnProperty(p) && check(p) && (void 0 === obj || data[p].$modal.data("instance") == obj)) {
                        return data[p].$modal;
                    }
                }
                return false;
            }
        };
    };
    $.FE.POPUP_TEMPLATES = {
        "text.edit" : "[_EDIT_]"
    };
    /**
     * @param {?} url
     * @param {?} eTag
     * @return {undefined}
     */
    $.FE.RegisterTemplate = function(url, eTag) {
        $.FE.POPUP_TEMPLATES[url] = eTag;
    };
    /**
     * @param {!Object} editor
     * @return {?}
     */
    $.FE.MODULES.popups = function(editor) {
        /**
         * @param {string} i
         * @param {!Object} t
         * @return {undefined}
         */
        function callback(i, t) {
            if (!t.is(":visible")) {
                t = editor.$sc;
            }
            if (!t.is(list[i].data("container"))) {
                list[i].data("container", t);
                t.append(list[i]);
            }
        }
        /**
         * @param {string} key
         * @return {?}
         */
        function get(key) {
            return list[key] && editor.node.hasClass(list[key], "fr-active") && editor.core.sameInstance(list[key]) || false;
        }
        /**
         * @param {!Array} obj
         * @return {?}
         */
        function remove(obj) {
            var id;
            for (id in list) {
                if (list.hasOwnProperty(id) && get(id) && (void 0 === obj || list[id].data("instance") == obj)) {
                    return list[id];
                }
            }
            return false;
        }
        /**
         * @param {string} val
         * @return {undefined}
         */
        function update(val) {
            /** @type {null} */
            var v = null;
            if ((v = "string" != typeof val ? val : list[val]) && editor.node.hasClass(v, "fr-active")) {
                v.removeClass("fr-active fr-above");
                editor.events.trigger("popups.hide." + val);
                if (editor.$tb) {
                    if (1 < editor.opts.zIndex) {
                        editor.$tb.css("zIndex", editor.opts.zIndex + 1);
                    } else {
                        editor.$tb.css("zIndex", "");
                    }
                }
                editor.events.disableBlur();
                v.find("input, textarea, button").filter(":focus").blur();
                v.find("input, textarea").attr("disabled", "disabled");
            }
        }
        /**
         * @param {!Array} labels
         * @return {undefined}
         */
        function clear(labels) {
            var t;
            for (t in void 0 === labels && (labels = []), list) {
                if (list.hasOwnProperty(t) && labels.indexOf(t) < 0) {
                    update(t);
                }
            }
        }
        /**
         * @return {undefined}
         */
        function create() {
            /** @type {boolean} */
            editor.shared.exit_flag = true;
        }
        /**
         * @return {undefined}
         */
        function _hide() {
            /** @type {boolean} */
            editor.shared.exit_flag = false;
        }
        /**
         * @return {?}
         */
        function _open() {
            return editor.shared.exit_flag;
        }
        /**
         * @param {number} value
         * @param {!Object} host
         * @return {?}
         */
        function initialize(value, host) {
            var el;
            var ref;
            var report = function(name, obj) {
                var result = $.FE.POPUP_TEMPLATES[name];
                if (!result) {
                    return null;
                }
                var key;
                for (key in "function" == typeof result && (result = result.apply(editor)), obj) {
                    if (obj.hasOwnProperty(key)) {
                        result = result.replace("[_" + key.toUpperCase() + "_]", obj[key]);
                    }
                }
                return result;
            }(value, host);
            return report ? (el = $('<div class="fr-popup' + (editor.helpers.isMobile() ? " fr-mobile" : " fr-desktop") + (editor.opts.toolbarInline ? " fr-inline" : "") + '"><span class="fr-arrow"></span>' + report + "</div>"), editor.opts.theme && el.addClass(editor.opts.theme + "-theme"), 1 < editor.opts.zIndex && (editor.opts.editInPopup ? el.css("z-index", editor.opts.zIndex + 2) : editor.$tb.css("z-index", editor.opts.zIndex + 2)), "auto" != editor.opts.direction && el.removeClass("fr-ltr fr-rtl").addClass("fr-" +
                editor.opts.direction), el.find("input, textarea").attr("dir", editor.opts.direction).attr("disabled", "disabled"), (ref = $("body:first")).append(el), el.data("container", ref), list[value] = el, editor.button.bindCommands(el, false), el) : (el = $('<div class="fr-popup fr-empty"></div>'), (ref = $("body:first")).append(el), el.data("container", ref), list[value] = el);
        }
        /**
         * @param {string} e
         * @return {?}
         */
        function resolve(e) {
            var element = list[e];
            return {
                _windowResize : function() {
                    var inst = element.data("instance") || editor;
                    if (!inst.helpers.isMobile() && element.is(":visible")) {
                        inst.events.disableBlur();
                        inst.popups.hide(e);
                        inst.events.enableBlur();
                    }
                },
                _inputFocus : function(e) {
                    var inst = element.data("instance") || editor;
                    var socialButton = $(e.currentTarget);
                    if (socialButton.is("input:file") && socialButton.closest(".fr-layer").addClass("fr-input-focus"), e.preventDefault(), e.stopPropagation(), setTimeout(function() {
                            inst.events.enableBlur();
                        }, 100), inst.helpers.isMobile()) {
                        var roundedTop = $(inst.o_win).scrollTop();
                        setTimeout(function() {
                            $(inst.o_win).scrollTop(roundedTop);
                        }, 0);
                    }
                },
                _inputBlur : function(e) {
                    var inst = element.data("instance") || editor;
                    var socialButton = $(e.currentTarget);
                    if (socialButton.is("input:file")) {
                        socialButton.closest(".fr-layer").removeClass("fr-input-focus");
                    }
                    if (document.activeElement != this && $(this).is(":visible")) {
                        if (inst.events.blurActive()) {
                            inst.events.trigger("blur");
                        }
                        inst.events.enableBlur();
                    }
                },
                _editorKeydown : function(e) {
                    var options = element.data("instance") || editor;
                    if (!(options.keys.ctrlKey(e) || e.which == $.FE.KEYCODE.ALT || e.which == $.FE.KEYCODE.ESC)) {
                        if (get(e) && element.find(".fr-back:visible").length) {
                            options.button.exec(element.find(".fr-back:visible:first"));
                        } else {
                            if (e.which != $.FE.KEYCODE.ALT) {
                                options.popups.hide(e);
                            }
                        }
                    }
                },
                _preventFocus : function(e) {
                    var inst = element.data("instance") || editor;
                    var target = e.originalEvent ? e.originalEvent.target || e.originalEvent.originalTarget : null;
                    if (!("mouseup" == e.type || $(target).is(":focus"))) {
                        inst.events.disableBlur();
                    }
                    if (!("mouseup" != e.type || $(target).hasClass("fr-command") || 0 < $(target).parents(".fr-command").length || $(target).hasClass("fr-dropdown-content"))) {
                        editor.button.hideActiveDropdowns(element);
                    }
                    if ((editor.browser.safari || editor.browser.mozilla) && "mousedown" == e.type && $(target).is("input[type=file]")) {
                        inst.events.disableBlur();
                    }
                    /** @type {string} */
                    var selector = "input, textarea, button, select, label, .fr-command";
                    if (target && !$(target).is(selector) && 0 === $(target).parents(selector).length) {
                        return e.stopPropagation(), false;
                    }
                    if (target && $(target).is(selector)) {
                        e.stopPropagation();
                    }
                    _hide();
                },
                _editorMouseup : function() {
                    if (element.is(":visible") && _open() && 0 < element.find("input:focus, textarea:focus, button:focus, select:focus").filter(":visible").length) {
                        editor.events.disableBlur();
                    }
                },
                _windowMouseup : function(event) {
                    if (!editor.core.sameInstance(element)) {
                        return true;
                    }
                    var map = element.data("instance") || editor;
                    if (element.is(":visible") && _open()) {
                        event.stopPropagation();
                        map.markers.remove();
                        map.popups.hide(e);
                        _hide();
                    }
                },
                _windowKeydown : function(event) {
                    if (!editor.core.sameInstance(element)) {
                        return true;
                    }
                    var item = element.data("instance") || editor;
                    var keyCode = event.which;
                    if ($.FE.KEYCODE.ESC == keyCode) {
                        if (item.popups.isVisible(e) && item.opts.toolbarInline) {
                            return event.stopPropagation(), item.popups.isVisible(e) && (element.find(".fr-back:visible").length ? (item.button.exec(element.find(".fr-back:visible:first")), item.accessibility.focusPopupButton(element)) : element.find(".fr-dismiss:visible").length ? item.button.exec(element.find(".fr-dismiss:visible:first")) : (item.popups.hide(e), item.toolbar.showInline(null, true), item.accessibility.FocusPopupButton(element))), false;
                        }
                        if (item.popups.isVisible(e)) {
                            return element.find(".fr-back:visible").length ? (item.button.exec(element.find(".fr-back:visible:first")), item.accessibility.focusPopupButton(element)) : element.find(".fr-dismiss:visible").length ? item.button.exec(element.find(".fr-dismiss:visible:first")) : (item.popups.hide(e), item.accessibility.focusPopupButton(element)), false;
                        }
                    }
                },
                _doPlaceholder : function() {
                    if (0 === $(this).next().length && $(this).attr("placeholder")) {
                        $(this).after('<label for="' + $(this).attr("id") + '">' + $(this).attr("placeholder") + "</label>");
                    }
                    $(this).toggleClass("fr-not-empty", "" !== $(this).val());
                },
                _repositionPopup : function() {
                    if (!editor.opts.height && !editor.opts.heightMax || editor.opts.toolbarInline) {
                        return true;
                    }
                    if (editor.$wp && get(e) && element.parent().get(0) == editor.$sc.get(0)) {
                        /** @type {number} */
                        var small_diff = element.offset().top - editor.$wp.offset().top;
                        var j_diff = editor.$wp.outerHeight();
                        if (editor.node.hasClass(element.get(0), "fr-above")) {
                            small_diff = small_diff + element.outerHeight();
                        }
                        if (j_diff < small_diff || small_diff < 0) {
                            element.addClass("fr-hidden");
                        } else {
                            element.removeClass("fr-hidden");
                        }
                    }
                }
            };
        }
        /**
         * @param {?} e
         * @param {number} x
         * @return {undefined}
         */
        function init(e, x) {
            editor.events.on("mouseup", e._editorMouseup, true);
            if (editor.$wp) {
                editor.events.on("keydown", e._editorKeydown);
            }
            editor.events.on("blur", function() {
                if (remove()) {
                    editor.markers.remove();
                }
                clear();
            });
            if (editor.$wp && !editor.helpers.isMobile()) {
                editor.events.$on(editor.$wp, "scroll.popup" + x, e._repositionPopup);
            }
            editor.events.on("window.mouseup", e._windowMouseup, true);
            editor.events.on("window.keydown", e._windowKeydown, true);
            list[x].data("inst" + editor.id, true);
            editor.events.on("destroy", function() {
                if (editor.core.sameInstance(list[x])) {
                    list[x].removeClass("fr-active").appendTo("body:first");
                }
            }, true);
        }
        /**
         * @return {undefined}
         */
        function close() {
            var name;
            for (name in list) {
                if (list.hasOwnProperty(name)) {
                    var l = list[name];
                    if (l) {
                        l.html("").removeData().remove();
                        /** @type {null} */
                        list[name] = null;
                    }
                }
            }
            /** @type {!Array} */
            list = [];
        }
        if (!editor.shared.popups) {
            editor.shared.popups = {};
        }
        var list = editor.shared.popups;
        return editor.shared.exit_flag = false, {
            _init : function() {
                editor.events.on("shared.destroy", close, true);
                editor.events.on("window.mousedown", create);
                editor.events.on("window.touchmove", _hide);
                editor.events.$on($(editor.o_win), "scroll", _hide);
                editor.events.on("mousedown", function(event) {
                    if (remove()) {
                        event.stopPropagation();
                        editor.$el.find(".fr-marker").remove();
                        create();
                        editor.events.disableBlur();
                    }
                });
            },
            create : function(options, config) {
                var name = initialize(options, config);
                var value = resolve(options);
                return init(value, options), editor.events.$on(name, "mousedown mouseup touchstart touchend touch", "*", value._preventFocus, true), editor.events.$on(name, "focus", "input, textarea, button, select", value._inputFocus, true), editor.events.$on(name, "blur", "input, textarea, button, select", value._inputBlur, true), editor.accessibility.registerPopup(options), editor.events.$on(name, "keydown keyup change input", "input, textarea", value._doPlaceholder, true), editor.helpers.isIOS() && editor.events.$on(name,
                    "touchend", "label", function() {
                        $("#" + $(this).attr("for")).prop("checked", function(canCreateDiscussions, isSlidingUp) {
                            return !isSlidingUp;
                        });
                    }, true), editor.events.$on($(editor.o_win), "resize", value._windowResize, true), name;
            },
            get : function(i) {
                var bubble = list[i];
                return bubble && !bubble.data("inst" + editor.id) && init(resolve(i), i), bubble;
            },
            show : function(index, t, value, e) {
                if (get(index) || (remove() && 0 < editor.$el.find(".fr-marker").length ? (editor.events.disableBlur(), editor.selection.restore()) : remove() || (editor.events.disableBlur(), editor.events.focus(), editor.events.enableBlur())), clear([index]), !list[index]) {
                    return false;
                }
                var $btn = editor.button.getButtons(".fr-dropdown.fr-active");
                $btn.removeClass("fr-active").attr("aria-expanded", false).parent(".fr-toolbar").css("zIndex", "");
                $btn.next().attr("aria-hidden", true);
                list[index].data("instance", editor);
                if (editor.$tb) {
                    editor.$tb.data("instance", editor);
                }
                var v = list[index].outerWidth();
                var a = get(index);
                list[index].addClass("fr-active").removeClass("fr-hidden").find("input, textarea").removeAttr("disabled");
                var i;
                var parent;
                var dom = list[index].data("container");
                /** @type {string} */
                i = index;
                if (!(parent = dom).is(":visible")) {
                    parent = editor.$sc;
                }
                if (0 === parent.find([list[i]]).length) {
                    parent.append(list[i]);
                }
                if (editor.opts.toolbarInline && dom && editor.$tb && dom.get(0) == editor.$tb.get(0)) {
                    callback(index, editor.$sc);
                    /** @type {number} */
                    value = editor.$tb.offset().top - editor.helpers.getPX(editor.$tb.css("margin-top"));
                    t = editor.$tb.offset().left + editor.$tb.outerWidth() / 2 + (parseFloat(editor.$tb.find(".fr-arrow").css("margin-left")) || 0) + editor.$tb.find(".fr-arrow").outerWidth() / 2;
                    if (editor.node.hasClass(editor.$tb.get(0), "fr-above") && value) {
                        value = value + editor.$tb.outerHeight();
                    }
                    /** @type {number} */
                    e = 0;
                }
                dom = list[index].data("container");
                if (!(!editor.opts.iframe || e || a)) {
                    if (t) {
                        /** @type {number} */
                        t = t - editor.$iframe.offset().left;
                    }
                    if (value) {
                        /** @type {number} */
                        value = value - editor.$iframe.offset().top;
                    }
                }
                if (dom.is(editor.$tb)) {
                    editor.$tb.css("zIndex", (editor.opts.zIndex || 1) + 4);
                } else {
                    list[index].css("zIndex", (editor.opts.zIndex || 1) + 4);
                }
                if (t) {
                    /** @type {number} */
                    t = t - v / 2;
                }
                if (editor.opts.toolbarBottom && dom && editor.$tb && dom.get(0) == editor.$tb.get(0)) {
                    list[index].addClass("fr-above");
                    if (value) {
                        /** @type {number} */
                        value = value - list[index].outerHeight();
                    }
                }
                list[index].removeClass("fr-active");
                editor.position.at(t, value, list[index], e || 0);
                list[index].addClass("fr-active");
                if (!a) {
                    editor.accessibility.focusPopup(list[index]);
                }
                if (editor.opts.toolbarInline) {
                    editor.toolbar.hide();
                }
                editor.events.trigger("popups.show." + index);
                resolve(index)._repositionPopup();
                _hide();
            },
            hide : update,
            onHide : function(id, callback) {
                editor.events.on("popups.hide." + id, callback);
            },
            hideAll : clear,
            setContainer : callback,
            refresh : function(type) {
                list[type].data("instance", editor);
                editor.events.trigger("popups.refresh." + type);
                var bcofl_checkbox = list[type].find(".fr-command");
                /** @type {number} */
                var i = 0;
                for (; i < bcofl_checkbox.length; i++) {
                    var $this = $(bcofl_checkbox[i]);
                    if (0 === $this.parents(".fr-dropdown-menu").length) {
                        editor.button.refresh($this);
                    }
                }
            },
            onRefresh : function(event, callback) {
                editor.events.on("popups.refresh." + event, callback);
            },
            onShow : function(id, callback) {
                editor.events.on("popups.show." + id, callback);
            },
            isVisible : get,
            areVisible : remove
        };
    };
    /**
     * @param {!Object} editor
     * @return {?}
     */
    $.FE.MODULES.position = function(editor) {
        /**
         * @return {?}
         */
        function render() {
            var rect = editor.selection.ranges(0).getBoundingClientRect();
            if (0 === rect.top && 0 === rect.left && 0 === rect.width || 0 === rect.height) {
                /** @type {boolean} */
                var t = false;
                if (0 === editor.$el.find(".fr-marker").length) {
                    editor.selection.save();
                    /** @type {boolean} */
                    t = true;
                }
                var div = editor.$el.find(".fr-marker:first");
                div.css("display", "inline");
                div.css("line-height", "");
                var obj$1928 = div.offset();
                var initialHeigth = div.outerHeight();
                div.css("display", "none");
                div.css("line-height", 0);
                (rect = {}).left = obj$1928.left;
                /** @type {number} */
                rect.width = 0;
                rect.height = initialHeigth;
                /** @type {number} */
                rect.top = obj$1928.top - (editor.helpers.isMobile() && !editor.helpers.isIOS() || editor.opts.iframe ? 0 : editor.helpers.scrollTop());
                /** @type {number} */
                rect.right = 1;
                /** @type {number} */
                rect.bottom = 1;
                /** @type {boolean} */
                rect.ok = true;
                if (t) {
                    editor.selection.restore();
                }
            }
            return rect;
        }
        /**
         * @param {number} x
         * @param {number} value
         * @param {!Object} el
         * @param {undefined} idx
         * @return {undefined}
         */
        function _init(x, value, el, idx) {
            var o = el.data("container");
            if (!(!o || "BODY" === o.get(0).tagName && "static" == o.css("position"))) {
                if (x) {
                    /** @type {number} */
                    x = x - o.offset().left;
                }
                if (value) {
                    /** @type {number} */
                    value = value - o.offset().top;
                }
                if ("BODY" != o.get(0).tagName) {
                    if (x) {
                        x = x + o.get(0).scrollLeft;
                    }
                    if (value) {
                        value = value + o.get(0).scrollTop;
                    }
                } else {
                    if ("absolute" == o.css("position")) {
                        if (x) {
                            x = x + o.position().left;
                        }
                        if (value) {
                            value = value + o.position().top;
                        }
                    }
                }
            }
            if (editor.opts.iframe && o && editor.$tb && o.get(0) != editor.$tb.get(0)) {
                if (x) {
                    x = x + editor.$iframe.offset().left;
                }
                if (value) {
                    value = value + editor.$iframe.offset().top;
                }
            }
            var i;
            var j;
            var s = (i = x, j = el.outerWidth(true), i + j > editor.$sc.get(0).clientWidth - 10 && (i = editor.$sc.get(0).clientWidth - j - 10), i < 0 && (i = 10), i);
            if (x) {
                el.css("left", s);
                var $this = el.data("fr-arrow");
                if (!$this) {
                    $this = el.find(".fr-arrow");
                    el.data("fr-arrow", $this);
                }
                if (!$this.data("margin-left")) {
                    $this.data("margin-left", editor.helpers.getPX($this.css("margin-left")));
                }
                $this.css("margin-left", x - s + $this.data("margin-left"));
            }
            if (value) {
                el.css("top", function(element, d, ptIdx) {
                    var l = element.outerHeight(true);
                    if (!editor.helpers.isMobile() && editor.$tb && element.parent().get(0) != editor.$tb.get(0)) {
                        var t = element.parent().offset().top;
                        /** @type {number} */
                        var m = d - l - (ptIdx || 0);
                        if (element.parent().get(0) == editor.$sc.get(0)) {
                            /** @type {number} */
                            t = t - element.parent().position().top;
                        }
                        var innerHeight = editor.$sc.get(0).clientHeight;
                        if (t + d + l > editor.$sc.offset().top + innerHeight && 0 < element.parent().offset().top + m && 0 < m) {
                            if (m > editor.$wp.scrollTop()) {
                                /** @type {number} */
                                d = m;
                                element.addClass("fr-above");
                            }
                        } else {
                            element.removeClass("fr-above");
                        }
                    }
                    return d;
                }(el, value, idx));
            }
        }
        /**
         * @param {?} tr
         * @return {undefined}
         */
        function update(tr) {
            var $this = $(tr);
            var t = $this.is(".fr-sticky-on");
            var fdIn = $this.data("sticky-top");
            var fdOut = $this.data("sticky-scheduled");
            if (void 0 === fdIn) {
                $this.data("sticky-top", 0);
                var arrowDiv = $('<div class="fr-sticky-dummy" style="height: ' + $this.outerHeight() + 'px;"></div>');
                editor.$box.prepend(arrowDiv);
            } else {
                editor.$box.find(".fr-sticky-dummy").css("height", $this.outerHeight());
            }
            if (editor.core.hasFocus() || 0 < editor.$tb.find("input:visible:focus").length) {
                var top = editor.helpers.scrollTop();
                /** @type {number} */
                var i = Math.min(Math.max(top - editor.$tb.parent().offset().top, 0), editor.$tb.parent().outerHeight() - $this.outerHeight());
                if (i != fdIn && i != fdOut) {
                    clearTimeout($this.data("sticky-timeout"));
                    $this.data("sticky-scheduled", i);
                    if ($this.outerHeight() < top - editor.$tb.parent().offset().top) {
                        $this.addClass("fr-opacity-0");
                    }
                    $this.data("sticky-timeout", setTimeout(function() {
                        var top = editor.helpers.scrollTop();
                        /** @type {number} */
                        var i = Math.min(Math.max(top - editor.$tb.parent().offset().top, 0), editor.$tb.parent().outerHeight() - $this.outerHeight());
                        if (0 < i && "BODY" == editor.$tb.parent().get(0).tagName) {
                            i = i + editor.$tb.parent().position().top;
                        }
                        if (i != fdIn) {
                            $this.css("top", Math.max(i, 0));
                            $this.data("sticky-top", i);
                            $this.data("sticky-scheduled", i);
                        }
                        $this.removeClass("fr-opacity-0");
                    }, 100));
                }
                if (!t) {
                    $this.css("top", "0");
                    $this.width(editor.$tb.parent().width());
                    $this.addClass("fr-sticky-on");
                    editor.$box.addClass("fr-sticky-box");
                }
            } else {
                clearTimeout($(tr).css("sticky-timeout"));
                $this.css("top", "0");
                $this.css("position", "");
                $this.width("");
                $this.data("sticky-top", 0);
                $this.removeClass("fr-sticky-on");
                editor.$box.removeClass("fr-sticky-box");
            }
        }
        /**
         * @param {!HTMLElement} elem
         * @return {undefined}
         */
        function _show(elem) {
            if (elem.offsetWidth) {
                var padding;
                var pys;
                var el = $(elem);
                var o = el.outerHeight();
                var margin = el.data("sticky-position");
                var gutter = $("body" == editor.opts.scrollableContainer ? editor.o_win : editor.opts.scrollableContainer).outerHeight();
                /** @type {number} */
                var ch = 0;
                /** @type {number} */
                var yPos = 0;
                if ("body" !== editor.opts.scrollableContainer) {
                    ch = editor.$sc.offset().top;
                    /** @type {number} */
                    yPos = $(editor.o_win).outerHeight() - ch - gutter;
                }
                var height = "body" == editor.opts.scrollableContainer ? editor.helpers.scrollTop() : ch;
                var c = el.is(".fr-sticky-on");
                if (!el.data("sticky-parent")) {
                    el.data("sticky-parent", el.parent());
                }
                var $scrollerElement = el.data("sticky-parent");
                var y = $scrollerElement.offset().top;
                var p = $scrollerElement.outerHeight();
                if (el.data("sticky-offset") ? editor.$box.find(".fr-sticky-dummy").css("height", o + "px") : (el.data("sticky-offset", true), el.after('<div class="fr-sticky-dummy" style="height: ' + o + 'px;"></div>')), !margin) {
                    /** @type {boolean} */
                    var g = "auto" !== el.css("top") || "auto" !== el.css("bottom");
                    if (!g) {
                        el.css("position", "fixed");
                    }
                    margin = {
                        top : editor.node.hasClass(el.get(0), "fr-top"),
                        bottom : editor.node.hasClass(el.get(0), "fr-bottom")
                    };
                    if (!g) {
                        el.css("position", "");
                    }
                    el.data("sticky-position", margin);
                    el.data("top", editor.node.hasClass(el.get(0), "fr-top") ? el.css("top") : "auto");
                    el.data("bottom", editor.node.hasClass(el.get(0), "fr-bottom") ? el.css("bottom") : "auto");
                }
                padding = editor.helpers.getPX(el.data("top"));
                pys = editor.helpers.getPX(el.data("bottom"));
                var h = margin.top && y < height + padding && height + padding <= y + p - o && (editor.helpers.isInViewPort(editor.$sc.get(0)) || "body" == editor.opts.scrollableContainer);
                var m = margin.bottom && y + o < height + gutter - pys && height + gutter - pys < y + p;
                if (h || m) {
                    el.css("width", $scrollerElement.get(0).getBoundingClientRect().width + "px");
                    if (!c) {
                        el.addClass("fr-sticky-on");
                        el.removeClass("fr-sticky-off");
                        if (el.css("top")) {
                            if ("auto" != el.data("top")) {
                                el.css("top", editor.helpers.getPX(el.data("top")) + ch);
                            } else {
                                el.data("top", "auto");
                            }
                        }
                        if (el.css("bottom")) {
                            if ("auto" != el.data("bottom")) {
                                el.css("bottom", editor.helpers.getPX(el.data("bottom")) + yPos);
                            } else {
                                el.css("bottom", "auto");
                            }
                        }
                    }
                } else {
                    if (!editor.node.hasClass(el.get(0), "fr-sticky-off")) {
                        el.width("");
                        el.removeClass("fr-sticky-on");
                        el.addClass("fr-sticky-off");
                        if (el.css("top") && "auto" != el.data("top") && margin.top) {
                            el.css("top", 0);
                        }
                        if (el.css("bottom") && "auto" != el.data("bottom") && margin.bottom) {
                            el.css("bottom", 0);
                        }
                    }
                }
            }
        }
        /**
         * @return {?}
         */
        function init() {
            /** @type {!CSSStyleDeclaration} */
            var mStyle = document.createElement("test").style;
            return mStyle.cssText = "position:" + ["-webkit-", "-moz-", "-ms-", "-o-", ""].join("sticky; position:") + " sticky;", -1 !== mStyle.position.indexOf("sticky") && !editor.helpers.isIOS() && !editor.helpers.isAndroid() && !editor.browser.chrome;
        }
        /**
         * @return {undefined}
         */
        function callback() {
            if (editor._stickyElements) {
                /** @type {number} */
                var i = 0;
                for (; i < editor._stickyElements.length; i++) {
                    _show(editor._stickyElements[i]);
                }
            }
        }
        return {
            _init : function() {
                !function() {
                    if (!init()) {
                        if (editor._stickyElements = [], editor.helpers.isIOS()) {
                            /**
                             * @return {undefined}
                             */
                            var check = function() {
                                if (editor.helpers.requestAnimationFrame()(check), false !== editor.events.trigger("position.refresh")) {
                                    /** @type {number} */
                                    var index = 0;
                                    for (; index < editor._stickyElements.length; index++) {
                                        update(editor._stickyElements[index]);
                                    }
                                }
                            };
                            check();
                            editor.events.$on($(editor.o_win), "scroll", function() {
                                if (editor.core.hasFocus()) {
                                    /** @type {number} */
                                    var page = 0;
                                    for (; page < editor._stickyElements.length; page++) {
                                        var t = $(editor._stickyElements[page]);
                                        var rowWithMoreColumns = t.parent();
                                        var tagHeight = editor.helpers.scrollTop();
                                        if (t.outerHeight() < tagHeight - rowWithMoreColumns.offset().top) {
                                            t.addClass("fr-opacity-0");
                                            t.data("sticky-top", -1);
                                            t.data("sticky-scheduled", -1);
                                        }
                                    }
                                }
                            }, true);
                        } else {
                            if ("body" !== editor.opts.scrollableContainer) {
                                editor.events.$on($(editor.opts.scrollableContainer), "scroll", callback, true);
                            }
                            editor.events.$on($(editor.o_win), "scroll", callback, true);
                            editor.events.$on($(editor.o_win), "resize", callback, true);
                            editor.events.on("initialized", callback);
                            editor.events.on("focus", callback);
                            editor.events.$on($(editor.o_win), "resize", "textarea", callback, true);
                        }
                    }
                    editor.events.on("destroy", function() {
                        /** @type {!Array} */
                        editor._stickyElements = [];
                    });
                }();
            },
            forSelection : function(e) {
                var s = render();
                e.css({
                    top : 0,
                    left : 0
                });
                var phone = s.top + s.height;
                var len = s.left + s.width / 2 - e.get(0).offsetWidth / 2 + editor.helpers.scrollLeft();
                if (!editor.opts.iframe) {
                    phone = phone + editor.helpers.scrollTop();
                }
                _init(len, phone, e, s.height);
            },
            addSticky : function(c) {
                c.addClass("fr-sticky");
                if (editor.helpers.isIOS()) {
                    c.addClass("fr-sticky-ios");
                }
                if (!init()) {
                    c.removeClass("fr-sticky");
                    editor._stickyElements.push(c.get(0));
                }
            },
            refresh : callback,
            at : _init,
            getBoundingRect : render
        };
    };
    /**
     * @param {!Object} editor
     * @return {?}
     */
    $.FE.MODULES.refresh = function(editor) {
        /**
         * @param {!Object} a
         * @param {boolean} v
         * @return {undefined}
         */
        function callback(a, v) {
            a.toggleClass("fr-disabled", v).attr("aria-disabled", v);
        }
        return {
            undo : function(transform) {
                callback(transform, !editor.undo.canDo());
            },
            redo : function(transform) {
                callback(transform, !editor.undo.canRedo());
            },
            outdent : function(a) {
                if (editor.node.hasClass(a.get(0), "fr-no-refresh")) {
                    return false;
                }
                var stars = editor.selection.blocks();
                /** @type {number} */
                var i = 0;
                for (; i < stars.length; i++) {
                    /** @type {string} */
                    var marginFluid = "rtl" == editor.opts.direction || "rtl" == $(stars[i]).css("direction") ? "margin-right" : "margin-left";
                    if ("LI" == stars[i].tagName || "LI" == stars[i].parentNode.tagName) {
                        return callback(a, false), true;
                    }
                    if (0 < editor.helpers.getPX($(stars[i]).css(marginFluid))) {
                        return callback(a, false), true;
                    }
                }
                callback(a, true);
            },
            indent : function(delta) {
                if (editor.node.hasClass(delta.get(0), "fr-no-refresh")) {
                    return false;
                }
                var blocks = editor.selection.blocks();
                /** @type {number} */
                var i = 0;
                for (; i < blocks.length; i++) {
                    var prevNode = blocks[i].previousSibling;
                    for (; prevNode && prevNode.nodeType == Node.TEXT_NODE && 0 === prevNode.textContent.length;) {
                        prevNode = prevNode.previousSibling;
                    }
                    if ("LI" != blocks[i].tagName || prevNode) {
                        return callback(delta, false), true;
                    }
                    callback(delta, true);
                }
            }
        };
    };
    $.extend($.FE.DEFAULTS, {
        editInPopup : false
    });
    /**
     * @param {!Object} editor
     * @return {?}
     */
    $.FE.MODULES.textEdit = function(editor) {
        /**
         * @return {undefined}
         */
        function setupIScroll() {
            editor.events.$on(editor.$el, editor._mouseup, function() {
                setTimeout(function() {
                    var newValue;
                    var settingsItem;
                    settingsItem = editor.popups.get("text.edit");
                    newValue = "INPUT" === editor.$el.prop("tagName") ? editor.$el.attr("placeholder") : editor.$el.text();
                    settingsItem.find("input").val(newValue).trigger("change");
                    editor.popups.setContainer("text.edit", editor.$sc);
                    editor.popups.show("text.edit", editor.$el.offset().left + editor.$el.outerWidth() / 2, editor.$el.offset().top + editor.$el.outerHeight(), editor.$el.outerHeight());
                }, 10);
            });
        }
        return {
            _init : function() {
                var prop;
                if (editor.opts.editInPopup) {
                    prop = {
                        edit : '<div id="fr-text-edit-' + editor.id + '" class="fr-layer fr-text-edit-layer"><div class="fr-input-line"><input type="text" placeholder="' + editor.language.translate("Text") + '" tabIndex="1"></div><div class="fr-action-buttons"><button type="button" class="fr-command fr-submit" data-cmd="updateText" tabIndex="2">' + editor.language.translate("Update") + "</button></div></div>"
                    };
                    editor.popups.create("text.edit", prop);
                    setupIScroll();
                }
            },
            update : function() {
                var newValue = editor.popups.get("text.edit").find("input").val();
                if (0 === newValue.length) {
                    newValue = editor.opts.placeholderText;
                }
                if ("INPUT" === editor.$el.prop("tagName")) {
                    editor.$el.attr("placeholder", newValue);
                } else {
                    editor.$el.text(newValue);
                }
                editor.events.trigger("contentChanged");
                editor.popups.hide("text.edit");
            }
        };
    };
    $.FE.RegisterCommand("updateText", {
        focus : false,
        undo : false,
        callback : function() {
            this.textEdit.update();
        }
    });
    $.extend($.FE.DEFAULTS, {
        toolbarBottom : false,
        toolbarButtons : null,
        toolbarButtonsXS : null,
        toolbarButtonsSM : null,
        toolbarButtonsMD : null,
        toolbarContainer : null,
        toolbarInline : false,
        toolbarSticky : true,
        toolbarStickyOffset : 0,
        toolbarVisibleWithoutSelection : false
    });
    /** @type {!Array} */
    $.FE.TOOLBAR_BUTTONS = ["fullscreen", "bold", "italic", "underline", "strikeThrough", "subscript", "superscript", "|", "fontFamily", "fontSize", "color", "inlineStyle", "paragraphStyle", "|", "paragraphFormat", "align", "formatOL", "formatUL", "outdent", "indent", "quote", "-", "insertLink", "insertImage", "insertVideo", "embedly", "insertFile", "insertTable", "|", "emoticons", "specialCharacters", "insertHR", "selectAll", "clearFormatting", "|", "print", "spellChecker", "help", "html", "|", "undo",
        "redo"];
    /** @type {null} */
    $.FE.TOOLBAR_BUTTONS_MD = null;
    /** @type {!Array} */
    $.FE.TOOLBAR_BUTTONS_SM = ["bold", "italic", "underline", "|", "fontFamily", "fontSize", "insertLink", "insertImage", "table", "|", "undo", "redo"];
    /** @type {!Array} */
    $.FE.TOOLBAR_BUTTONS_XS = ["bold", "italic", "fontFamily", "fontSize", "|", "undo", "redo"];
    /**
     * @param {!Object} editor
     * @return {?}
     */
    $.FE.MODULES.toolbar = function(editor) {
        /**
         * @param {!Array} e
         * @param {!NodeList} a
         * @return {undefined}
         */
        function j(e, a) {
            /** @type {number} */
            var i = 0;
            for (; i < a.length; i++) {
                if ("-" != a[i] && "|" != a[i] && e.indexOf(a[i]) < 0) {
                    e.push(a[i]);
                }
            }
        }
        /**
         * @return {?}
         */
        function require() {
            var signedTransactionsCounter = editor.helpers.screenSize();
            return signedTransactions[signedTransactionsCounter];
        }
        /**
         * @return {undefined}
         */
        function compile() {
            var js = require();
            editor.$tb.find(".fr-separator").remove();
            editor.$tb.find("> .fr-command").addClass("fr-hidden");
            /** @type {number} */
            var i = 0;
            for (; i < js.length; i++) {
                if ("|" == js[i] || "-" == js[i]) {
                    editor.$tb.append(editor.button.buildList([js[i]]));
                } else {
                    var $btn = editor.$tb.find('> .fr-command[data-cmd="' + js[i] + '"]');
                    /** @type {null} */
                    var element = null;
                    if (editor.node.hasClass($btn.next().get(0), "fr-dropdown-menu")) {
                        element = $btn.next();
                    }
                    $btn.removeClass("fr-hidden").appendTo(editor.$tb);
                    if (element) {
                        element.appendTo(editor.$tb);
                    }
                }
            }
        }
        /**
         * @param {!Object} e
         * @param {string} islongclick
         * @return {undefined}
         */
        function _init(e, islongclick) {
            setTimeout(function() {
                if ((!e || e.which != $.FE.KEYCODE.ESC) && editor.selection.inEditor() && editor.core.hasFocus() && !editor.popups.areVisible() && (editor.opts.toolbarVisibleWithoutSelection || !editor.selection.isCollapsed() && !editor.keys.isIME() || islongclick)) {
                    if (editor.$tb.data("instance", editor), false === editor.events.trigger("toolbar.show", [e])) {
                        return false;
                    }
                    editor.$tb.show();
                    if (!editor.opts.toolbarContainer) {
                        editor.position.forSelection(editor.$tb);
                    }
                    if (1 < editor.opts.zIndex) {
                        editor.$tb.css("z-index", editor.opts.zIndex + 1);
                    } else {
                        editor.$tb.css("z-index", null);
                    }
                }
            }, 0);
        }
        /**
         * @param {string} e
         * @return {?}
         */
        function callback(e) {
            return (!e || "blur" !== e.type || document.activeElement !== editor.el) && (!(!e || "keydown" !== e.type || !editor.keys.ctrlKey(e)) || (!!editor.button.getButtons(".fr-dropdown.fr-active").next().find(editor.o_doc.activeElement).length || void(false !== editor.events.trigger("toolbar.hide") && editor.$tb.hide())));
        }
        /**
         * @param {!Object} event
         * @return {undefined}
         */
        function listener(event) {
            clearTimeout(_takingTooLongTimeout);
            if (!(event && event.which == $.FE.KEYCODE.ESC)) {
                /** @type {number} */
                _takingTooLongTimeout = setTimeout(_init, editor.opts.typingTimer);
            }
        }
        /**
         * @return {undefined}
         */
        function create() {
            editor.events.on("window.mousedown", callback);
            editor.events.on("keydown", callback);
            editor.events.on("blur", callback);
            if (!editor.helpers.isMobile()) {
                editor.events.on("window.mouseup", _init);
            }
            if (editor.helpers.isMobile()) {
                if (!editor.helpers.isIOS()) {
                    editor.events.on("window.touchend", _init);
                    if (editor.browser.mozilla) {
                        setInterval(_init, 200);
                    }
                }
            } else {
                editor.events.on("window.keyup", listener);
            }
            editor.events.on("keydown", function(event) {
                if (event && event.which == $.FE.KEYCODE.ESC) {
                    callback();
                }
            });
            editor.events.on("keydown", function(event) {
                if (event.which == $.FE.KEYCODE.ALT) {
                    return event.stopPropagation(), false;
                }
            }, true);
            editor.events.$on(editor.$wp, "scroll.toolbar", _init);
            editor.events.on("commands.after", _init);
            if (editor.helpers.isMobile()) {
                editor.events.$on(editor.$doc, "selectionchange", listener);
                editor.events.$on(editor.$doc, "orientationchange", _init);
            }
        }
        /**
         * @return {undefined}
         */
        function hidePreview() {
            editor.$tb.html("").removeData().remove();
            /** @type {null} */
            editor.$tb = null;
        }
        /**
         * @return {undefined}
         */
        function toggle() {
            editor.$box.removeClass("fr-top fr-bottom fr-inline fr-basic");
            editor.$box.find(".fr-sticky-dummy").remove();
        }
        /**
         * @return {undefined}
         */
        function init() {
            if (editor.opts.theme) {
                editor.$tb.addClass(editor.opts.theme + "-theme");
            }
            if (1 < editor.opts.zIndex) {
                editor.$tb.css("z-index", editor.opts.zIndex + 1);
            }
            if ("auto" != editor.opts.direction) {
                editor.$tb.removeClass("fr-ltr fr-rtl").addClass("fr-" + editor.opts.direction);
            }
            if (editor.helpers.isMobile()) {
                editor.$tb.addClass("fr-mobile");
            } else {
                editor.$tb.addClass("fr-desktop");
            }
            if (editor.opts.toolbarContainer) {
                if (editor.opts.toolbarInline) {
                    create();
                    callback();
                }
                if (editor.opts.toolbarBottom) {
                    editor.$tb.addClass("fr-bottom");
                } else {
                    editor.$tb.addClass("fr-top");
                }
            } else {
                if (editor.opts.toolbarInline) {
                    editor.$sc.append(editor.$tb);
                    editor.$tb.data("container", editor.$sc);
                    editor.$tb.addClass("fr-inline");
                    editor.$tb.prepend('<span class="fr-arrow"></span>');
                    create();
                    /** @type {boolean} */
                    editor.opts.toolbarBottom = false;
                } else {
                    if (editor.opts.toolbarBottom && !editor.helpers.isIOS()) {
                        editor.$box.append(editor.$tb);
                        editor.$tb.addClass("fr-bottom");
                        editor.$box.addClass("fr-bottom");
                    } else {
                        /** @type {boolean} */
                        editor.opts.toolbarBottom = false;
                        editor.$box.prepend(editor.$tb);
                        editor.$tb.addClass("fr-top");
                        editor.$box.addClass("fr-top");
                    }
                    editor.$tb.addClass("fr-basic");
                    if (editor.opts.toolbarSticky) {
                        if (editor.opts.toolbarStickyOffset) {
                            if (editor.opts.toolbarBottom) {
                                editor.$tb.css("bottom", editor.opts.toolbarStickyOffset);
                            } else {
                                editor.$tb.css("top", editor.opts.toolbarStickyOffset);
                            }
                        }
                        editor.position.addSticky(editor.$tb);
                    }
                }
            }
            (function() {
                var list = $.merge([], require());
                j(list, signedTransactions[$.FE.XS]);
                j(list, signedTransactions[$.FE.SM]);
                j(list, signedTransactions[$.FE.MD]);
                j(list, signedTransactions[$.FE.LG]);
                /** @type {number} */
                var index = list.length - 1;
                for (; 0 <= index; index--) {
                    if ("-" != list[index] && "|" != list[index] && list.indexOf(list[index]) < index) {
                        list.splice(index, 1);
                    }
                }
                var $list = editor.button.buildList(list, require());
                editor.$tb.append($list);
                editor.button.bindCommands(editor.$tb);
            })();
            editor.events.$on($(editor.o_win), "resize", compile);
            editor.events.$on($(editor.o_win), "orientationchange", compile);
            editor.accessibility.registerToolbar(editor.$tb);
            editor.events.$on(editor.$tb, editor._mousedown + " " + editor._mouseup, function(event) {
                var oDom = event.originalEvent ? event.originalEvent.target || event.originalEvent.originalTarget : null;
                if (oDom && "INPUT" != oDom.tagName && !editor.edit.isDisabled()) {
                    return event.stopPropagation(), event.preventDefault(), false;
                }
            }, true);
        }
        /** @type {!Array} */
        var signedTransactions = [];
        signedTransactions[$.FE.XS] = editor.opts.toolbarButtonsXS || editor.opts.toolbarButtons || $.FE.TOOLBAR_BUTTONS_XS || $.FE.TOOLBAR_BUTTONS || [];
        signedTransactions[$.FE.SM] = editor.opts.toolbarButtonsSM || editor.opts.toolbarButtons || $.FE.TOOLBAR_BUTTONS_SM || $.FE.TOOLBAR_BUTTONS || [];
        signedTransactions[$.FE.MD] = editor.opts.toolbarButtonsMD || editor.opts.toolbarButtons || $.FE.TOOLBAR_BUTTONS_MD || $.FE.TOOLBAR_BUTTONS || [];
        signedTransactions[$.FE.LG] = editor.opts.toolbarButtons || $.FE.TOOLBAR_BUTTONS || [];
        /** @type {null} */
        var _takingTooLongTimeout = null;
        /** @type {boolean} */
        var isHandlingData = false;
        return {
            _init : function() {
                if (editor.$sc = $(editor.opts.scrollableContainer).first(), !editor.$wp) {
                    return false;
                }
                if (editor.opts.toolbarContainer) {
                    if (editor.shared.$tb) {
                        editor.$tb = editor.shared.$tb;
                        if (editor.opts.toolbarInline) {
                            create();
                        }
                    } else {
                        editor.shared.$tb = $('<div class="fr-toolbar"></div>');
                        editor.$tb = editor.shared.$tb;
                        $(editor.opts.toolbarContainer).append(editor.$tb);
                        init();
                        editor.$tb.data("instance", editor);
                    }
                    if (editor.opts.toolbarInline) {
                        editor.$box.addClass("fr-inline");
                    } else {
                        editor.$box.addClass("fr-basic");
                    }
                    editor.events.on("focus", function() {
                        editor.$tb.data("instance", editor);
                    }, true);
                    /** @type {boolean} */
                    editor.opts.toolbarInline = false;
                } else {
                    if (editor.opts.toolbarInline) {
                        editor.$box.addClass("fr-inline");
                        if (editor.shared.$tb) {
                            editor.$tb = editor.shared.$tb;
                            create();
                        } else {
                            editor.shared.$tb = $('<div class="fr-toolbar"></div>');
                            editor.$tb = editor.shared.$tb;
                            init();
                        }
                    } else {
                        editor.$box.addClass("fr-basic");
                        editor.$tb = $('<div class="fr-toolbar"></div>');
                        init();
                        editor.$tb.data("instance", editor);
                    }
                }
                editor.events.on("destroy", toggle, true);
                editor.events.on(editor.opts.toolbarInline || editor.opts.toolbarContainer ? "shared.destroy" : "destroy", hidePreview, true);
            },
            hide : callback,
            show : function() {
                if (false === editor.events.trigger("toolbar.show")) {
                    return false;
                }
                editor.$tb.show();
            },
            showInline : _init,
            disable : function() {
                if (!isHandlingData && editor.$tb) {
                    editor.$tb.find("> .fr-command").addClass("fr-disabled fr-no-refresh").attr("aria-disabled", true);
                    /** @type {boolean} */
                    isHandlingData = true;
                }
            },
            enable : function() {
                if (isHandlingData && editor.$tb) {
                    editor.$tb.find("> .fr-command").removeClass("fr-disabled fr-no-refresh").attr("aria-disabled", false);
                    /** @type {boolean} */
                    isHandlingData = false;
                }
                editor.button.bulkRefresh();
            }
        };
    };
});
